open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 3;
connect E0 S0 127.0.0.1:3485;
# test: create table
create table test (id serial primary key, data int default 0);
select system.state().lsn;
[2]
select identity_of("public", "test");
[0]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[2]
select identity_of("public", "test");
[0]
# test: alter table rename
alter table test rename to test2;
select system.state().lsn;
[3]
select identity_of("public", "test");
{"msg": "table 'test': not exists"}
select identity_of("public", "test2");
[0]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[3]
select identity_of("public", "test");
{"msg": "table 'test': not exists"}
select identity_of("public", "test2");
[0]
# test: alter table set unlogged
alter table test2 set unlogged;
select system.table('test2').unlogged;
[true]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.table('test2').unlogged;
[true]
select system.state().lsn;
[4]
insert into test2 () values ();
insert into test2 () values ();
insert into test2 () values ();
# test: alter table set logged
alter table test2 set logged;
select system.table('test2').unlogged;
[false]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[5]
select * from test2;
[]
# test: alter table column add
insert into test2() values (), (), ();
select * from test2;
[[0, 0], [1, 0], [2, 0]]
select system.state().lsn;
[6]
select identity_of("public", "test2");
[3]
alter table test2 add column obj json;
select * from test2;
[[0, 0, null], [1, 0, null], [2, 0, null]]
select obj from test2;
[null, null, null]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[7]
select identity_of("public", "test2");
[0]
select * from test2;
[[0, 0, null], [1, 0, null], [2, 0, null]]
# test: alter table column rename
alter table test2 rename column data to abc;
select * from test2;
[[0, 0, null], [1, 0, null], [2, 0, null]]
select data from test2;
{"msg": "select ❰data❱ ⟵ column test2.data not found"}
select abc from test2;
[0, 0, 0]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[8]
select identity_of("public", "test2");
[0]
select data from test2;
{"msg": "select ❰data❱ ⟵ column test2.data not found"}
select abc from test2;
[0, 0, 0]
# test: alter table set default
alter table test2 set column abc default 123;
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", 123]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[9]
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", 123]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: alter table unset default
alter table test2 unset column abc default;
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[10]
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[10]
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: alter table set stored
alter table test2 set column abc as (1 + 1) stored;
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["as_stored", "1 + 1"], ["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[11]
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["as_stored", "1 + 1"], ["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: alter table unset stored
alter table test2 unset column abc as stored;
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[12]
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: alter table set resolved
alter table test2 set column abc as (1 + 1) resolved;
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["as_resolved", "1 + 1"], ["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[13]
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["as_resolved", "1 + 1"], ["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: alter table unset resolved
alter table test2 unset column abc as resolved;
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[14]
select system.table('test2').columns;
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": [["not_null", true], ["as_identity", 1], ["default", null]]
}, {
  "name": "abc",
  "type": 2,
  "type_size": 4,
  "constraints": [["default", null]]
}, {
  "name": "obj",
  "type": 5,
  "type_size": 0,
  "constraints": [["default", null]]
}]]
# test: alter table column drop
alter table test2 drop column abc;
select abc from test2;
{"msg": "select ❰abc❱ ⟵ column test2.abc not found"}
select * from test2;
[[0, null], [1, null], [2, null]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[15]
select identity_of("public", "test2");
[0]
select * from test2;
[[0, null], [1, null], [2, null]]
# test: create index
create index i on test2 (id);
select * from test2 use index (i);
[[0, null], [1, null], [2, null]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[16]
select identity_of("public", "test2");
[0]
select * from test2 use index (i);
[[0, null], [1, null], [2, null]]
# test: alter index rename
alter index i on test2 rename to i2;
select system.state().lsn;
[17]
select * from test2 use index (i2);
[[0, null], [1, null], [2, null]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[17]
select identity_of("public", "test2");
[0]
select * from test2 use index (i2);
[[0, null], [1, null], [2, null]]
# test: drop index
drop index i2 on test2;
select * from test2 use index (i);
{"msg": "index 'i': not exists"}
select * from test2 use index (i2);
{"msg": "index 'i2': not exists"}
select * from test2;
[[0, null], [1, null], [2, null]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[18]
select identity_of("public", "test2");
[0]
select * from test2 use index (i);
{"msg": "index 'i': not exists"}
select * from test2 use index (i2);
{"msg": "index 'i2': not exists"}
select * from test2;
[[0, null], [1, null], [2, null]]
# test: truncate
truncate test2;
select * from test2;
[]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[19]
select identity_of("public", "test2");
[0]
select * from test2;
[]
# test: drop table
drop table test2;
select system.state().lsn;
[20]
select identity_of("public", "test2");
{"msg": "table 'test2': not exists"}
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[20]
select * from test2;
{"msg": "select * from ❰test2❱ ⟵ relation not found"}
show tables;
[]
# test: create schema
create schema test;
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test",
  "system": false
}]
select system.state().lsn;
[21]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[21]
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test",
  "system": false
}]
# test: alter schema rename
alter schema test rename to test2;
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test2",
  "system": false
}]
select system.state().lsn;
[22]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[22]
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test2",
  "system": false
}]
# test: drop schema
drop schema test2;
select system.state().lsn;
[23]
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[23]
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}]
# test: create function
create function reverse(array json) return json
begin
	declare rev json := [];
	for it in (array) do
		rev := rev::push(it);
	end;
	return rev;
end;
select system.state().lsn;
[24]
show functions extended;
[{
  "schema": "public",
  "name": "reverse",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(it);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse;
[[3, 2, 1]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[24]
show functions extended;
[{
  "schema": "public",
  "name": "reverse",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(it);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse;
[[3, 2, 1]]
# test: create or replace function
create or replace function reverse(array json) return json
begin
	declare rev json := [];
	for it in (array) do
		rev := rev::push(-it);
	end;
	return rev;
end;
{"msg": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(-❰it❱ ⟵ unsupported operation type json"}
select [1,2,3]::reverse;
[[3, 2, 1]]
create or replace function reverse(array json) return json
begin
	declare rev json := [];
	for it in (array) do
		rev := rev::push(-it::int);
	end;
	return rev;
end;
select system.state().lsn;
[25]
show functions extended;
[{
  "schema": "public",
  "name": "reverse",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(-it::int);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse;
[[-3, -2, -1]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[25]
show functions extended;
[{
  "schema": "public",
  "name": "reverse",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(-it::int);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse;
[[-3, -2, -1]]
# test: alter function rename
alter function reverse rename to reverse2;
show functions;
[{
  "schema": "public",
  "name": "reverse2"
}]
select system.state().lsn;
[26]
select [1,2,3]::reverse2;
[[-3, -2, -1]]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
select system.state().lsn;
[26]
show functions extended;
[{
  "schema": "public",
  "name": "reverse2",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(-it::int);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse2;
[[-3, -2, -1]]
# test: drop function
drop function reverse2;
select system.state().lsn;
[27]
show functions extended;
[]
# test: restart
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
# test: validate state
show functions extended;
[]
select system.state().lsn;
[27]
disconnect S0;
close E0;
