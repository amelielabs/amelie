open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: create function statement parsing
create function
{"msg": "create function ⟵ name expected"}
create function 123
{"msg": "create function ❰123❱ ⟵ name expected"}
create function if
{"msg": "create function ❰if❱ ⟵ name expected"}
create function or
{"msg": "create function ❰or❱ ⟵ name expected"}
create function or 123
{"msg": "create function ❰or❱ ⟵ name expected"}
create or
{"msg": "create or ⟵ REPLACE expected"}
create or replace
{"msg": "create or replace ⟵ FUNCTION expected"}
create or replace 123
{"msg": "create or replace ❰123❱ ⟵ FUNCTION expected"}
create or replace function
{"msg": "create or replace function ⟵ name expected"}
create function test
{"msg": "create function test ⟵ BEGIN expected"}
create function test 123
{"msg": "create function test ❰123❱ ⟵ BEGIN expected"}
create function test.test
{"msg": "create function test.test ⟵ BEGIN expected"}
create function test (
{"msg": "create function test ( ⟵ name expected"}
create function test (a
{"msg": "create function test (a ⟵ unrecognized data type"}
create function test (a 1
{"msg": "create function test (a ❰1❱ ⟵ unrecognized data type"}
create function test (a int
{"msg": "create function test (a int ⟵ ) expected"}
create function test (a int,
{"msg": "create function test (a int, ⟵ name expected"}
create function test (a int,,
{"msg": "create function test (a int,❰,❱ ⟵ name expected"}
create function test (a int)
{"msg": "create function test (a int) ⟵ BEGIN expected"}
create function test (a int) begin
{"msg": "create function test (a int) begin ⟵ END expected"}
create function test ()
{"msg": "create function test () ⟵ BEGIN expected"}
create function test () begin
{"msg": "create function test () begin ⟵ END expected"}
create function test begin
{"msg": "create function test begin ⟵ END expected"}
# test: create function
create function test begin select 1 end
show functions
[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": []
}]
# test: create function (already exists)
create function test begin select 1 end
{"msg": "function 'test': already exists"}
drop function test
# test: create function (builtin already exists)
create function `set` begin select 1 end
{"msg": "function 'set': already exists"}
# test: create function (multi statement)
create function test begin select 1; return select 1; end
show functions
[{
  "schema": "public",
  "name": "test",
  "text": "select 1; return select 1;",
  "columns": []
}]
# test: create function (no arguments)
create function test () begin select 1 end
{"msg": "function 'test': already exists"}
show functions
[{
  "schema": "public",
  "name": "test",
  "text": "select 1; return select 1;",
  "columns": []
}]
drop function test
# test: create function (arguments)
create function test (a int) begin select 1 end
show functions
[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": [{
    "name": "a",
    "type": 2,
    "type_size": 4,
    "constraints": {
      "not_null": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "default": null,
      "as_identity": false,
      "as_stored": "",
      "as_resolved": ""
    }
  }]
}]
drop function test
create function test (a int, b text) begin select 1 end
show functions
[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": [{
    "name": "a",
    "type": 2,
    "type_size": 4,
    "constraints": {
      "not_null": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "default": null,
      "as_identity": false,
      "as_stored": "",
      "as_resolved": ""
    }
  }, {
    "name": "b",
    "type": 4,
    "type_size": 0,
    "constraints": {
      "not_null": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "default": null,
      "as_identity": false,
      "as_stored": "",
      "as_resolved": ""
    }
  }]
}]
# test: drop function statement parsing
drop function
{"msg": "drop function ⟵ name expected"}
drop function 123
{"msg": "drop function ❰123❱ ⟵ name expected"}
drop function if
{"msg": "drop function if ⟵ EXISTS expected"}
drop function if exists
{"msg": "drop function if exists ⟵ name expected"}
drop function test abc
{"msg": "drop function test ❰abc❱ ⟵ ; expected"}
# test: drop function
drop function test
show functions
[]
# test: drop function if exists
drop function test
{"msg": "function 'test': not exists"}
drop function if exists test
show functions
[]
# test: alter function statment parsing
alter function
{"msg": "alter function ⟵ name expected"}
alter function 123
{"msg": "alter function ❰123❱ ⟵ name expected"}
alter function test
{"msg": "alter function test ⟵ RENAME expected"}
alter function test rename
{"msg": "alter function test rename ⟵ name expected"}
alter function test rename to
{"msg": "alter function test rename to ⟵ name expected"}
alter function test rename "hello"
{"msg": "alter function test rename ❰\"hello\"❱ ⟵ name expected"}
# test: alter function rename
create function test begin select 1 end
select system.functions()
[[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": []
}]]
alter function test rename to test2
select system.functions()
[[{
  "schema": "public",
  "name": "test2",
  "text": "select 1",
  "columns": []
}]]
# test: alter function rename (already exists)
alter function test2 rename to test2
{"msg": "function 'test2': already exists"}
# test: alter function rename (schema rename)
alter function test2 rename to test.test
{"msg": "schema 'test': not exists"}
create schema test
alter function test2 rename to test.test
show function test.test
[{
  "schema": "test",
  "name": "test",
  "text": "select 1",
  "columns": []
}]
drop function test.test
show functions
[]
disconnect S0
close E0
