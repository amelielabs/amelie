open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "backends": 0
connect E0 S0 localhost:3480
# test: bootstrap (no nodes)
show nodes
[{}]
# test: ddl (without nodes)
create table test (id int primary key)
{"msg": "system has no nodes"}
create shared table test (id int primary key)
{"msg": "system has no nodes"}
select * from test
{"msg": "<public.test> table or view not found"}
# test: create node statement parsing
create compute
{"msg": "CREATE COMPUTE <NODE> expected"}
create node 1
{"msg": "unexpected token at the end of statement"}
create node for
{"msg": "unexpected token at the end of statement"}
create node for 1
{"msg": "unexpected token at the end of statement"}
# test: create node id
create node ""
{"msg": "failed to parse uuid"}
create compute node "00000000-0000-0000-0000-000000000000"
show nodes
[{
  "00000000-0000-0000-0000-000000000000": {
    "id": "00000000-0000-0000-0000-000000000000",
    "compute": true
  }
}]
# test: create node already exists
create node "00000000-0000-0000-0000-000000000000"
{"msg": "node '00000000-0000-0000-0000-000000000000': already exists"}
# test: create node if not exists
create node if "00000000-0000-0000-0000-000000000000"
{"msg": "IF <NOT> EXISTS expected"}
create node if
{"msg": "IF <NOT> EXISTS expected"}
create node if not
{"msg": "IF NOT <EXISTS> expected"}
create node if not exists
{"msg": "CREATE NODE IF NOT EXISTS <ID> expected"}
create node if not exists "00000000-0000-0000-0000-00000000000Z"
{"msg": "failed to parse uuid"}
create node if not exists "  00000000-0000-0000-0000-00000000000  "
{"msg": "failed to parse uuid"}
create node if not exists "00000000-0000-0000-0000-000000000000"
show nodes
[{
  "00000000-0000-0000-0000-000000000000": {
    "id": "00000000-0000-0000-0000-000000000000",
    "compute": true
  }
}]
# test: ddl/dml (with one node)
create table test1 (id int primary key)
create shared table test2 (id int primary key)
show tables
[{
  "public.test1": {
    "schema": "public",
    "name": "test1",
    "shared": false,
    "aggregated": false,
    "columns": [{
      "name": "id",
      "type": 2,
      "type_size": 4,
      "constraint": {
        "not_null": true,
        "serial": false,
        "random": false,
        "random_modulo": 9223372036854775807,
        "as_stored": "",
        "as_aggregated": "",
        "default": null
      }
    }],
    "indexes": [{
      "name": "primary",
      "type": 2,
      "unique": true,
      "primary": true,
      "keys": [{
        "column": 0
      }]
    }],
    "partitions": [{
      "id": 1,
      "node": "00000000-0000-0000-0000-000000000000",
      "min": 0,
      "max": 8096
    }]
  },
  "public.test2": {
    "schema": "public",
    "name": "test2",
    "shared": true,
    "aggregated": false,
    "columns": [{
      "name": "id",
      "type": 2,
      "type_size": 4,
      "constraint": {
        "not_null": true,
        "serial": false,
        "random": false,
        "random_modulo": 9223372036854775807,
        "as_stored": "",
        "as_aggregated": "",
        "default": null
      }
    }],
    "indexes": [{
      "name": "primary",
      "type": 2,
      "unique": true,
      "primary": true,
      "keys": [{
        "column": 0
      }]
    }],
    "partitions": [{
      "id": 2,
      "node": "00000000-0000-0000-0000-000000000000",
      "min": 0,
      "max": 8096
    }]
  }
}]
insert into test1 values (1), (2), (3); insert into test2 values (4),(5),(6)
select * from test1
[1, 2, 3]
select * from test2
[4, 5, 6]
# test: restart
disconnect S0
close E0
open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "backends": 0
connect E0 S0 localhost:3480
show nodes
[{
  "00000000-0000-0000-0000-000000000000": {
    "id": "00000000-0000-0000-0000-000000000000",
    "compute": true
  }
}]
select * from test1
[1, 2, 3]
select * from test2
[4, 5, 6]
# test: drop node statement parsing
drop node
{"msg": "DROP NODE <id> expected"}
drop node 1
{"msg": "DROP NODE <id> expected"}
drop node ""
{"msg": "node '': not exists"}
# test: drop node if exists
drop node "00000000-0000-0000-0000-000000000001"
{"msg": "node '00000000-0000-0000-0000-000000000001': not exists"}
drop node if exists "00000000-0000-0000-0000-000000000001"
show nodes
[{
  "00000000-0000-0000-0000-000000000000": {
    "id": "00000000-0000-0000-0000-000000000000",
    "compute": true
  }
}]
# test: drop node with dependency
drop node "00000000-0000-0000-0000-000000000000"
{"msg": "node '00000000-0000-0000-0000-000000000000': has dependencies"}
# test: drop node without dependency
create compute node "00000000-0000-0000-0000-000000000001"
create node "00000000-0000-0000-0000-000000000002"
show nodes
[{
  "00000000-0000-0000-0000-000000000000": {
    "id": "00000000-0000-0000-0000-000000000000",
    "compute": true
  },
  "00000000-0000-0000-0000-000000000001": {
    "id": "00000000-0000-0000-0000-000000000001",
    "compute": true
  },
  "00000000-0000-0000-0000-000000000002": {
    "id": "00000000-0000-0000-0000-000000000002",
    "compute": true
  }
}]
drop node "00000000-0000-0000-0000-000000000001"
show nodes
[{
  "00000000-0000-0000-0000-000000000000": {
    "id": "00000000-0000-0000-0000-000000000000",
    "compute": true
  },
  "00000000-0000-0000-0000-000000000002": {
    "id": "00000000-0000-0000-0000-000000000002",
    "compute": true
  }
}]
drop node "00000000-0000-0000-0000-000000000001"
{"msg": "node '00000000-0000-0000-0000-000000000001': not exists"}
drop node if exists "00000000-0000-0000-0000-000000000001"
# test: ddl (two nodes partitioning)
create table test3 (id int primary key)
show tables
[{
  "public.test1": {
    "schema": "public",
    "name": "test1",
    "shared": false,
    "aggregated": false,
    "columns": [{
      "name": "id",
      "type": 2,
      "type_size": 4,
      "constraint": {
        "not_null": true,
        "serial": false,
        "random": false,
        "random_modulo": 9223372036854775807,
        "as_stored": "",
        "as_aggregated": "",
        "default": null
      }
    }],
    "indexes": [{
      "name": "primary",
      "type": 2,
      "unique": true,
      "primary": true,
      "keys": [{
        "column": 0
      }]
    }],
    "partitions": [{
      "id": 1,
      "node": "00000000-0000-0000-0000-000000000000",
      "min": 0,
      "max": 8096
    }]
  },
  "public.test2": {
    "schema": "public",
    "name": "test2",
    "shared": true,
    "aggregated": false,
    "columns": [{
      "name": "id",
      "type": 2,
      "type_size": 4,
      "constraint": {
        "not_null": true,
        "serial": false,
        "random": false,
        "random_modulo": 9223372036854775807,
        "as_stored": "",
        "as_aggregated": "",
        "default": null
      }
    }],
    "indexes": [{
      "name": "primary",
      "type": 2,
      "unique": true,
      "primary": true,
      "keys": [{
        "column": 0
      }]
    }],
    "partitions": [{
      "id": 2,
      "node": "00000000-0000-0000-0000-000000000000",
      "min": 0,
      "max": 8096
    }]
  },
  "public.test3": {
    "schema": "public",
    "name": "test3",
    "shared": false,
    "aggregated": false,
    "columns": [{
      "name": "id",
      "type": 2,
      "type_size": 4,
      "constraint": {
        "not_null": true,
        "serial": false,
        "random": false,
        "random_modulo": 9223372036854775807,
        "as_stored": "",
        "as_aggregated": "",
        "default": null
      }
    }],
    "indexes": [{
      "name": "primary",
      "type": 2,
      "unique": true,
      "primary": true,
      "keys": [{
        "column": 0
      }]
    }],
    "partitions": [{
      "id": 3,
      "node": "00000000-0000-0000-0000-000000000000",
      "min": 0,
      "max": 4048
    }, {
      "id": 4,
      "node": "00000000-0000-0000-0000-000000000002",
      "min": 4048,
      "max": 8096
    }]
  }
}]
# test: drop node (after table drop)
drop node "00000000-0000-0000-0000-000000000002"
{"msg": "node '00000000-0000-0000-0000-000000000002': has dependencies"}
drop table test3
drop node "00000000-0000-0000-0000-000000000002"
show nodes
[{
  "00000000-0000-0000-0000-000000000000": {
    "id": "00000000-0000-0000-0000-000000000000",
    "compute": true
  }
}]
# test: create table/create node/select
create table test4(id int primary key)
insert into test4 values (1), (2), (3)
create node "00000000-0000-0000-0000-000000000003"
create node "00000000-0000-0000-0000-000000000004"
select * from test4
[1, 2, 3]
drop table test4
disconnect S0
close E0
