env_open E0
connect E0 S0
connect: on_connect
# test: partition by statement parsing
create table test(id int primary key) 123 partition
query: on_error
{"code": 1, "msg": "unexpected clause at the end of command"}
create table test(id int primary key) partition
query: on_error
{"code": 1, "msg": "PARTITION <BY> expected"}
create table test(id int primary key) partition 123
query: on_error
{"code": 1, "msg": "PARTITION <BY> expected"}
create table test(id int primary key) partition by
query: on_error
{"code": 1, "msg": "PARTITION BY <(> expected"}
create table test(id int primary key) partition by 123
query: on_error
{"code": 1, "msg": "PARTITION BY <(> expected"}
create table test(id int primary key) partition by (
query: on_error
{"code": 1, "msg": "PARTITION BY (<key> expected"}
create table test(id int primary key) partition by ("123"
query: on_error
{"code": 1, "msg": "PARTITION BY (<key> expected"}
create table test(id int primary key) partition by (name
query: on_error
{"code": 1, "msg": "<name> column does not exists"}
create table test(id int primary key) partition by (id)
query: on_error
{"code": 1, "msg": "PARTITION BY () <INTERVAL> expected"}
create table test(id int primary key) partition by (id) for
query: on_error
{"code": 1, "msg": "PARTITION BY () <INTERVAL> expected"}
create table test(id int primary key) partition by (id) interval
query: on_error
{"code": 1, "msg": "PARTITION BY () INTERVAL <integer> expected"}
create table test(id int primary key) partition by (id) interval "123"
query: on_error
{"code": 1, "msg": "PARTITION BY () INTERVAL <integer> expected"}
# test: partition by primary key
create table test(id int primary key) partition by (id) interval 123
select *.map from system.tables()
{"type": 2, "interval": 123}
drop table test
# test: partition by reference
create table test(id int primary key) reference partition by (id) interval 123
query: on_error
{"code": 1, "msg": "PARTITION BY cannot be used with a reference table"}
# test: partition by key order
create table test(id int, data int, primary key(data, id)) partition by (id) interval 123
query: on_error
{"code": 1, "msg": "PARTITION BY key must be first in the PRIMARY KEY order"}
# test: partition by key type
create table test(id string, primary key(id)) partition by (id) interval 123
query: on_error
{"code": 1, "msg": "PARTITION BY key must be integer"}
# test: partition by zero interval
create table test(id int primary key) partition by (id) interval 0
query: on_error
{"code": 1, "msg": "PARTITION BY interval cannot be zero"}
# test: partition by
create table test(id int primary key) partition by (id) interval 123
select *.map from system.tables()
{"type": 2, "interval": 123}
drop table test
# test: partition by no default
create table test(id int primary key) partition by (id) interval 123
select system.partitions()[0][0][1]
[]
drop table test
# test: partition by create on insert
create table test(id int primary key) partition by (id) interval 10
insert into test values (3), (15), (48)
select system.partitions()[0][0][1]
[{"min": 0, "max": 10}, {"min": 10, "max": 20}, {"min": 40, "max": 50}]
# test: partition by iterate over partitions
select * from test
[3]
[15]
[48]
select * from test where id >= 2
[3]
[15]
[48]
select * from test where id >= 10
[15]
[48]
select * from test where id >= 30
[48]
drop table test
# test: partition by create on insert negative
create table test(id int primary key) partition by (id) interval 10
insert into test values (-3), (-15), (-48), (0), (3), (15)
select system.partitions()[0][0][1]
[{"min": -50, "max": -40}, {"min": -20, "max": -10}, {"min": -10, "max": 0}, {"min": 0, "max": 10}, {"min": 10, "max": 20}]
select * from test
[-48]
[-15]
[-3]
[0]
[3]
[15]
drop table test
# test: partition by create on insert negative #2
create table test(id int primary key) partition by (id) interval 10
insert into test values (3), (-3), (0)
select system.partitions()[0][0][1]
[{"min": -10, "max": 0}, {"min": 0, "max": 10}]
select * from test
[-3]
[0]
[3]
drop table test
# test: partition by nested key
create table test(data map, primary key(data.id integer)) partition by (data.id) interval 10
insert into test {"id": 48}, {"id": -48}, {"id": 3}, {"id": -3}, {"id": 0}
select system.partitions()[0][0][1]
[{"min": -50, "max": -40}, {"min": -10, "max": 0}, {"min": 0, "max": 10}, {"min": 40, "max": 50}]
select * from test
[{"id": -48}]
[{"id": -3}]
[{"id": 0}]
[{"id": 3}]
[{"id": 48}]
drop table test
# test: table has single partition
create table test(id int primary key)
select system.partitions()[0][0][1]
[{"min": -9223372036854775808, "max": 9223372036854775807}]
drop table test
# test: reference table has single partition
create table test(id int primary key) reference
select system.partitions()[0][0][1]
[{"min": -9223372036854775808, "max": 9223372036854775807}]
drop table test
disconnect S0
env_close E0
