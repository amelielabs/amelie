open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 3
connect E0 S0 127.0.0.1:3485
# test: select * from table group by (column not defined)
create table test (id int primary key, data int)
explain select * from test group by id
{"msg": "explain select ❰*❱ ⟵ column test.data must appear in the GROUP BY clause or be used by an aggregate function"}
explain select data from test group by id
{"msg": "explain select ❰data❱ ⟵ column data must appear in the GROUP BY clause or be used by an aggregate function"}
drop table test
# test: select * from table group by (empty)
create table test (id int primary key)
explain select * from test group by id
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "store_open          1      0      12    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "store_next          1      8      0     ",
      "12": "store_close         1      1      0     ",
      "13": "content             1      -      -     ",
      "14": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
drop table test
# test: select from table group by column
create table test (id int primary key, data int)
select * from test group by id
{"msg": "select ❰*❱ ⟵ column test.data must appear in the GROUP BY clause or be used by an aggregate function"}
select id from test group by id
[]
insert into test values (0, 0)
insert into test values (1, 0)
insert into test values (2, 1)
insert into test values (3, 1)
insert into test values (4, 2)
select * from test
[[0, 0], [1, 0], [3, 1], [4, 2], [2, 1]]
explain select id from test group by id
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "store_open          1      0      12    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "store_next          1      8      0     ",
      "12": "store_close         1      1      0     ",
      "13": "content             1      -      -     ",
      "14": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id
[0, 1, 2, 3, 4]
select data from test group by data
[0, 1, 2]
# test: select from table group by keys only
select data from test group by id
{"msg": "select ❰data❱ ⟵ column data must appear in the GROUP BY clause or be used by an aggregate function"}
# test: select from table group by column, column
select id, data from test group by id, data
[[0, 0], [1, 0], [2, 1], [3, 1], [4, 2]]
select id, data from test group by data, id
[[0, 0], [1, 0], [2, 1], [3, 1], [4, 2]]
# test: select expr from table group by
select id, 100 + id from test group by id
[[0, 100], [1, 101], [2, 102], [3, 103], [4, 104]]
# test: select from (select from table group by)
explain select * from (select id from test group by id) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "store_open          1      0      12    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "store_next          1      8      0     ",
      "12": "store_close         1      1      0     ",
      "13": "set                 0      1      0     ",
      "14": "ref                 2      1      0     ",
      "15": "store_open          0      2      20    ",
      "16": "store_read          3      0      0     ",
      "17": "push                3      0      0     ",
      "18": "set_add             0      0      0     ",
      "19": "store_next          0      16     0     ",
      "20": "store_close         0      1      0     ",
      "21": "content             0      -      -     ",
      "22": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id) t
[0, 1, 2, 3, 4]
select x from (select id, 100 + id as x from test group by id) t
[100, 101, 102, 103, 104]
# test: select from table group by limit
explain select id from test group by id limit 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      16    ",
      "09": "jmp                 11     0      0     ",
      "10": "jmp                 16     0      0     ",
      "11": "cjltd               2      10     0     ",
      "12": "store_read          3      1      0     ",
      "13": "push                3      0      0     ",
      "14": "set_add             1      0      0     ",
      "15": "store_next          1      11     0     ",
      "16": "store_close         1      1      0     ",
      "17": "content             1      -      -     ",
      "18": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id limit 2
[0, 1]
select id from test group by id limit 3
[0, 1, 2]
select id from test group by id limit 4
[0, 1, 2, 3]
# test: select from table group by limit/offset
explain select id from test group by id limit 1 offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "int                 3      -      0     # 1",
      "09": "store_open          1      0      18    ",
      "10": "jmp                 12     0      0     ",
      "11": "jmp                 18     0      0     ",
      "12": "cjgted              3      17     0     ",
      "13": "cjltd               2      11     0     ",
      "14": "store_read          4      1      0     ",
      "15": "push                4      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      12     0     ",
      "18": "store_close         1      1      0     ",
      "19": "content             1      -      -     ",
      "20": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id limit 1 offset 1
[1]
select id from test group by id limit 1 offset 2
[2]
select id from test group by id limit 1 offset 3
[3]
select id from test group by id limit 1 offset 4
[4]
# test: select from table group by offset
explain select id from test group by id offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      14    ",
      "09": "cjgted              2      13     0     ",
      "10": "store_read          3      1      0     ",
      "11": "push                3      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      9      0     ",
      "14": "store_close         1      1      0     ",
      "15": "content             1      -      -     ",
      "16": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id offset 1
[1, 2, 3, 4]
select id from test group by id offset 2
[2, 3, 4]
select id from test group by id offset 3
[3, 4]
select id from test group by id offset 4
[4]
# test: select from (select from table group by limit)
explain select * from (select id from test group by id limit 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      16    ",
      "09": "jmp                 11     0      0     ",
      "10": "jmp                 16     0      0     ",
      "11": "cjltd               2      10     0     ",
      "12": "store_read          3      1      0     ",
      "13": "push                3      0      0     ",
      "14": "set_add             1      0      0     ",
      "15": "store_next          1      11     0     ",
      "16": "store_close         1      1      0     ",
      "17": "set                 0      1      0     ",
      "18": "ref                 2      1      0     ",
      "19": "store_open          0      2      24    ",
      "20": "store_read          3      0      0     ",
      "21": "push                3      0      0     ",
      "22": "set_add             0      0      0     ",
      "23": "store_next          0      20     0     ",
      "24": "store_close         0      1      0     ",
      "25": "content             0      -      -     ",
      "26": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id limit 1) t
[0]
select * from (select id from test group by id limit 2) t
[0, 1]
select * from (select id from test group by id limit 3) t
[0, 1, 2]
select * from (select id from test group by id limit 4) t
[0, 1, 2, 3]
# test: select from (select from table group by limit/offset)
explain select * from (select id from test group by id limit 1 offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "int                 3      -      0     # 1",
      "09": "store_open          1      0      18    ",
      "10": "jmp                 12     0      0     ",
      "11": "jmp                 18     0      0     ",
      "12": "cjgted              3      17     0     ",
      "13": "cjltd               2      11     0     ",
      "14": "store_read          4      1      0     ",
      "15": "push                4      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      12     0     ",
      "18": "store_close         1      1      0     ",
      "19": "set                 0      1      0     ",
      "20": "ref                 2      1      0     ",
      "21": "store_open          0      2      26    ",
      "22": "store_read          3      0      0     ",
      "23": "push                3      0      0     ",
      "24": "set_add             0      0      0     ",
      "25": "store_next          0      22     0     ",
      "26": "store_close         0      1      0     ",
      "27": "content             0      -      -     ",
      "28": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id limit 1 offset 1) t
[1]
select * from (select id from test group by id limit 1 offset 2) t
[2]
select * from (select id from test group by id limit 1 offset 3) t
[3]
select * from (select id from test group by id limit 1 offset 4) t
[4]
# test: select from (select from table group by offset)
explain select * from (select id from test group by id offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      14    ",
      "09": "cjgted              2      13     0     ",
      "10": "store_read          3      1      0     ",
      "11": "push                3      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      9      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set                 0      1      0     ",
      "16": "ref                 2      1      0     ",
      "17": "store_open          0      2      22    ",
      "18": "store_read          3      0      0     ",
      "19": "push                3      0      0     ",
      "20": "set_add             0      0      0     ",
      "21": "store_next          0      18     0     ",
      "22": "store_close         0      1      0     ",
      "23": "content             0      -      -     ",
      "24": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id offset 1) t
[1, 2, 3, 4]
select * from (select id from test group by id offset 2) t
[2, 3, 4]
select * from (select id from test group by id offset 3) t
[3, 4]
select * from (select id from test group by id offset 4) t
[4]
# test: select from table group by having
explain select id from test group by id having id >= 3
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "store_open          1      0      16    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 3",
      "10": "gteii               4      2      3     ",
      "11": "jntr                15     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "set_add             1      0      0     ",
      "15": "store_next          1      8      0     ",
      "16": "store_close         1      1      0     ",
      "17": "content             1      -      -     ",
      "18": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id having id >= 3
[3, 4]
select id from test group by id having id = 0
[0]
select id from test group by id having id = 1
[1]
select id from test group by id having id = 2
[2]
select id from test group by id having id = 3
[3]
select id from test group by id having id = 4
[4]
select id from test group by id having id = 5
[]
select id from test group by id having id >= 1 and id <= 3
[1, 2, 3]
# test: select from table group by having limit
explain select id from test group by id having id >= 1 limit 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      20    ",
      "09": "jmp                 11     0      0     ",
      "10": "jmp                 20     0      0     ",
      "11": "store_read          3      1      0     ",
      "12": "int                 4      -      0     # 1",
      "13": "gteii               5      3      4     ",
      "14": "jntr                19     5      0     ",
      "15": "cjltd               2      10     0     ",
      "16": "store_read          3      1      0     ",
      "17": "push                3      0      0     ",
      "18": "set_add             1      0      0     ",
      "19": "store_next          1      11     0     ",
      "20": "store_close         1      1      0     ",
      "21": "content             1      -      -     ",
      "22": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id having id >= 1 limit 1
[1]
select id from test group by id having id >= 1 limit 2
[1, 2]
# test: select from table group by having limit/offset
explain select id from test group by id having id >= 1 limit 1 offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "int                 3      -      0     # 1",
      "09": "store_open          1      0      22    ",
      "10": "jmp                 12     0      0     ",
      "11": "jmp                 22     0      0     ",
      "12": "store_read          4      1      0     ",
      "13": "int                 5      -      0     # 1",
      "14": "gteii               6      4      5     ",
      "15": "jntr                21     6      0     ",
      "16": "cjgted              3      21     0     ",
      "17": "cjltd               2      11     0     ",
      "18": "store_read          4      1      0     ",
      "19": "push                4      0      0     ",
      "20": "set_add             1      0      0     ",
      "21": "store_next          1      12     0     ",
      "22": "store_close         1      1      0     ",
      "23": "content             1      -      -     ",
      "24": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id having id >= 1 limit 1 offset 1
[2]
select id from test group by id having id >= 1 limit 1 offset 2
[3]
select id from test group by id having id >= 1 limit 1 offset 3
[4]
# test: select from table group by having offset
explain select id from test group by id having id >= 1 offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      18    ",
      "09": "store_read          3      1      0     ",
      "10": "int                 4      -      0     # 1",
      "11": "gteii               5      3      4     ",
      "12": "jntr                17     5      0     ",
      "13": "cjgted              2      17     0     ",
      "14": "store_read          3      1      0     ",
      "15": "push                3      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      9      0     ",
      "18": "store_close         1      1      0     ",
      "19": "content             1      -      -     ",
      "20": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id having id >= 1 offset 1
[2, 3, 4]
select id from test group by id having id >= 1 offset 2
[3, 4]
select id from test group by id having id >= 1 offset 3
[4]
# test: select from (select from table group by having)
explain select * from (select id from test group by id having id >= 3) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "store_open          1      0      16    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 3",
      "10": "gteii               4      2      3     ",
      "11": "jntr                15     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "set_add             1      0      0     ",
      "15": "store_next          1      8      0     ",
      "16": "store_close         1      1      0     ",
      "17": "set                 0      1      0     ",
      "18": "ref                 2      1      0     ",
      "19": "store_open          0      2      24    ",
      "20": "store_read          3      0      0     ",
      "21": "push                3      0      0     ",
      "22": "set_add             0      0      0     ",
      "23": "store_next          0      20     0     ",
      "24": "store_close         0      1      0     ",
      "25": "content             0      -      -     ",
      "26": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id having id >= 3) t
[3, 4]
# test: select from (select from table group by having limit)
explain select * from (select id from test group by id having id >= 1 limit 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      20    ",
      "09": "jmp                 11     0      0     ",
      "10": "jmp                 20     0      0     ",
      "11": "store_read          3      1      0     ",
      "12": "int                 4      -      0     # 1",
      "13": "gteii               5      3      4     ",
      "14": "jntr                19     5      0     ",
      "15": "cjltd               2      10     0     ",
      "16": "store_read          3      1      0     ",
      "17": "push                3      0      0     ",
      "18": "set_add             1      0      0     ",
      "19": "store_next          1      11     0     ",
      "20": "store_close         1      1      0     ",
      "21": "set                 0      1      0     ",
      "22": "ref                 2      1      0     ",
      "23": "store_open          0      2      28    ",
      "24": "store_read          3      0      0     ",
      "25": "push                3      0      0     ",
      "26": "set_add             0      0      0     ",
      "27": "store_next          0      24     0     ",
      "28": "store_close         0      1      0     ",
      "29": "content             0      -      -     ",
      "30": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id having id >= 1 limit 1) t
[1]
select * from (select id from test group by id having id >= 1 limit 2) t
[1, 2]
# test: select from (select from table group by having limit/offset)
explain select * from (select id from test group by id having id >= 1 limit 1 offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "int                 3      -      0     # 1",
      "09": "store_open          1      0      22    ",
      "10": "jmp                 12     0      0     ",
      "11": "jmp                 22     0      0     ",
      "12": "store_read          4      1      0     ",
      "13": "int                 5      -      0     # 1",
      "14": "gteii               6      4      5     ",
      "15": "jntr                21     6      0     ",
      "16": "cjgted              3      21     0     ",
      "17": "cjltd               2      11     0     ",
      "18": "store_read          4      1      0     ",
      "19": "push                4      0      0     ",
      "20": "set_add             1      0      0     ",
      "21": "store_next          1      12     0     ",
      "22": "store_close         1      1      0     ",
      "23": "set                 0      1      0     ",
      "24": "ref                 2      1      0     ",
      "25": "store_open          0      2      30    ",
      "26": "store_read          3      0      0     ",
      "27": "push                3      0      0     ",
      "28": "set_add             0      0      0     ",
      "29": "store_next          0      26     0     ",
      "30": "store_close         0      1      0     ",
      "31": "content             0      -      -     ",
      "32": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id having id >= 1 limit 1 offset 1) t
[2]
select * from (select id from test group by id having id >= 1 limit 1 offset 2) t
[3]
select * from (select id from test group by id having id >= 1 limit 1 offset 3) t
[4]
# test: select from (select from table group by having offset)
explain select * from (select id from test group by id having id >= 1 offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "int                 2      -      0     # 1",
      "08": "store_open          1      0      18    ",
      "09": "store_read          3      1      0     ",
      "10": "int                 4      -      0     # 1",
      "11": "gteii               5      3      4     ",
      "12": "jntr                17     5      0     ",
      "13": "cjgted              2      17     0     ",
      "14": "store_read          3      1      0     ",
      "15": "push                3      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      9      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set                 0      1      0     ",
      "20": "ref                 2      1      0     ",
      "21": "store_open          0      2      26    ",
      "22": "store_read          3      0      0     ",
      "23": "push                3      0      0     ",
      "24": "set_add             0      0      0     ",
      "25": "store_next          0      22     0     ",
      "26": "store_close         0      1      0     ",
      "27": "content             0      -      -     ",
      "28": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id having id >= 1 offset 1) t
[2, 3, 4]
select * from (select id from test group by id having id >= 1 offset 2) t
[3, 4]
select * from (select id from test group by id having id >= 1 offset 3) t
[4]
# test: select from table group by order by
explain select id from test group by id order by id
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "content             1      -      -     ",
      "17": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id
[0, 1, 2, 3, 4]
# test: select from table group by order by keys only
select id from test group by id order by data
{"msg": "select id from test group by id order by ❰data❱ ⟵ column data must appear in the GROUP BY clause or be used by an aggregate function"}
# test: select from table group by order by desc
explain select id from test group by id order by id desc
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "content             1      -      -     ",
      "17": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id desc
[4, 3, 2, 1, 0]
# test: select from (select from table group by order by)
explain select * from (select id from test group by id order by id desc) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "set                 0      1      0     ",
      "17": "ref                 2      1      0     ",
      "18": "store_open          0      2      23    ",
      "19": "store_read          3      0      0     ",
      "20": "push                3      0      0     ",
      "21": "set_add             0      0      0     ",
      "22": "store_next          0      19     0     ",
      "23": "store_close         0      1      0     ",
      "24": "content             0      -      -     ",
      "25": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id order by id desc) t
[4, 3, 2, 1, 0]
# test: select from table group by order by asc limit
explain select id from test group by id order by id asc limit 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      0     ",
      "20": "content             2      -      -     ",
      "21": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id asc limit 1
[0]
select id from test group by id order by id asc limit 2
[0, 1]
select id from test group by id order by id asc limit 3
[0, 1, 2]
# test: select from table group by order by asc limit/offset
explain select id from test group by id order by id asc limit 1 offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "int                 2      -      0     # 1",
      "20": "union               3      1      0     ",
      "21": "content             3      -      -     ",
      "22": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id asc limit 1 offset 1
[1]
select id from test group by id order by id asc limit 1 offset 2
[2]
select id from test group by id order by id asc limit 1 offset 3
[3]
# test: select from table group by order by asc offset
explain select id from test group by id order by id asc offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      -1    ",
      "20": "content             2      -      -     ",
      "21": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id asc offset 1
[1, 2, 3, 4]
select id from test group by id order by id asc offset 2
[2, 3, 4]
select id from test group by id order by id asc offset 3
[3, 4]
# test: select from table group by order by desc limit
explain select id from test group by id order by id desc limit 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      0     ",
      "20": "content             2      -      -     ",
      "21": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id desc limit 1
[4]
select id from test group by id order by id desc limit 2
[4, 3]
select id from test group by id order by id desc limit 3
[4, 3, 2]
# test: select from table group by order by desc limit/offset
explain select id from test group by id order by id desc limit 1 offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "int                 2      -      0     # 1",
      "20": "union               3      1      0     ",
      "21": "content             3      -      -     ",
      "22": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id desc limit 1 offset 1
[3]
select id from test group by id order by id desc limit 1 offset 2
[2]
select id from test group by id order by id desc limit 1 offset 3
[1]
# test: select from table group by order by desc offset
explain select id from test group by id order by id desc offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      -1    ",
      "20": "content             2      -      -     ",
      "21": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id from test group by id order by id desc offset 0
[4, 3, 2, 1, 0]
select id from test group by id order by id desc offset 1
[3, 2, 1, 0]
select id from test group by id order by id desc offset 2
[2, 1, 0]
select id from test group by id order by id desc offset 3
[1, 0]
# test: select from (select from table group by order by asc limit)
explain select * from (select id from test group by id order by id asc limit 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      0     ",
      "20": "set                 0      1      0     ",
      "21": "ref                 1      2      0     ",
      "22": "store_open          0      1      27    ",
      "23": "store_read          3      0      0     ",
      "24": "push                3      0      0     ",
      "25": "set_add             0      0      0     ",
      "26": "store_next          0      23     0     ",
      "27": "store_close         0      1      0     ",
      "28": "content             0      -      -     ",
      "29": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id order by id asc limit 0) t
[]
select * from (select id from test group by id order by id asc limit 1) t
[0]
select * from (select id from test group by id order by id asc limit 2) t
[0, 1]
select * from (select id from test group by id order by id asc limit 3) t
[0, 1, 2]
# test: select from (select from table group by order by asc limit/offset)
explain select * from (select id from test group by id order by id asc limit 1 offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "int                 2      -      0     # 1",
      "20": "union               3      1      0     ",
      "21": "set                 0      1      0     ",
      "22": "ref                 1      3      0     ",
      "23": "store_open          0      1      28    ",
      "24": "store_read          2      0      0     ",
      "25": "push                2      0      0     ",
      "26": "set_add             0      0      0     ",
      "27": "store_next          0      24     0     ",
      "28": "store_close         0      1      0     ",
      "29": "content             0      -      -     ",
      "30": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id order by id asc limit 1 offset 1) t
[1]
select * from (select id from test group by id order by id asc limit 1 offset 2) t
[2]
select * from (select id from test group by id order by id asc limit 1 offset 3) t
[3]
# test: select from (select from table group by order by asc offset)
explain select * from (select id from test group by id order by id asc offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      -1    ",
      "20": "set                 0      1      0     ",
      "21": "ref                 1      2      0     ",
      "22": "store_open          0      1      27    ",
      "23": "store_read          3      0      0     ",
      "24": "push                3      0      0     ",
      "25": "set_add             0      0      0     ",
      "26": "store_next          0      23     0     ",
      "27": "store_close         0      1      0     ",
      "28": "content             0      -      -     ",
      "29": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id order by id asc offset 0) t
[0, 1, 2, 3, 4]
select * from (select id from test group by id order by id asc offset 1) t
[1, 2, 3, 4]
select * from (select id from test group by id order by id asc offset 2) t
[2, 3, 4]
select * from (select id from test group by id order by id asc offset 3) t
[3, 4]
# test: select from (select from table group by order by desc limit)
explain select * from (select id from test group by id order by id desc limit 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      0     ",
      "20": "set                 0      1      0     ",
      "21": "ref                 1      2      0     ",
      "22": "store_open          0      1      27    ",
      "23": "store_read          3      0      0     ",
      "24": "push                3      0      0     ",
      "25": "set_add             0      0      0     ",
      "26": "store_next          0      23     0     ",
      "27": "store_close         0      1      0     ",
      "28": "content             0      -      -     ",
      "29": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id order by id desc limit 0) t
[]
select * from (select id from test group by id order by id desc limit 1) t
[4]
select * from (select id from test group by id order by id desc limit 2) t
[4, 3]
select * from (select id from test group by id order by id desc limit 3) t
[4, 3, 2]
# test: select from (select from table group by order by desc limit/offset)
explain select * from (select id from test group by id order by id desc limit 1 offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "int                 2      -      0     # 1",
      "20": "union               3      1      0     ",
      "21": "set                 0      1      0     ",
      "22": "ref                 1      3      0     ",
      "23": "store_open          0      1      28    ",
      "24": "store_read          2      0      0     ",
      "25": "push                2      0      0     ",
      "26": "set_add             0      0      0     ",
      "27": "store_next          0      24     0     ",
      "28": "store_close         0      1      0     ",
      "29": "content             0      -      -     ",
      "30": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id order by id desc limit 1 offset 1) t
[3]
select * from (select id from test group by id order by id desc limit 1 offset 2) t
[2]
select * from (select id from test group by id order by id desc limit 1 offset 3) t
[1]
# test: select from (select from table group by order by desc offset)
explain select * from (select id from test group by id order by id desc offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      14    ",
      "08": "store_read          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "store_read          2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set_sort            1      0      0     ",
      "16": "bool                0      0      0     ",
      "17": "push                0      0      0     ",
      "18": "int                 0      -      0     # 1",
      "19": "union               2      1      -1    ",
      "20": "set                 0      1      0     ",
      "21": "ref                 1      2      0     ",
      "22": "store_open          0      1      27    ",
      "23": "store_read          3      0      0     ",
      "24": "push                3      0      0     ",
      "25": "set_add             0      0      0     ",
      "26": "store_next          0      23     0     ",
      "27": "store_close         0      1      0     ",
      "28": "content             0      -      -     ",
      "29": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "set_sort            0      0      0     ",
      "08": "result              0      0      0     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select id from test group by id order by id desc offset 0) t
[4, 3, 2, 1, 0]
select * from (select id from test group by id order by id desc offset 1) t
[3, 2, 1, 0]
select * from (select id from test group by id order by id desc offset 2) t
[2, 1, 0]
select * from (select id from test group by id order by id desc offset 3) t
[1, 0]
# test: select from table group by having order by
explain select data from test where data > 0 group by data having data >= 1 order by data
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "content             1      -      -     ",
      "21": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select data from test where data > 0 group by data having data >= 1 order by data
[1, 2]
# test: select from table group by having order by limit
explain select data from test where data > 0 group by data having data >= 1 order by data limit 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "bool                0      0      0     ",
      "21": "push                0      0      0     ",
      "22": "int                 0      -      0     # 1",
      "23": "union               2      1      0     ",
      "24": "content             2      -      -     ",
      "25": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select data from test where data > 0 group by data having data >= 1 order by data limit 1
[1]
# test: select from table group by having order by limit/offset
explain select data from test where data > 0 group by data having data >= 1 order by data limit 1 offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "bool                0      0      0     ",
      "21": "push                0      0      0     ",
      "22": "int                 0      -      0     # 1",
      "23": "int                 2      -      0     # 1",
      "24": "union               3      1      0     ",
      "25": "content             3      -      -     ",
      "26": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select data from test where data > 0 group by data having data >= 1 order by data limit 1 offset 1
[2]
# test: select from table group by having order by offset
explain select data from test where data > 0 group by data having data >= 1 order by data offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "bool                0      0      0     ",
      "21": "push                0      0      0     ",
      "22": "int                 0      -      0     # 1",
      "23": "union               2      1      -1    ",
      "24": "content             2      -      -     ",
      "25": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select data from test where data > 0 group by data having data >= 1 order by data offset 1
[2]
# test: select from (select from table group by having order by)
explain select * from (select data from test where data > 0 group by data having data >= 1 order by data) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "set                 0      1      0     ",
      "21": "ref                 2      1      0     ",
      "22": "store_open          0      2      27    ",
      "23": "store_read          3      0      0     ",
      "24": "push                3      0      0     ",
      "25": "set_add             0      0      0     ",
      "26": "store_next          0      23     0     ",
      "27": "store_close         0      1      0     ",
      "28": "content             0      -      -     ",
      "29": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select data from test where data > 0 group by data having data >= 1 order by data) t
[1, 2]
# test: select from (select from table group by having order by limit)
explain select * from (select data from test where data > 0 group by data having data >= 1 order by data limit 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "bool                0      0      0     ",
      "21": "push                0      0      0     ",
      "22": "int                 0      -      0     # 1",
      "23": "union               2      1      0     ",
      "24": "set                 0      1      0     ",
      "25": "ref                 1      2      0     ",
      "26": "store_open          0      1      31    ",
      "27": "store_read          3      0      0     ",
      "28": "push                3      0      0     ",
      "29": "set_add             0      0      0     ",
      "30": "store_next          0      27     0     ",
      "31": "store_close         0      1      0     ",
      "32": "content             0      -      -     ",
      "33": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select data from test where data > 0 group by data having data >= 1 order by data limit 1) t
[1]
# test: select from (select from table group by having order by desc limit)
explain select * from (select data from test where data > 0 group by data having data >= 1 order by data desc limit 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "bool                0      0      0     ",
      "21": "push                0      0      0     ",
      "22": "int                 0      -      0     # 1",
      "23": "union               2      1      0     ",
      "24": "set                 0      1      0     ",
      "25": "ref                 1      2      0     ",
      "26": "store_open          0      1      31    ",
      "27": "store_read          3      0      0     ",
      "28": "push                3      0      0     ",
      "29": "set_add             0      0      0     ",
      "30": "store_next          0      27     0     ",
      "31": "store_close         0      1      0     ",
      "32": "content             0      -      -     ",
      "33": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select data from test where data > 0 group by data having data >= 1 order by data desc limit 1) t
[2]
# test: select from (select from table group by having order by limit/offset)
explain select * from (select data from test where data > 0 group by data having data >= 1 order by data limit 1 offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "bool                0      0      0     ",
      "21": "push                0      0      0     ",
      "22": "int                 0      -      0     # 1",
      "23": "int                 2      -      0     # 1",
      "24": "union               3      1      0     ",
      "25": "set                 0      1      0     ",
      "26": "ref                 1      3      0     ",
      "27": "store_open          0      1      32    ",
      "28": "store_read          2      0      0     ",
      "29": "push                2      0      0     ",
      "30": "set_add             0      0      0     ",
      "31": "store_next          0      28     0     ",
      "32": "store_close         0      1      0     ",
      "33": "content             0      -      -     ",
      "34": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select data from test where data > 0 group by data having data >= 1 order by data limit 1 offset 1) t
[2]
# test: select from (select from table group by having order by offset)
explain select * from (select data from test where data > 0 group by data having data >= 1 order by data offset 1) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set_ordered         1      1      1     ",
      "07": "store_open          1      0      18    ",
      "08": "store_read          2      1      0     ",
      "09": "int                 3      -      0     # 1",
      "10": "gteii               4      2      3     ",
      "11": "jntr                17     4      0     ",
      "12": "store_read          2      1      0     ",
      "13": "push                2      0      0     ",
      "14": "store_read          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "store_next          1      8      0     ",
      "18": "store_close         1      1      0     ",
      "19": "set_sort            1      0      0     ",
      "20": "bool                0      0      0     ",
      "21": "push                0      0      0     ",
      "22": "int                 0      -      0     # 1",
      "23": "union               2      1      -1    ",
      "24": "set                 0      1      0     ",
      "25": "ref                 1      2      0     ",
      "26": "store_open          0      1      31    ",
      "27": "store_read          3      0      0     ",
      "28": "push                3      0      0     ",
      "29": "set_add             0      0      0     ",
      "30": "store_next          0      27     0     ",
      "31": "store_close         0      1      0     ",
      "32": "content             0      -      -     ",
      "33": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      0      1     ",
      "01": "table_open_part     0      1      10    # public.test (primary)",
      "02": "table_readi32       1      0      1     ",
      "03": "int                 2      -      0     # 0",
      "04": "gtii                3      1      2     ",
      "05": "jntr                9      3      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "push                1      0      0     ",
      "08": "set_get             1      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "set_sort            0      0      0     ",
      "12": "result              0      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select data from test where data > 0 group by data having data >= 1 order by data offset 1) t
[2]
drop table test
# test: select from table group by (large table)
create table test (id serial primary key)
insert into test generate 10000
explain select * from (select count(*), sum(2 * id) from test group by id) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      2      0     ",
      "07": "store_open          1      0      14    ",
      "08": "count               2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "agg                 2      1      1     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "store_next          1      8      0     ",
      "14": "store_close         1      1      0     ",
      "15": "set                 0      2      0     ",
      "16": "ref                 2      1      0     ",
      "17": "store_open          0      2      24    ",
      "18": "store_read          3      0      0     ",
      "19": "push                3      0      0     ",
      "20": "store_read          3      0      1     ",
      "21": "push                3      0      0     ",
      "22": "set_add             0      0      0     ",
      "23": "store_next          0      18     0     ",
      "24": "store_close         0      1      0     ",
      "25": "content             0      -      -     ",
      "26": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      2      1     ",
      "01": "table_open_part     0      1      13    # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "int                 2      -      0     # 1",
      "06": "push                2      0      0     ",
      "07": "int                 2      -      0     # 2",
      "08": "table_readi64       3      0      0     ",
      "09": "mulii               4      2      3     ",
      "10": "push                4      0      0     ",
      "11": "set_agg             0      1      21    ",
      "12": "table_next          0      2      0     ",
      "13": "table_close         0      0      0     ",
      "14": "set_sort            0      0      0     ",
      "15": "result              0      0      0     ",
      "16": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from (select count(*), sum(2 * id) from test group by id) t
[[1, 0], [1, 2], [1, 4], [1, 6], [1, 8], [1, 10], [1, 12], [1, 14], [1, 16], [1, 18], [1, 20], [1, 22], [1, 24], [1, 26], [1, 28], [1, 30], [1, 32], [1, 34], [1, 36], [1, 38], [1, 40], [1, 42], [1, 44], [1, 46], [1, 48], [1, 50], [1, 52], [1, 54], [1, 56], [1, 58], [1, 60], [1, 62], [1, 64], [1, 66], [1, 68], [1, 70], [1, 72], [1, 74], [1, 76], [1, 78], [1, 80], [1, 82], [1, 84], [1, 86], [1, 88], [1, 90], [1, 92], [1, 94], [1, 96], [1, 98], [1, 100], [1, 102], [1, 104], [1, 106], [1, 108], [1, 110], [1, 112], [1, 114], [1, 116], [1, 118], [1, 120], [1, 122], [1, 124], [1, 126], [1, 128], [1, 130], [1, 132], [1, 134], [1, 136], [1, 138], [1, 140], [1, 142], [1, 144], [1, 146], [1, 148], [1, 150], [1, 152], [1, 154], [1, 156], [1, 158], [1, 160], [1, 162], [1, 164], [1, 166], [1, 168], [1, 170], [1, 172], [1, 174], [1, 176], [1, 178], [1, 180], [1, 182], [1, 184], [1, 186], [1, 188], [1, 190], [1, 192], [1, 194], [1, 196], [1, 198], [1, 200], [1, 202], [1, 204], [1, 206], [1, 208], [1, 210], [1, 212], [1, 214], [1, 216], [1, 218], [1, 220], [1, 222], [1, 224], [1, 226], [1, 228], [1, 230], [1, 232], [1, 234], [1, 236], [1, 238], [1, 240], [1, 242], [1, 244], [1, 246], [1, 248], [1, 250], [1, 252], [1, 254], [1, 256], [1, 258], [1, 260], [1, 262], [1, 264], [1, 266], [1, 268], [1, 270], [1, 272], [1, 274], [1, 276], [1, 278], [1, 280], [1, 282], [1, 284], [1, 286], [1, 288], [1, 290], [1, 292], [1, 294], [1, 296], [1, 298], [1, 300], [1, 302], [1, 304], [1, 306], [1, 308], [1, 310], [1, 312], [1, 314], [1, 316], [1, 318], [1, 320], [1, 322], [1, 324], [1, 326], [1, 328], [1, 330], [1, 332], [1, 334], [1, 336], [1, 338], [1, 340], [1, 342], [1, 344], [1, 346], [1, 348], [1, 350], [1, 352], [1, 354], [1, 356], [1, 358], [1, 360], [1, 362], [1, 364], [1, 366], [1, 368], [1, 370], [1, 372], [1, 374], [1, 376], [1, 378], [1, 380], [1, 382], [1, 384], [1, 386], [1, 388], [1, 390], [1, 392], [1, 394], [1, 396], [1, 398], [1, 400], [1, 402], [1, 404], [1, 406], [1, 408], [1, 410], [1, 412], [1, 414], [1, 416], [1, 418], [1, 420], [1, 422], [1, 424], [1, 426], [1, 428], [1, 430], [1, 432], [1, 434], [1, 436], [1, 438], [1, 440], [1, 442], [1, 444], [1, 446], [1, 448], [1, 450], [1, 452], [1, 454], [1, 456], [1, 458], [1, 460], [1, 462], [1, 464], [1, 466], [1, 468], [1, 470], [1, 472], [1, 474], [1, 476], [1, 478], [1, 480], [1, 482], [1, 484], [1, 486], [1, 488], [1, 490], [1, 492], [1, 494], [1, 496], [1, 498], [1, 500], [1, 502], [1, 504], [1, 506], [1, 508], [1, 510], [1, 512], [1, 514], [1, 516], [1, 518], [1, 520], [1, 522], [1, 524], [1, 526], [1, 528], [1, 530], [1, 532], [1, 534], [1, 536], [1, 538], [1, 540], [1, 542], [1, 544], [1, 546], [1, 548], [1, 550], [1, 552], [1, 554], [1, 556], [1, 558], [1, 560], [1, 562], [1, 564], [1, 566], [1, 568], [1, 570], [1, 572], [1, 574], [1, 576], [1, 578], [1, 580], [1, 582], [1, 584], [1, 586], [1, 588], [1, 590], [1, 592], [1, 594], [1, 596], [1, 598], [1, 600], [1, 602], [1, 604], [1, 606], [1, 608], [1, 610], [1, 612], [1, 614], [1, 616], [1, 618], [1, 620], [1, 622], [1, 624], [1, 626], [1, 628], [1, 630], [1, 632], [1, 634], [1, 636], [1, 638], [1, 640], [1, 642], [1, 644], [1, 646], [1, 648], [1, 650], [1, 652], [1, 654], [1, 656], [1, 658], [1, 660], [1, 662], [1, 664], [1, 666], [1, 668], [1, 670], [1, 672], [1, 674], [1, 676], [1, 678], [1, 680], [1, 682], [1, 684], [1, 686], [1, 688], [1, 690], [1, 692], [1, 694], [1, 696], [1, 698], [1, 700], [1, 702], [1, 704], [1, 706], [1, 708], [1, 710], [1, 712], [1, 714], [1, 716], [1, 718], [1, 720], [1, 722], [1, 724], [1, 726], [1, 728], [1, 730], [1, 732], [1, 734], [1, 736], [1, 738], [1, 740], [1, 742], [1, 744], [1, 746], [1, 748], [1, 750], [1, 752], [1, 754], [1, 756], [1, 758], [1, 760], [1, 762], [1, 764], [1, 766], [1, 768], [1, 770], [1, 772], [1, 774], [1, 776], [1, 778], [1, 780], [1, 782], [1, 784], [1, 786], [1, 788], [1, 790], [1, 792], [1, 794], [1, 796], [1, 798], [1, 800], [1, 802], [1, 804], [1, 806], [1, 808], [1, 810], [1, 812], [1, 814], [1, 816], [1, 818], [1, 820], [1, 822], [1, 824], [1, 826], [1, 828], [1, 830], [1, 832], [1, 834], [1, 836], [1, 838], [1, 840], [1, 842], [1, 844], [1, 846], [1, 848], [1, 850], [1, 852], [1, 854], [1, 856], [1, 858], [1, 860], [1, 862], [1, 864], [1, 866], [1, 868], [1, 870], [1, 872], [1, 874], [1, 876], [1, 878], [1, 880], [1, 882], [1, 884], [1, 886], [1, 888], [1, 890], [1, 892], [1, 894], [1, 896], [1, 898], [1, 900], [1, 902], [1, 904], [1, 906], [1, 908], [1, 910], [1, 912], [1, 914], [1, 916], [1, 918], [1, 920], [1, 922], [1, 924], [1, 926], [1, 928], [1, 930], [1, 932], [1, 934], [1, 936], [1, 938], [1, 940], [1, 942], [1, 944], [1, 946], [1, 948], [1, 950], [1, 952], [1, 954], [1, 956], [1, 958], [1, 960], [1, 962], [1, 964], [1, 966], [1, 968], [1, 970], [1, 972], [1, 974], [1, 976], [1, 978], [1, 980], [1, 982], [1, 984], [1, 986], [1, 988], [1, 990], [1, 992], [1, 994], [1, 996], [1, 998], [1, 1000], [1, 1002], [1, 1004], [1, 1006], [1, 1008], [1, 1010], [1, 1012], [1, 1014], [1, 1016], [1, 1018], [1, 1020], [1, 1022], [1, 1024], [1, 1026], [1, 1028], [1, 1030], [1, 1032], [1, 1034], [1, 1036], [1, 1038], [1, 1040], [1, 1042], [1, 1044], [1, 1046], [1, 1048], [1, 1050], [1, 1052], [1, 1054], [1, 1056], [1, 1058], [1, 1060], [1, 1062], [1, 1064], [1, 1066], [1, 1068], [1, 1070], [1, 1072], [1, 1074], [1, 1076], [1, 1078], [1, 1080], [1, 1082], [1, 1084], [1, 1086], [1, 1088], [1, 1090], [1, 1092], [1, 1094], [1, 1096], [1, 1098], [1, 1100], [1, 1102], [1, 1104], [1, 1106], [1, 1108], [1, 1110], [1, 1112], [1, 1114], [1, 1116], [1, 1118], [1, 1120], [1, 1122], [1, 1124], [1, 1126], [1, 1128], [1, 1130], [1, 1132], [1, 1134], [1, 1136], [1, 1138], [1, 1140], [1, 1142], [1, 1144], [1, 1146], [1, 1148], [1, 1150], [1, 1152], [1, 1154], [1, 1156], [1, 1158], [1, 1160], [1, 1162], [1, 1164], [1, 1166], [1, 1168], [1, 1170], [1, 1172], [1, 1174], [1, 1176], [1, 1178], [1, 1180], [1, 1182], [1, 1184], [1, 1186], [1, 1188], [1, 1190], [1, 1192], [1, 1194], [1, 1196], [1, 1198], [1, 1200], [1, 1202], [1, 1204], [1, 1206], [1, 1208], [1, 1210], [1, 1212], [1, 1214], [1, 1216], [1, 1218], [1, 1220], [1, 1222], [1, 1224], [1, 1226], [1, 1228], [1, 1230], [1, 1232], [1, 1234], [1, 1236], [1, 1238], [1, 1240], [1, 1242], [1, 1244], [1, 1246], [1, 1248], [1, 1250], [1, 1252], [1, 1254], [1, 1256], [1, 1258], [1, 1260], [1, 1262], [1, 1264], [1, 1266], [1, 1268], [1, 1270], [1, 1272], [1, 1274], [1, 1276], [1, 1278], [1, 1280], [1, 1282], [1, 1284], [1, 1286], [1, 1288], [1, 1290], [1, 1292], [1, 1294], [1, 1296], [1, 1298], [1, 1300], [1, 1302], [1, 1304], [1, 1306], [1, 1308], [1, 1310], [1, 1312], [1, 1314], [1, 1316], [1, 1318], [1, 1320], [1, 1322], [1, 1324], [1, 1326], [1, 1328], [1, 1330], [1, 1332], [1, 1334], [1, 1336], [1, 1338], [1, 1340], [1, 1342], [1, 1344], [1, 1346], [1, 1348], [1, 1350], [1, 1352], [1, 1354], [1, 1356], [1, 1358], [1, 1360], [1, 1362], [1, 1364], [1, 1366], [1, 1368], [1, 1370], [1, 1372], [1, 1374], [1, 1376], [1, 1378], [1, 1380], [1, 1382], [1, 1384], [1, 1386], [1, 1388], [1, 1390], [1, 1392], [1, 1394], [1, 1396], [1, 1398], [1, 1400], [1, 1402], [1, 1404], [1, 1406], [1, 1408], [1, 1410], [1, 1412], [1, 1414], [1, 1416], [1, 1418], [1, 1420], [1, 1422], [1, 1424], [1, 1426], [1, 1428], [1, 1430], [1, 1432], [1, 1434], [1, 1436], [1, 1438], [1, 1440], [1, 1442], [1, 1444], [1, 1446], [1, 1448], [1, 1450], [1, 1452], [1, 1454], [1, 1456], [1, 1458], [1, 1460], [1, 1462], [1, 1464], [1, 1466], [1, 1468], [1, 1470], [1, 1472], [1, 1474], [1, 1476], [1, 1478], [1, 1480], [1, 1482], [1, 1484], [1, 1486], [1, 1488], [1, 1490], [1, 1492], [1, 1494], [1, 1496], [1, 1498], [1, 1500], [1, 1502], [1, 1504], [1, 1506], [1, 1508], [1, 1510], [1, 1512], [1, 1514], [1, 1516], [1, 1518], [1, 1520], [1, 1522], [1, 1524], [1, 1526], [1, 1528], [1, 1530], [1, 1532], [1, 1534], [1, 1536], [1, 1538], [1, 1540], [1, 1542], [1, 1544], [1, 1546], [1, 1548], [1, 1550], [1, 1552], [1, 1554], [1, 1556], [1, 1558], [1, 1560], [1, 1562], [1, 1564], [1, 1566], [1, 1568], [1, 1570], [1, 1572], [1, 1574], [1, 1576], [1, 1578], [1, 1580], [1, 1582], [1, 1584], [1, 1586], [1, 1588], [1, 1590], [1, 1592], [1, 1594], [1, 1596], [1, 1598], [1, 1600], [1, 1602], [1, 1604], [1, 1606], [1, 1608], [1, 1610], [1, 1612], [1, 1614], [1, 1616], [1, 1618], [1, 1620], [1, 1622], [1, 1624], [1, 1626], [1, 1628], [1, 1630], [1, 1632], [1, 1634], [1, 1636], [1, 1638], [1, 1640], [1, 1642], [1, 1644], [1, 1646], [1, 1648], [1, 1650], [1, 1652], [1, 1654], [1, 1656], [1, 1658], [1, 1660], [1, 1662], [1, 1664], [1, 1666], [1, 1668], [1, 1670], [1, 1672], [1, 1674], [1, 1676], [1, 1678], [1, 1680], [1, 1682], [1, 1684], [1, 1686], [1, 1688], [1, 1690], [1, 1692], [1, 1694], [1, 1696], [1, 1698], [1, 1700], [1, 1702], [1, 1704], [1, 1706], [1, 1708], [1, 1710], [1, 1712], [1, 1714], [1, 1716], [1, 1718], [1, 1720], [1, 1722], [1, 1724], [1, 1726], [1, 1728], [1, 1730], [1, 1732], [1, 1734], [1, 1736], [1, 1738], [1, 1740], [1, 1742], [1, 1744], [1, 1746], [1, 1748], [1, 1750], [1, 1752], [1, 1754], [1, 1756], [1, 1758], [1, 1760], [1, 1762], [1, 1764], [1, 1766], [1, 1768], [1, 1770], [1, 1772], [1, 1774], [1, 1776], [1, 1778], [1, 1780], [1, 1782], [1, 1784], [1, 1786], [1, 1788], [1, 1790], [1, 1792], [1, 1794], [1, 1796], [1, 1798], [1, 1800], [1, 1802], [1, 1804], [1, 1806], [1, 1808], [1, 1810], [1, 1812], [1, 1814], [1, 1816], [1, 1818], [1, 1820], [1, 1822], [1, 1824], [1, 1826], [1, 1828], [1, 1830], [1, 1832], [1, 1834], [1, 1836], [1, 1838], [1, 1840], [1, 1842], [1, 1844], [1, 1846], [1, 1848], [1, 1850], [1, 1852], [1, 1854], [1, 1856], [1, 1858], [1, 1860], [1, 1862], [1, 1864], [1, 1866], [1, 1868], [1, 1870], [1, 1872], [1, 1874], [1, 1876], [1, 1878], [1, 1880], [1, 1882], [1, 1884], [1, 1886], [1, 1888], [1, 1890], [1, 1892], [1, 1894], [1, 1896], [1, 1898], [1, 1900], [1, 1902], [1, 1904], [1, 1906], [1, 1908], [1, 1910], [1, 1912], [1, 1914], [1, 1916], [1, 1918], [1, 1920], [1, 1922], [1, 1924], [1, 1926], [1, 1928], [1, 1930], [1, 1932], [1, 1934], [1, 1936], [1, 1938], [1, 1940], [1, 1942], [1, 1944], [1, 1946], [1, 1948], [1, 1950], [1, 1952], [1, 1954], [1, 1956], [1, 1958], [1, 1960], [1, 1962], [1, 1964], [1, 1966], [1, 1968], [1, 1970], [1, 1972], [1, 1974], [1, 1976], [1, 1978], [1, 1980], [1, 1982], [1, 1984], [1, 1986], [1, 1988], [1, 1990], [1, 1992], [1, 1994], [1, 1996], [1, 1998], [1, 2000], [1, 2002], [1, 2004], [1, 2006], [1, 2008], [1, 2010], [1, 2012], [1, 2014], [1, 2016], [1, 2018], [1, 2020], [1, 2022], [1, 2024], [1, 2026], [1, 2028], [1, 2030], [1, 2032], [1, 2034], [1, 2036], [1, 2038], [1, 2040], [1, 2042], [1, 2044], [1, 2046], [1, 2048], [1, 2050], [1, 2052], [1, 2054], [1, 2056], [1, 2058], [1, 2060], [1, 2062], [1, 2064], [1, 2066], [1, 2068], [1, 2070], [1, 2072], [1, 2074], [1, 2076], [1, 2078], [1, 2080], [1, 2082], [1, 2084], [1, 2086], [1, 2088], [1, 2090], [1, 2092], [1, 2094], [1, 2096], [1, 2098], [1, 2100], [1, 2102], [1, 2104], [1, 2106], [1, 2108], [1, 2110], [1, 2112], [1, 2114], [1, 2116], [1, 2118], [1, 2120], [1, 2122], [1, 2124], [1, 2126], [1, 2128], [1, 2130], [1, 2132], [1, 2134], [1, 2136], [1, 2138], [1, 2140], [1, 2142], [1, 2144], [1, 2146], [1, 2148], [1, 2150], [1, 2152], [1, 2154], [1, 2156], [1, 2158], [1, 2160], [1, 2162], [1, 2164], [1, 2166], [1, 2168], [1, 2170], [1, 2172], [1, 2174], [1, 2176], [1, 2178], [1, 2180], [1, 2182], [1, 2184], [1, 2186], [1, 2188], [1, 2190], [1, 2192], [1, 2194], [1, 2196], [1, 2198], [1, 2200], [1, 2202], [1, 2204], [1, 2206], [1, 2208], [1, 2210], [1, 2212], [1, 2214], [1, 2216], [1, 2218], [1, 2220], [1, 2222], [1, 2224], [1, 2226], [1, 2228], [1, 2230], [1, 2232], [1, 2234], [1, 2236], [1, 2238], [1, 2240], [1, 2242], [1, 2244], [1, 2246], [1, 2248], [1, 2250], [1, 2252], [1, 2254], [1, 2256], [1, 2258], [1, 2260], [1, 2262], [1, 2264], [1, 2266], [1, 2268], [1, 2270], [1, 2272], [1, 2274], [1, 2276], [1, 2278], [1, 2280], [1, 2282], [1, 2284], [1, 2286], [1, 2288], [1, 2290], [1, 2292], [1, 2294], [1, 2296], [1, 2298], [1, 2300], [1, 2302], [1, 2304], [1, 2306], [1, 2308], [1, 2310], [1, 2312], [1, 2314], [1, 2316], [1, 2318], [1, 2320], [1, 2322], [1, 2324], [1, 2326], [1, 2328], [1, 2330], [1, 2332], [1, 2334], [1, 2336], [1, 2338], [1, 2340], [1, 2342], [1, 2344], [1, 2346], [1, 2348], [1, 2350], [1, 2352], [1, 2354], [1, 2356], [1, 2358], [1, 2360], [1, 2362], [1, 2364], [1, 2366], [1, 2368], [1, 2370], [1, 2372], [1, 2374], [1, 2376], [1, 2378], [1, 2380], [1, 2382], [1, 2384], [1, 2386], [1, 2388], [1, 2390], [1, 2392], [1, 2394], [1, 2396], [1, 2398], [1, 2400], [1, 2402], [1, 2404], [1, 2406], [1, 2408], [1, 2410], [1, 2412], [1, 2414], [1, 2416], [1, 2418], [1, 2420], [1, 2422], [1, 2424], [1, 2426], [1, 2428], [1, 2430], [1, 2432], [1, 2434], [1, 2436], [1, 2438], [1, 2440], [1, 2442], [1, 2444], [1, 2446], [1, 2448], [1, 2450], [1, 2452], [1, 2454], [1, 2456], [1, 2458], [1, 2460], [1, 2462], [1, 2464], [1, 2466], [1, 2468], [1, 2470], [1, 2472], [1, 2474], [1, 2476], [1, 2478], [1, 2480], [1, 2482], [1, 2484], [1, 2486], [1, 2488], [1, 2490], [1, 2492], [1, 2494], [1, 2496], [1, 2498], [1, 2500], [1, 2502], [1, 2504], [1, 2506], [1, 2508], [1, 2510], [1, 2512], [1, 2514], [1, 2516], [1, 2518], [1, 2520], [1, 2522], [1, 2524], [1, 2526], [1, 2528], [1, 2530], [1, 2532], [1, 2534], [1, 2536], [1, 2538], [1, 2540], [1, 2542], [1, 2544], [1, 2546], [1, 2548], [1, 2550], [1, 2552], [1, 2554], [1, 2556], [1, 2558], [1, 2560], [1, 2562], [1, 2564], [1, 2566], [1, 2568], [1, 2570], [1, 2572], [1, 2574], [1, 2576], [1, 2578], [1, 2580], [1, 2582], [1, 2584], [1, 2586], [1, 2588], [1, 2590], [1, 2592], [1, 2594], [1, 2596], [1, 2598], [1, 2600], [1, 2602], [1, 2604], [1, 2606], [1, 2608], [1, 2610], [1, 2612], [1, 2614], [1, 2616], [1, 2618], [1, 2620], [1, 2622], [1, 2624], [1, 2626], [1, 2628], [1, 2630], [1, 2632], [1, 2634], [1, 2636], [1, 2638], [1, 2640], [1, 2642], [1, 2644], [1, 2646], [1, 2648], [1, 2650], [1, 2652], [1, 2654], [1, 2656], [1, 2658], [1, 2660], [1, 2662], [1, 2664], [1, 2666], [1, 2668], [1, 2670], [1, 2672], [1, 2674], [1, 2676], [1, 2678], [1, 2680], [1, 2682], [1, 2684], [1, 2686], [1, 2688], [1, 2690], [1, 2692], [1, 2694], [1, 2696], [1, 2698], [1, 2700], [1, 2702], [1, 2704], [1, 2706], [1, 2708], [1, 2710], [1, 2712], [1, 2714], [1, 2716], [1, 2718], [1, 2720], [1, 2722], [1, 2724], [1, 2726], [1, 2728], [1, 2730], [1, 2732], [1, 2734], [1, 2736], [1, 2738], [1, 2740], [1, 2742], [1, 2744], [1, 2746], [1, 2748], [1, 2750], [1, 2752], [1, 2754], [1, 2756], [1, 2758], [1, 2760], [1, 2762], [1, 2764], [1, 2766], [1, 2768], [1, 2770], [1, 2772], [1, 2774], [1, 2776], [1, 2778], [1, 2780], [1, 2782], [1, 2784], [1, 2786], [1, 2788], [1, 2790], [1, 2792], [1, 2794], [1, 2796], [1, 2798], [1, 2800], [1, 2802], [1, 2804], [1, 2806], [1, 2808], [1, 2810], [1, 2812], [1, 2814], [1, 2816], [1, 2818], [1, 2820], [1, 2822], [1, 2824], [1, 2826], [1, 2828], [1, 2830], [1, 2832], [1, 2834], [1, 2836], [1, 2838], [1, 2840], [1, 2842], [1, 2844], [1, 2846], [1, 2848], [1, 2850], [1, 2852], [1, 2854], [1, 2856], [1, 2858], [1, 2860], [1, 2862], [1, 2864], [1, 2866], [1, 2868], [1, 2870], [1, 2872], [1, 2874], [1, 2876], [1, 2878], [1, 2880], [1, 2882], [1, 2884], [1, 2886], [1, 2888], [1, 2890], [1, 2892], [1, 2894], [1, 2896], [1, 2898], [1, 2900], [1, 2902], [1, 2904], [1, 2906], [1, 2908], [1, 2910], [1, 2912], [1, 2914], [1, 2916], [1, 2918], [1, 2920], [1, 2922], [1, 2924], [1, 2926], [1, 2928], [1, 2930], [1, 2932], [1, 2934], [1, 2936], [1, 2938], [1, 2940], [1, 2942], [1, 2944], [1, 2946], [1, 2948], [1, 2950], [1, 2952], [1, 2954], [1, 2956], [1, 2958], [1, 2960], [1, 2962], [1, 2964], [1, 2966], [1, 2968], [1, 2970], [1, 2972], [1, 2974], [1, 2976], [1, 2978], [1, 2980], [1, 2982], [1, 2984], [1, 2986], [1, 2988], [1, 2990], [1, 2992], [1, 2994], [1, 2996], [1, 2998], [1, 3000], [1, 3002], [1, 3004], [1, 3006], [1, 3008], [1, 3010], [1, 3012], [1, 3014], [1, 3016], [1, 3018], [1, 3020], [1, 3022], [1, 3024], [1, 3026], [1, 3028], [1, 3030], [1, 3032], [1, 3034], [1, 3036], [1, 3038], [1, 3040], [1, 3042], [1, 3044], [1, 3046], [1, 3048], [1, 3050], [1, 3052], [1, 3054], [1, 3056], [1, 3058], [1, 3060], [1, 3062], [1, 3064], [1, 3066], [1, 3068], [1, 3070], [1, 3072], [1, 3074], [1, 3076], [1, 3078], [1, 3080], [1, 3082], [1, 3084], [1, 3086], [1, 3088], [1, 3090], [1, 3092], [1, 3094], [1, 3096], [1, 3098], [1, 3100], [1, 3102], [1, 3104], [1, 3106], [1, 3108], [1, 3110], [1, 3112], [1, 3114], [1, 3116], [1, 3118], [1, 3120], [1, 3122], [1, 3124], [1, 3126], [1, 3128], [1, 3130], [1, 3132], [1, 3134], [1, 3136], [1, 3138], [1, 3140], [1, 3142], [1, 3144], [1, 3146], [1, 3148], [1, 3150], [1, 3152], [1, 3154], [1, 3156], [1, 3158], [1, 3160], [1, 3162], [1, 3164], [1, 3166], [1, 3168], [1, 3170], [1, 3172], [1, 3174], [1, 3176], [1, 3178], [1, 3180], [1, 3182], [1, 3184], [1, 3186], [1, 3188], [1, 3190], [1, 3192], [1, 3194], [1, 3196], [1, 3198], [1, 3200], [1, 3202], [1, 3204], [1, 3206], [1, 3208], [1, 3210], [1, 3212], [1, 3214], [1, 3216], [1, 3218], [1, 3220], [1, 3222], [1, 3224], [1, 3226], [1, 3228], [1, 3230], [1, 3232], [1, 3234], [1, 3236], [1, 3238], [1, 3240], [1, 3242], [1, 3244], [1, 3246], [1, 3248], [1, 3250], [1, 3252], [1, 3254], [1, 3256], [1, 3258], [1, 3260], [1, 3262], [1, 3264], [1, 3266], [1, 3268], [1, 3270], [1, 3272], [1, 3274], [1, 3276], [1, 3278], [1, 3280], [1, 3282], [1, 3284], [1, 3286], [1, 3288], [1, 3290], [1, 3292], [1, 3294], [1, 3296], [1, 3298], [1, 3300], [1, 3302], [1, 3304], [1, 3306], [1, 3308], [1, 3310], [1, 3312], [1, 3314], [1, 3316], [1, 3318], [1, 3320], [1, 3322], [1, 3324], [1, 3326], [1, 3328], [1, 3330], [1, 3332], [1, 3334], [1, 3336], [1, 3338], [1, 3340], [1, 3342], [1, 3344], [1, 3346], [1, 3348], [1, 3350], [1, 3352], [1, 3354], [1, 3356], [1, 3358], [1, 3360], [1, 3362], [1, 3364], [1, 3366], [1, 3368], [1, 3370], [1, 3372], [1, 3374], [1, 3376], [1, 3378], [1, 3380], [1, 3382], [1, 3384], [1, 3386], [1, 3388], [1, 3390], [1, 3392], [1, 3394], [1, 3396], [1, 3398], [1, 3400], [1, 3402], [1, 3404], [1, 3406], [1, 3408], [1, 3410], [1, 3412], [1, 3414], [1, 3416], [1, 3418], [1, 3420], [1, 3422], [1, 3424], [1, 3426], [1, 3428], [1, 3430], [1, 3432], [1, 3434], [1, 3436], [1, 3438], [1, 3440], [1, 3442], [1, 3444], [1, 3446], [1, 3448], [1, 3450], [1, 3452], [1, 3454], [1, 3456], [1, 3458], [1, 3460], [1, 3462], [1, 3464], [1, 3466], [1, 3468], [1, 3470], [1, 3472], [1, 3474], [1, 3476], [1, 3478], [1, 3480], [1, 3482], [1, 3484], [1, 3486], [1, 3488], [1, 3490], [1, 3492], [1, 3494], [1, 3496], [1, 3498], [1, 3500], [1, 3502], [1, 3504], [1, 3506], [1, 3508], [1, 3510], [1, 3512], [1, 3514], [1, 3516], [1, 3518], [1, 3520], [1, 3522], [1, 3524], [1, 3526], [1, 3528], [1, 3530], [1, 3532], [1, 3534], [1, 3536], [1, 3538], [1, 3540], [1, 3542], [1, 3544], [1, 3546], [1, 3548], [1, 3550], [1, 3552], [1, 3554], [1, 3556], [1, 3558], [1, 3560], [1, 3562], [1, 3564], [1, 3566], [1, 3568], [1, 3570], [1, 3572], [1, 3574], [1, 3576], [1, 3578], [1, 3580], [1, 3582], [1, 3584], [1, 3586], [1, 3588], [1, 3590], [1, 3592], [1, 3594], [1, 3596], [1, 3598], [1, 3600], [1, 3602], [1, 3604], [1, 3606], [1, 3608], [1, 3610], [1, 3612], [1, 3614], [1, 3616], [1, 3618], [1, 3620], [1, 3622], [1, 3624], [1, 3626], [1, 3628], [1, 3630], [1, 3632], [1, 3634], [1, 3636], [1, 3638], [1, 3640], [1, 3642], [1, 3644], [1, 3646], [1, 3648], [1, 3650], [1, 3652], [1, 3654], [1, 3656], [1, 3658], [1, 3660], [1, 3662], [1, 3664], [1, 3666], [1, 3668], [1, 3670], [1, 3672], [1, 3674], [1, 3676], [1, 3678], [1, 3680], [1, 3682], [1, 3684], [1, 3686], [1, 3688], [1, 3690], [1, 3692], [1, 3694], [1, 3696], [1, 3698], [1, 3700], [1, 3702], [1, 3704], [1, 3706], [1, 3708], [1, 3710], [1, 3712], [1, 3714], [1, 3716], [1, 3718], [1, 3720], [1, 3722], [1, 3724], [1, 3726], [1, 3728], [1, 3730], [1, 3732], [1, 3734], [1, 3736], [1, 3738], [1, 3740], [1, 3742], [1, 3744], [1, 3746], [1, 3748], [1, 3750], [1, 3752], [1, 3754], [1, 3756], [1, 3758], [1, 3760], [1, 3762], [1, 3764], [1, 3766], [1, 3768], [1, 3770], [1, 3772], [1, 3774], [1, 3776], [1, 3778], [1, 3780], [1, 3782], [1, 3784], [1, 3786], [1, 3788], [1, 3790], [1, 3792], [1, 3794], [1, 3796], [1, 3798], [1, 3800], [1, 3802], [1, 3804], [1, 3806], [1, 3808], [1, 3810], [1, 3812], [1, 3814], [1, 3816], [1, 3818], [1, 3820], [1, 3822], [1, 3824], [1, 3826], [1, 3828], [1, 3830], [1, 3832], [1, 3834], [1, 3836], [1, 3838], [1, 3840], [1, 3842], [1, 3844], [1, 3846], [1, 3848], [1, 3850], [1, 3852], [1, 3854], [1, 3856], [1, 3858], [1, 3860], [1, 3862], [1, 3864], [1, 3866], [1, 3868], [1, 3870], [1, 3872], [1, 3874], [1, 3876], [1, 3878], [1, 3880], [1, 3882], [1, 3884], [1, 3886], [1, 3888], [1, 3890], [1, 3892], [1, 3894], [1, 3896], [1, 3898], [1, 3900], [1, 3902], [1, 3904], [1, 3906], [1, 3908], [1, 3910], [1, 3912], [1, 3914], [1, 3916], [1, 3918], [1, 3920], [1, 3922], [1, 3924], [1, 3926], [1, 3928], [1, 3930], [1, 3932], [1, 3934], [1, 3936], [1, 3938], [1, 3940], [1, 3942], [1, 3944], [1, 3946], [1, 3948], [1, 3950], [1, 3952], [1, 3954], [1, 3956], [1, 3958], [1, 3960], [1, 3962], [1, 3964], [1, 3966], [1, 3968], [1, 3970], [1, 3972], [1, 3974], [1, 3976], [1, 3978], [1, 3980], [1, 3982], [1, 3984], [1, 3986], [1, 3988], [1, 3990], [1, 3992], [1, 3994], [1, 3996], [1, 3998], [1, 4000], [1, 4002], [1, 4004], [1, 4006], [1, 4008], [1, 4010], [1, 4012], [1, 4014], [1, 4016], [1, 4018], [1, 4020], [1, 4022], [1, 4024], [1, 4026], [1, 4028], [1, 4030], [1, 4032], [1, 4034], [1, 4036], [1, 4038], [1, 4040], [1, 4042], [1, 4044], [1, 4046], [1, 4048], [1, 4050], [1, 4052], [1, 4054], [1, 4056], [1, 4058], [1, 4060], [1, 4062], [1, 4064], [1, 4066], [1, 4068], [1, 4070], [1, 4072], [1, 4074], [1, 4076], [1, 4078], [1, 4080], [1, 4082], [1, 4084], [1, 4086], [1, 4088], [1, 4090], [1, 4092], [1, 4094], [1, 4096], [1, 4098], [1, 4100], [1, 4102], [1, 4104], [1, 4106], [1, 4108], [1, 4110], [1, 4112], [1, 4114], [1, 4116], [1, 4118], [1, 4120], [1, 4122], [1, 4124], [1, 4126], [1, 4128], [1, 4130], [1, 4132], [1, 4134], [1, 4136], [1, 4138], [1, 4140], [1, 4142], [1, 4144], [1, 4146], [1, 4148], [1, 4150], [1, 4152], [1, 4154], [1, 4156], [1, 4158], [1, 4160], [1, 4162], [1, 4164], [1, 4166], [1, 4168], [1, 4170], [1, 4172], [1, 4174], [1, 4176], [1, 4178], [1, 4180], [1, 4182], [1, 4184], [1, 4186], [1, 4188], [1, 4190], [1, 4192], [1, 4194], [1, 4196], [1, 4198], [1, 4200], [1, 4202], [1, 4204], [1, 4206], [1, 4208], [1, 4210], [1, 4212], [1, 4214], [1, 4216], [1, 4218], [1, 4220], [1, 4222], [1, 4224], [1, 4226], [1, 4228], [1, 4230], [1, 4232], [1, 4234], [1, 4236], [1, 4238], [1, 4240], [1, 4242], [1, 4244], [1, 4246], [1, 4248], [1, 4250], [1, 4252], [1, 4254], [1, 4256], [1, 4258], [1, 4260], [1, 4262], [1, 4264], [1, 4266], [1, 4268], [1, 4270], [1, 4272], [1, 4274], [1, 4276], [1, 4278], [1, 4280], [1, 4282], [1, 4284], [1, 4286], [1, 4288], [1, 4290], [1, 4292], [1, 4294], [1, 4296], [1, 4298], [1, 4300], [1, 4302], [1, 4304], [1, 4306], [1, 4308], [1, 4310], [1, 4312], [1, 4314], [1, 4316], [1, 4318], [1, 4320], [1, 4322], [1, 4324], [1, 4326], [1, 4328], [1, 4330], [1, 4332], [1, 4334], [1, 4336], [1, 4338], [1, 4340], [1, 4342], [1, 4344], [1, 4346], [1, 4348], [1, 4350], [1, 4352], [1, 4354], [1, 4356], [1, 4358], [1, 4360], [1, 4362], [1, 4364], [1, 4366], [1, 4368], [1, 4370], [1, 4372], [1, 4374], [1, 4376], [1, 4378], [1, 4380], [1, 4382], [1, 4384], [1, 4386], [1, 4388], [1, 4390], [1, 4392], [1, 4394], [1, 4396], [1, 4398], [1, 4400], [1, 4402], [1, 4404], [1, 4406], [1, 4408], [1, 4410], [1, 4412], [1, 4414], [1, 4416], [1, 4418], [1, 4420], [1, 4422], [1, 4424], [1, 4426], [1, 4428], [1, 4430], [1, 4432], [1, 4434], [1, 4436], [1, 4438], [1, 4440], [1, 4442], [1, 4444], [1, 4446], [1, 4448], [1, 4450], [1, 4452], [1, 4454], [1, 4456], [1, 4458], [1, 4460], [1, 4462], [1, 4464], [1, 4466], [1, 4468], [1, 4470], [1, 4472], [1, 4474], [1, 4476], [1, 4478], [1, 4480], [1, 4482], [1, 4484], [1, 4486], [1, 4488], [1, 4490], [1, 4492], [1, 4494], [1, 4496], [1, 4498], [1, 4500], [1, 4502], [1, 4504], [1, 4506], [1, 4508], [1, 4510], [1, 4512], [1, 4514], [1, 4516], [1, 4518], [1, 4520], [1, 4522], [1, 4524], [1, 4526], [1, 4528], [1, 4530], [1, 4532], [1, 4534], [1, 4536], [1, 4538], [1, 4540], [1, 4542], [1, 4544], [1, 4546], [1, 4548], [1, 4550], [1, 4552], [1, 4554], [1, 4556], [1, 4558], [1, 4560], [1, 4562], [1, 4564], [1, 4566], [1, 4568], [1, 4570], [1, 4572], [1, 4574], [1, 4576], [1, 4578], [1, 4580], [1, 4582], [1, 4584], [1, 4586], [1, 4588], [1, 4590], [1, 4592], [1, 4594], [1, 4596], [1, 4598], [1, 4600], [1, 4602], [1, 4604], [1, 4606], [1, 4608], [1, 4610], [1, 4612], [1, 4614], [1, 4616], [1, 4618], [1, 4620], [1, 4622], [1, 4624], [1, 4626], [1, 4628], [1, 4630], [1, 4632], [1, 4634], [1, 4636], [1, 4638], [1, 4640], [1, 4642], [1, 4644], [1, 4646], [1, 4648], [1, 4650], [1, 4652], [1, 4654], [1, 4656], [1, 4658], [1, 4660], [1, 4662], [1, 4664], [1, 4666], [1, 4668], [1, 4670], [1, 4672], [1, 4674], [1, 4676], [1, 4678], [1, 4680], [1, 4682], [1, 4684], [1, 4686], [1, 4688], [1, 4690], [1, 4692], [1, 4694], [1, 4696], [1, 4698], [1, 4700], [1, 4702], [1, 4704], [1, 4706], [1, 4708], [1, 4710], [1, 4712], [1, 4714], [1, 4716], [1, 4718], [1, 4720], [1, 4722], [1, 4724], [1, 4726], [1, 4728], [1, 4730], [1, 4732], [1, 4734], [1, 4736], [1, 4738], [1, 4740], [1, 4742], [1, 4744], [1, 4746], [1, 4748], [1, 4750], [1, 4752], [1, 4754], [1, 4756], [1, 4758], [1, 4760], [1, 4762], [1, 4764], [1, 4766], [1, 4768], [1, 4770], [1, 4772], [1, 4774], [1, 4776], [1, 4778], [1, 4780], [1, 4782], [1, 4784], [1, 4786], [1, 4788], [1, 4790], [1, 4792], [1, 4794], [1, 4796], [1, 4798], [1, 4800], [1, 4802], [1, 4804], [1, 4806], [1, 4808], [1, 4810], [1, 4812], [1, 4814], [1, 4816], [1, 4818], [1, 4820], [1, 4822], [1, 4824], [1, 4826], [1, 4828], [1, 4830], [1, 4832], [1, 4834], [1, 4836], [1, 4838], [1, 4840], [1, 4842], [1, 4844], [1, 4846], [1, 4848], [1, 4850], [1, 4852], [1, 4854], [1, 4856], [1, 4858], [1, 4860], [1, 4862], [1, 4864], [1, 4866], [1, 4868], [1, 4870], [1, 4872], [1, 4874], [1, 4876], [1, 4878], [1, 4880], [1, 4882], [1, 4884], [1, 4886], [1, 4888], [1, 4890], [1, 4892], [1, 4894], [1, 4896], [1, 4898], [1, 4900], [1, 4902], [1, 4904], [1, 4906], [1, 4908], [1, 4910], [1, 4912], [1, 4914], [1, 4916], [1, 4918], [1, 4920], [1, 4922], [1, 4924], [1, 4926], [1, 4928], [1, 4930], [1, 4932], [1, 4934], [1, 4936], [1, 4938], [1, 4940], [1, 4942], [1, 4944], [1, 4946], [1, 4948], [1, 4950], [1, 4952], [1, 4954], [1, 4956], [1, 4958], [1, 4960], [1, 4962], [1, 4964], [1, 4966], [1, 4968], [1, 4970], [1, 4972], [1, 4974], [1, 4976], [1, 4978], [1, 4980], [1, 4982], [1, 4984], [1, 4986], [1, 4988], [1, 4990], [1, 4992], [1, 4994], [1, 4996], [1, 4998], [1, 5000], [1, 5002], [1, 5004], [1, 5006], [1, 5008], [1, 5010], [1, 5012], [1, 5014], [1, 5016], [1, 5018], [1, 5020], [1, 5022], [1, 5024], [1, 5026], [1, 5028], [1, 5030], [1, 5032], [1, 5034], [1, 5036], [1, 5038], [1, 5040], [1, 5042], [1, 5044], [1, 5046], [1, 5048], [1, 5050], [1, 5052], [1, 5054], [1, 5056], [1, 5058], [1, 5060], [1, 5062], [1, 5064], [1, 5066], [1, 5068], [1, 5070], [1, 5072], [1, 5074], [1, 5076], [1, 5078], [1, 5080], [1, 5082], [1, 5084], [1, 5086], [1, 5088], [1, 5090], [1, 5092], [1, 5094], [1, 5096], [1, 5098], [1, 5100], [1, 5102], [1, 5104], [1, 5106], [1, 5108], [1, 5110], [1, 5112], [1, 5114], [1, 5116], [1, 5118], [1, 5120], [1, 5122], [1, 5124], [1, 5126], [1, 5128], [1, 5130], [1, 5132], [1, 5134], [1, 5136], [1, 5138], [1, 5140], [1, 5142], [1, 5144], [1, 5146], [1, 5148], [1, 5150], [1, 5152], [1, 5154], [1, 5156], [1, 5158], [1, 5160], [1, 5162], [1, 5164], [1, 5166], [1, 5168], [1, 5170], [1, 5172], [1, 5174], [1, 5176], [1, 5178], [1, 5180], [1, 5182], [1, 5184], [1, 5186], [1, 5188], [1, 5190], [1, 5192], [1, 5194], [1, 5196], [1, 5198], [1, 5200], [1, 5202], [1, 5204], [1, 5206], [1, 5208], [1, 5210], [1, 5212], [1, 5214], [1, 5216], [1, 5218], [1, 5220], [1, 5222], [1, 5224], [1, 5226], [1, 5228], [1, 5230], [1, 5232], [1, 5234], [1, 5236], [1, 5238], [1, 5240], [1, 5242], [1, 5244], [1, 5246], [1, 5248], [1, 5250], [1, 5252], [1, 5254], [1, 5256], [1, 5258], [1, 5260], [1, 5262], [1, 5264], [1, 5266], [1, 5268], [1, 5270], [1, 5272], [1, 5274], [1, 5276], [1, 5278], [1, 5280], [1, 5282], [1, 5284], [1, 5286], [1, 5288], [1, 5290], [1, 5292], [1, 5294], [1, 5296], [1, 5298], [1, 5300], [1, 5302], [1, 5304], [1, 5306], [1, 5308], [1, 5310], [1, 5312], [1, 5314], [1, 5316], [1, 5318], [1, 5320], [1, 5322], [1, 5324], [1, 5326], [1, 5328], [1, 5330], [1, 5332], [1, 5334], [1, 5336], [1, 5338], [1, 5340], [1, 5342], [1, 5344], [1, 5346], [1, 5348], [1, 5350], [1, 5352], [1, 5354], [1, 5356], [1, 5358], [1, 5360], [1, 5362], [1, 5364], [1, 5366], [1, 5368], [1, 5370], [1, 5372], [1, 5374], [1, 5376], [1, 5378], [1, 5380], [1, 5382], [1, 5384], [1, 5386], [1, 5388], [1, 5390], [1, 5392], [1, 5394], [1, 5396], [1, 5398], [1, 5400], [1, 5402], [1, 5404], [1, 5406], [1, 5408], [1, 5410], [1, 5412], [1, 5414], [1, 5416], [1, 5418], [1, 5420], [1, 5422], [1, 5424], [1, 5426], [1, 5428], [1, 5430], [1, 5432], [1, 5434], [1, 5436], [1, 5438], [1, 5440], [1, 5442], [1, 5444], [1, 5446], [1, 5448], [1, 5450], [1, 5452], [1, 5454], [1, 5456], [1, 5458], [1, 5460], [1, 5462], [1, 5464], [1, 5466], [1, 5468], [1, 5470], [1, 5472], [1, 5474], [1, 5476], [1, 5478], [1, 5480], [1, 5482], [1, 5484], [1, 5486], [1, 5488], [1, 5490], [1, 5492], [1, 5494], [1, 5496], [1, 5498], [1, 5500], [1, 5502], [1, 5504], [1, 5506], [1, 5508], [1, 5510], [1, 5512], [1, 5514], [1, 5516], [1, 5518], [1, 5520], [1, 5522], [1, 5524], [1, 5526], [1, 5528], [1, 5530], [1, 5532], [1, 5534], [1, 5536], [1, 5538], [1, 5540], [1, 5542], [1, 5544], [1, 5546], [1, 5548], [1, 5550], [1, 5552], [1, 5554], [1, 5556], [1, 5558], [1, 5560], [1, 5562], [1, 5564], [1, 5566], [1, 5568], [1, 5570], [1, 5572], [1, 5574], [1, 5576], [1, 5578], [1, 5580], [1, 5582], [1, 5584], [1, 5586], [1, 5588], [1, 5590], [1, 5592], [1, 5594], [1, 5596], [1, 5598], [1, 5600], [1, 5602], [1, 5604], [1, 5606], [1, 5608], [1, 5610], [1, 5612], [1, 5614], [1, 5616], [1, 5618], [1, 5620], [1, 5622], [1, 5624], [1, 5626], [1, 5628], [1, 5630], [1, 5632], [1, 5634], [1, 5636], [1, 5638], [1, 5640], [1, 5642], [1, 5644], [1, 5646], [1, 5648], [1, 5650], [1, 5652], [1, 5654], [1, 5656], [1, 5658], [1, 5660], [1, 5662], [1, 5664], [1, 5666], [1, 5668], [1, 5670], [1, 5672], [1, 5674], [1, 5676], [1, 5678], [1, 5680], [1, 5682], [1, 5684], [1, 5686], [1, 5688], [1, 5690], [1, 5692], [1, 5694], [1, 5696], [1, 5698], [1, 5700], [1, 5702], [1, 5704], [1, 5706], [1, 5708], [1, 5710], [1, 5712], [1, 5714], [1, 5716], [1, 5718], [1, 5720], [1, 5722], [1, 5724], [1, 5726], [1, 5728], [1, 5730], [1, 5732], [1, 5734], [1, 5736], [1, 5738], [1, 5740], [1, 5742], [1, 5744], [1, 5746], [1, 5748], [1, 5750], [1, 5752], [1, 5754], [1, 5756], [1, 5758], [1, 5760], [1, 5762], [1, 5764], [1, 5766], [1, 5768], [1, 5770], [1, 5772], [1, 5774], [1, 5776], [1, 5778], [1, 5780], [1, 5782], [1, 5784], [1, 5786], [1, 5788], [1, 5790], [1, 5792], [1, 5794], [1, 5796], [1, 5798], [1, 5800], [1, 5802], [1, 5804], [1, 5806], [1, 5808], [1, 5810], [1, 5812], [1, 5814], [1, 5816], [1, 5818], [1, 5820], [1, 5822], [1, 5824], [1, 5826], [1, 5828], [1, 5830], [1, 5832], [1, 5834], [1, 5836], [1, 5838], [1, 5840], [1, 5842], [1, 5844], [1, 5846], [1, 5848], [1, 5850], [1, 5852], [1, 5854], [1, 5856], [1, 5858], [1, 5860], [1, 5862], [1, 5864], [1, 5866], [1, 5868], [1, 5870], [1, 5872], [1, 5874], [1, 5876], [1, 5878], [1, 5880], [1, 5882], [1, 5884], [1, 5886], [1, 5888], [1, 5890], [1, 5892], [1, 5894], [1, 5896], [1, 5898], [1, 5900], [1, 5902], [1, 5904], [1, 5906], [1, 5908], [1, 5910], [1, 5912], [1, 5914], [1, 5916], [1, 5918], [1, 5920], [1, 5922], [1, 5924], [1, 5926], [1, 5928], [1, 5930], [1, 5932], [1, 5934], [1, 5936], [1, 5938], [1, 5940], [1, 5942], [1, 5944], [1, 5946], [1, 5948], [1, 5950], [1, 5952], [1, 5954], [1, 5956], [1, 5958], [1, 5960], [1, 5962], [1, 5964], [1, 5966], [1, 5968], [1, 5970], [1, 5972], [1, 5974], [1, 5976], [1, 5978], [1, 5980], [1, 5982], [1, 5984], [1, 5986], [1, 5988], [1, 5990], [1, 5992], [1, 5994], [1, 5996], [1, 5998], [1, 6000], [1, 6002], [1, 6004], [1, 6006], [1, 6008], [1, 6010], [1, 6012], [1, 6014], [1, 6016], [1, 6018], [1, 6020], [1, 6022], [1, 6024], [1, 6026], [1, 6028], [1, 6030], [1, 6032], [1, 6034], [1, 6036], [1, 6038], [1, 6040], [1, 6042], [1, 6044], [1, 6046], [1, 6048], [1, 6050], [1, 6052], [1, 6054], [1, 6056], [1, 6058], [1, 6060], [1, 6062], [1, 6064], [1, 6066], [1, 6068], [1, 6070], [1, 6072], [1, 6074], [1, 6076], [1, 6078], [1, 6080], [1, 6082], [1, 6084], [1, 6086], [1, 6088], [1, 6090], [1, 6092], [1, 6094], [1, 6096], [1, 6098], [1, 6100], [1, 6102], [1, 6104], [1, 6106], [1, 6108], [1, 6110], [1, 6112], [1, 6114], [1, 6116], [1, 6118], [1, 6120], [1, 6122], [1, 6124], [1, 6126], [1, 6128], [1, 6130], [1, 6132], [1, 6134], [1, 6136], [1, 6138], [1, 6140], [1, 6142], [1, 6144], [1, 6146], [1, 6148], [1, 6150], [1, 6152], [1, 6154], [1, 6156], [1, 6158], [1, 6160], [1, 6162], [1, 6164], [1, 6166], [1, 6168], [1, 6170], [1, 6172], [1, 6174], [1, 6176], [1, 6178], [1, 6180], [1, 6182], [1, 6184], [1, 6186], [1, 6188], [1, 6190], [1, 6192], [1, 6194], [1, 6196], [1, 6198], [1, 6200], [1, 6202], [1, 6204], [1, 6206], [1, 6208], [1, 6210], [1, 6212], [1, 6214], [1, 6216], [1, 6218], [1, 6220], [1, 6222], [1, 6224], [1, 6226], [1, 6228], [1, 6230], [1, 6232], [1, 6234], [1, 6236], [1, 6238], [1, 6240], [1, 6242], [1, 6244], [1, 6246], [1, 6248], [1, 6250], [1, 6252], [1, 6254], [1, 6256], [1, 6258], [1, 6260], [1, 6262], [1, 6264], [1, 6266], [1, 6268], [1, 6270], [1, 6272], [1, 6274], [1, 6276], [1, 6278], [1, 6280], [1, 6282], [1, 6284], [1, 6286], [1, 6288], [1, 6290], [1, 6292], [1, 6294], [1, 6296], [1, 6298], [1, 6300], [1, 6302], [1, 6304], [1, 6306], [1, 6308], [1, 6310], [1, 6312], [1, 6314], [1, 6316], [1, 6318], [1, 6320], [1, 6322], [1, 6324], [1, 6326], [1, 6328], [1, 6330], [1, 6332], [1, 6334], [1, 6336], [1, 6338], [1, 6340], [1, 6342], [1, 6344], [1, 6346], [1, 6348], [1, 6350], [1, 6352], [1, 6354], [1, 6356], [1, 6358], [1, 6360], [1, 6362], [1, 6364], [1, 6366], [1, 6368], [1, 6370], [1, 6372], [1, 6374], [1, 6376], [1, 6378], [1, 6380], [1, 6382], [1, 6384], [1, 6386], [1, 6388], [1, 6390], [1, 6392], [1, 6394], [1, 6396], [1, 6398], [1, 6400], [1, 6402], [1, 6404], [1, 6406], [1, 6408], [1, 6410], [1, 6412], [1, 6414], [1, 6416], [1, 6418], [1, 6420], [1, 6422], [1, 6424], [1, 6426], [1, 6428], [1, 6430], [1, 6432], [1, 6434], [1, 6436], [1, 6438], [1, 6440], [1, 6442], [1, 6444], [1, 6446], [1, 6448], [1, 6450], [1, 6452], [1, 6454], [1, 6456], [1, 6458], [1, 6460], [1, 6462], [1, 6464], [1, 6466], [1, 6468], [1, 6470], [1, 6472], [1, 6474], [1, 6476], [1, 6478], [1, 6480], [1, 6482], [1, 6484], [1, 6486], [1, 6488], [1, 6490], [1, 6492], [1, 6494], [1, 6496], [1, 6498], [1, 6500], [1, 6502], [1, 6504], [1, 6506], [1, 6508], [1, 6510], [1, 6512], [1, 6514], [1, 6516], [1, 6518], [1, 6520], [1, 6522], [1, 6524], [1, 6526], [1, 6528], [1, 6530], [1, 6532], [1, 6534], [1, 6536], [1, 6538], [1, 6540], [1, 6542], [1, 6544], [1, 6546], [1, 6548], [1, 6550], [1, 6552], [1, 6554], [1, 6556], [1, 6558], [1, 6560], [1, 6562], [1, 6564], [1, 6566], [1, 6568], [1, 6570], [1, 6572], [1, 6574], [1, 6576], [1, 6578], [1, 6580], [1, 6582], [1, 6584], [1, 6586], [1, 6588], [1, 6590], [1, 6592], [1, 6594], [1, 6596], [1, 6598], [1, 6600], [1, 6602], [1, 6604], [1, 6606], [1, 6608], [1, 6610], [1, 6612], [1, 6614], [1, 6616], [1, 6618], [1, 6620], [1, 6622], [1, 6624], [1, 6626], [1, 6628], [1, 6630], [1, 6632], [1, 6634], [1, 6636], [1, 6638], [1, 6640], [1, 6642], [1, 6644], [1, 6646], [1, 6648], [1, 6650], [1, 6652], [1, 6654], [1, 6656], [1, 6658], [1, 6660], [1, 6662], [1, 6664], [1, 6666], [1, 6668], [1, 6670], [1, 6672], [1, 6674], [1, 6676], [1, 6678], [1, 6680], [1, 6682], [1, 6684], [1, 6686], [1, 6688], [1, 6690], [1, 6692], [1, 6694], [1, 6696], [1, 6698], [1, 6700], [1, 6702], [1, 6704], [1, 6706], [1, 6708], [1, 6710], [1, 6712], [1, 6714], [1, 6716], [1, 6718], [1, 6720], [1, 6722], [1, 6724], [1, 6726], [1, 6728], [1, 6730], [1, 6732], [1, 6734], [1, 6736], [1, 6738], [1, 6740], [1, 6742], [1, 6744], [1, 6746], [1, 6748], [1, 6750], [1, 6752], [1, 6754], [1, 6756], [1, 6758], [1, 6760], [1, 6762], [1, 6764], [1, 6766], [1, 6768], [1, 6770], [1, 6772], [1, 6774], [1, 6776], [1, 6778], [1, 6780], [1, 6782], [1, 6784], [1, 6786], [1, 6788], [1, 6790], [1, 6792], [1, 6794], [1, 6796], [1, 6798], [1, 6800], [1, 6802], [1, 6804], [1, 6806], [1, 6808], [1, 6810], [1, 6812], [1, 6814], [1, 6816], [1, 6818], [1, 6820], [1, 6822], [1, 6824], [1, 6826], [1, 6828], [1, 6830], [1, 6832], [1, 6834], [1, 6836], [1, 6838], [1, 6840], [1, 6842], [1, 6844], [1, 6846], [1, 6848], [1, 6850], [1, 6852], [1, 6854], [1, 6856], [1, 6858], [1, 6860], [1, 6862], [1, 6864], [1, 6866], [1, 6868], [1, 6870], [1, 6872], [1, 6874], [1, 6876], [1, 6878], [1, 6880], [1, 6882], [1, 6884], [1, 6886], [1, 6888], [1, 6890], [1, 6892], [1, 6894], [1, 6896], [1, 6898], [1, 6900], [1, 6902], [1, 6904], [1, 6906], [1, 6908], [1, 6910], [1, 6912], [1, 6914], [1, 6916], [1, 6918], [1, 6920], [1, 6922], [1, 6924], [1, 6926], [1, 6928], [1, 6930], [1, 6932], [1, 6934], [1, 6936], [1, 6938], [1, 6940], [1, 6942], [1, 6944], [1, 6946], [1, 6948], [1, 6950], [1, 6952], [1, 6954], [1, 6956], [1, 6958], [1, 6960], [1, 6962], [1, 6964], [1, 6966], [1, 6968], [1, 6970], [1, 6972], [1, 6974], [1, 6976], [1, 6978], [1, 6980], [1, 6982], [1, 6984], [1, 6986], [1, 6988], [1, 6990], [1, 6992], [1, 6994], [1, 6996], [1, 6998], [1, 7000], [1, 7002], [1, 7004], [1, 7006], [1, 7008], [1, 7010], [1, 7012], [1, 7014], [1, 7016], [1, 7018], [1, 7020], [1, 7022], [1, 7024], [1, 7026], [1, 7028], [1, 7030], [1, 7032], [1, 7034], [1, 7036], [1, 7038], [1, 7040], [1, 7042], [1, 7044], [1, 7046], [1, 7048], [1, 7050], [1, 7052], [1, 7054], [1, 7056], [1, 7058], [1, 7060], [1, 7062], [1, 7064], [1, 7066], [1, 7068], [1, 7070], [1, 7072], [1, 7074], [1, 7076], [1, 7078], [1, 7080], [1, 7082], [1, 7084], [1, 7086], [1, 7088], [1, 7090], [1, 7092], [1, 7094], [1, 7096], [1, 7098], [1, 7100], [1, 7102], [1, 7104], [1, 7106], [1, 7108], [1, 7110], [1, 7112], [1, 7114], [1, 7116], [1, 7118], [1, 7120], [1, 7122], [1, 7124], [1, 7126], [1, 7128], [1, 7130], [1, 7132], [1, 7134], [1, 7136], [1, 7138], [1, 7140], [1, 7142], [1, 7144], [1, 7146], [1, 7148], [1, 7150], [1, 7152], [1, 7154], [1, 7156], [1, 7158], [1, 7160], [1, 7162], [1, 7164], [1, 7166], [1, 7168], [1, 7170], [1, 7172], [1, 7174], [1, 7176], [1, 7178], [1, 7180], [1, 7182], [1, 7184], [1, 7186], [1, 7188], [1, 7190], [1, 7192], [1, 7194], [1, 7196], [1, 7198], [1, 7200], [1, 7202], [1, 7204], [1, 7206], [1, 7208], [1, 7210], [1, 7212], [1, 7214], [1, 7216], [1, 7218], [1, 7220], [1, 7222], [1, 7224], [1, 7226], [1, 7228], [1, 7230], [1, 7232], [1, 7234], [1, 7236], [1, 7238], [1, 7240], [1, 7242], [1, 7244], [1, 7246], [1, 7248], [1, 7250], [1, 7252], [1, 7254], [1, 7256], [1, 7258], [1, 7260], [1, 7262], [1, 7264], [1, 7266], [1, 7268], [1, 7270], [1, 7272], [1, 7274], [1, 7276], [1, 7278], [1, 7280], [1, 7282], [1, 7284], [1, 7286], [1, 7288], [1, 7290], [1, 7292], [1, 7294], [1, 7296], [1, 7298], [1, 7300], [1, 7302], [1, 7304], [1, 7306], [1, 7308], [1, 7310], [1, 7312], [1, 7314], [1, 7316], [1, 7318], [1, 7320], [1, 7322], [1, 7324], [1, 7326], [1, 7328], [1, 7330], [1, 7332], [1, 7334], [1, 7336], [1, 7338], [1, 7340], [1, 7342], [1, 7344], [1, 7346], [1, 7348], [1, 7350], [1, 7352], [1, 7354], [1, 7356], [1, 7358], [1, 7360], [1, 7362], [1, 7364], [1, 7366], [1, 7368], [1, 7370], [1, 7372], [1, 7374], [1, 7376], [1, 7378], [1, 7380], [1, 7382], [1, 7384], [1, 7386], [1, 7388], [1, 7390], [1, 7392], [1, 7394], [1, 7396], [1, 7398], [1, 7400], [1, 7402], [1, 7404], [1, 7406], [1, 7408], [1, 7410], [1, 7412], [1, 7414], [1, 7416], [1, 7418], [1, 7420], [1, 7422], [1, 7424], [1, 7426], [1, 7428], [1, 7430], [1, 7432], [1, 7434], [1, 7436], [1, 7438], [1, 7440], [1, 7442], [1, 7444], [1, 7446], [1, 7448], [1, 7450], [1, 7452], [1, 7454], [1, 7456], [1, 7458], [1, 7460], [1, 7462], [1, 7464], [1, 7466], [1, 7468], [1, 7470], [1, 7472], [1, 7474], [1, 7476], [1, 7478], [1, 7480], [1, 7482], [1, 7484], [1, 7486], [1, 7488], [1, 7490], [1, 7492], [1, 7494], [1, 7496], [1, 7498], [1, 7500], [1, 7502], [1, 7504], [1, 7506], [1, 7508], [1, 7510], [1, 7512], [1, 7514], [1, 7516], [1, 7518], [1, 7520], [1, 7522], [1, 7524], [1, 7526], [1, 7528], [1, 7530], [1, 7532], [1, 7534], [1, 7536], [1, 7538], [1, 7540], [1, 7542], [1, 7544], [1, 7546], [1, 7548], [1, 7550], [1, 7552], [1, 7554], [1, 7556], [1, 7558], [1, 7560], [1, 7562], [1, 7564], [1, 7566], [1, 7568], [1, 7570], [1, 7572], [1, 7574], [1, 7576], [1, 7578], [1, 7580], [1, 7582], [1, 7584], [1, 7586], [1, 7588], [1, 7590], [1, 7592], [1, 7594], [1, 7596], [1, 7598], [1, 7600], [1, 7602], [1, 7604], [1, 7606], [1, 7608], [1, 7610], [1, 7612], [1, 7614], [1, 7616], [1, 7618], [1, 7620], [1, 7622], [1, 7624], [1, 7626], [1, 7628], [1, 7630], [1, 7632], [1, 7634], [1, 7636], [1, 7638], [1, 7640], [1, 7642], [1, 7644], [1, 7646], [1, 7648], [1, 7650], [1, 7652], [1, 7654], [1, 7656], [1, 7658], [1, 7660], [1, 7662], [1, 7664], [1, 7666], [1, 7668], [1, 7670], [1, 7672], [1, 7674], [1, 7676], [1, 7678], [1, 7680], [1, 7682], [1, 7684], [1, 7686], [1, 7688], [1, 7690], [1, 7692], [1, 7694], [1, 7696], [1, 7698], [1, 7700], [1, 7702], [1, 7704], [1, 7706], [1, 7708], [1, 7710], [1, 7712], [1, 7714], [1, 7716], [1, 7718], [1, 7720], [1, 7722], [1, 7724], [1, 7726], [1, 7728], [1, 7730], [1, 7732], [1, 7734], [1, 7736], [1, 7738], [1, 7740], [1, 7742], [1, 7744], [1, 7746], [1, 7748], [1, 7750], [1, 7752], [1, 7754], [1, 7756], [1, 7758], [1, 7760], [1, 7762], [1, 7764], [1, 7766], [1, 7768], [1, 7770], [1, 7772], [1, 7774], [1, 7776], [1, 7778], [1, 7780], [1, 7782], [1, 7784], [1, 7786], [1, 7788], [1, 7790], [1, 7792], [1, 7794], [1, 7796], [1, 7798], [1, 7800], [1, 7802], [1, 7804], [1, 7806], [1, 7808], [1, 7810], [1, 7812], [1, 7814], [1, 7816], [1, 7818], [1, 7820], [1, 7822], [1, 7824], [1, 7826], [1, 7828], [1, 7830], [1, 7832], [1, 7834], [1, 7836], [1, 7838], [1, 7840], [1, 7842], [1, 7844], [1, 7846], [1, 7848], [1, 7850], [1, 7852], [1, 7854], [1, 7856], [1, 7858], [1, 7860], [1, 7862], [1, 7864], [1, 7866], [1, 7868], [1, 7870], [1, 7872], [1, 7874], [1, 7876], [1, 7878], [1, 7880], [1, 7882], [1, 7884], [1, 7886], [1, 7888], [1, 7890], [1, 7892], [1, 7894], [1, 7896], [1, 7898], [1, 7900], [1, 7902], [1, 7904], [1, 7906], [1, 7908], [1, 7910], [1, 7912], [1, 7914], [1, 7916], [1, 7918], [1, 7920], [1, 7922], [1, 7924], [1, 7926], [1, 7928], [1, 7930], [1, 7932], [1, 7934], [1, 7936], [1, 7938], [1, 7940], [1, 7942], [1, 7944], [1, 7946], [1, 7948], [1, 7950], [1, 7952], [1, 7954], [1, 7956], [1, 7958], [1, 7960], [1, 7962], [1, 7964], [1, 7966], [1, 7968], [1, 7970], [1, 7972], [1, 7974], [1, 7976], [1, 7978], [1, 7980], [1, 7982], [1, 7984], [1, 7986], [1, 7988], [1, 7990], [1, 7992], [1, 7994], [1, 7996], [1, 7998], [1, 8000], [1, 8002], [1, 8004], [1, 8006], [1, 8008], [1, 8010], [1, 8012], [1, 8014], [1, 8016], [1, 8018], [1, 8020], [1, 8022], [1, 8024], [1, 8026], [1, 8028], [1, 8030], [1, 8032], [1, 8034], [1, 8036], [1, 8038], [1, 8040], [1, 8042], [1, 8044], [1, 8046], [1, 8048], [1, 8050], [1, 8052], [1, 8054], [1, 8056], [1, 8058], [1, 8060], [1, 8062], [1, 8064], [1, 8066], [1, 8068], [1, 8070], [1, 8072], [1, 8074], [1, 8076], [1, 8078], [1, 8080], [1, 8082], [1, 8084], [1, 8086], [1, 8088], [1, 8090], [1, 8092], [1, 8094], [1, 8096], [1, 8098], [1, 8100], [1, 8102], [1, 8104], [1, 8106], [1, 8108], [1, 8110], [1, 8112], [1, 8114], [1, 8116], [1, 8118], [1, 8120], [1, 8122], [1, 8124], [1, 8126], [1, 8128], [1, 8130], [1, 8132], [1, 8134], [1, 8136], [1, 8138], [1, 8140], [1, 8142], [1, 8144], [1, 8146], [1, 8148], [1, 8150], [1, 8152], [1, 8154], [1, 8156], [1, 8158], [1, 8160], [1, 8162], [1, 8164], [1, 8166], [1, 8168], [1, 8170], [1, 8172], [1, 8174], [1, 8176], [1, 8178], [1, 8180], [1, 8182], [1, 8184], [1, 8186], [1, 8188], [1, 8190], [1, 8192], [1, 8194], [1, 8196], [1, 8198], [1, 8200], [1, 8202], [1, 8204], [1, 8206], [1, 8208], [1, 8210], [1, 8212], [1, 8214], [1, 8216], [1, 8218], [1, 8220], [1, 8222], [1, 8224], [1, 8226], [1, 8228], [1, 8230], [1, 8232], [1, 8234], [1, 8236], [1, 8238], [1, 8240], [1, 8242], [1, 8244], [1, 8246], [1, 8248], [1, 8250], [1, 8252], [1, 8254], [1, 8256], [1, 8258], [1, 8260], [1, 8262], [1, 8264], [1, 8266], [1, 8268], [1, 8270], [1, 8272], [1, 8274], [1, 8276], [1, 8278], [1, 8280], [1, 8282], [1, 8284], [1, 8286], [1, 8288], [1, 8290], [1, 8292], [1, 8294], [1, 8296], [1, 8298], [1, 8300], [1, 8302], [1, 8304], [1, 8306], [1, 8308], [1, 8310], [1, 8312], [1, 8314], [1, 8316], [1, 8318], [1, 8320], [1, 8322], [1, 8324], [1, 8326], [1, 8328], [1, 8330], [1, 8332], [1, 8334], [1, 8336], [1, 8338], [1, 8340], [1, 8342], [1, 8344], [1, 8346], [1, 8348], [1, 8350], [1, 8352], [1, 8354], [1, 8356], [1, 8358], [1, 8360], [1, 8362], [1, 8364], [1, 8366], [1, 8368], [1, 8370], [1, 8372], [1, 8374], [1, 8376], [1, 8378], [1, 8380], [1, 8382], [1, 8384], [1, 8386], [1, 8388], [1, 8390], [1, 8392], [1, 8394], [1, 8396], [1, 8398], [1, 8400], [1, 8402], [1, 8404], [1, 8406], [1, 8408], [1, 8410], [1, 8412], [1, 8414], [1, 8416], [1, 8418], [1, 8420], [1, 8422], [1, 8424], [1, 8426], [1, 8428], [1, 8430], [1, 8432], [1, 8434], [1, 8436], [1, 8438], [1, 8440], [1, 8442], [1, 8444], [1, 8446], [1, 8448], [1, 8450], [1, 8452], [1, 8454], [1, 8456], [1, 8458], [1, 8460], [1, 8462], [1, 8464], [1, 8466], [1, 8468], [1, 8470], [1, 8472], [1, 8474], [1, 8476], [1, 8478], [1, 8480], [1, 8482], [1, 8484], [1, 8486], [1, 8488], [1, 8490], [1, 8492], [1, 8494], [1, 8496], [1, 8498], [1, 8500], [1, 8502], [1, 8504], [1, 8506], [1, 8508], [1, 8510], [1, 8512], [1, 8514], [1, 8516], [1, 8518], [1, 8520], [1, 8522], [1, 8524], [1, 8526], [1, 8528], [1, 8530], [1, 8532], [1, 8534], [1, 8536], [1, 8538], [1, 8540], [1, 8542], [1, 8544], [1, 8546], [1, 8548], [1, 8550], [1, 8552], [1, 8554], [1, 8556], [1, 8558], [1, 8560], [1, 8562], [1, 8564], [1, 8566], [1, 8568], [1, 8570], [1, 8572], [1, 8574], [1, 8576], [1, 8578], [1, 8580], [1, 8582], [1, 8584], [1, 8586], [1, 8588], [1, 8590], [1, 8592], [1, 8594], [1, 8596], [1, 8598], [1, 8600], [1, 8602], [1, 8604], [1, 8606], [1, 8608], [1, 8610], [1, 8612], [1, 8614], [1, 8616], [1, 8618], [1, 8620], [1, 8622], [1, 8624], [1, 8626], [1, 8628], [1, 8630], [1, 8632], [1, 8634], [1, 8636], [1, 8638], [1, 8640], [1, 8642], [1, 8644], [1, 8646], [1, 8648], [1, 8650], [1, 8652], [1, 8654], [1, 8656], [1, 8658], [1, 8660], [1, 8662], [1, 8664], [1, 8666], [1, 8668], [1, 8670], [1, 8672], [1, 8674], [1, 8676], [1, 8678], [1, 8680], [1, 8682], [1, 8684], [1, 8686], [1, 8688], [1, 8690], [1, 8692], [1, 8694], [1, 8696], [1, 8698], [1, 8700], [1, 8702], [1, 8704], [1, 8706], [1, 8708], [1, 8710], [1, 8712], [1, 8714], [1, 8716], [1, 8718], [1, 8720], [1, 8722], [1, 8724], [1, 8726], [1, 8728], [1, 8730], [1, 8732], [1, 8734], [1, 8736], [1, 8738], [1, 8740], [1, 8742], [1, 8744], [1, 8746], [1, 8748], [1, 8750], [1, 8752], [1, 8754], [1, 8756], [1, 8758], [1, 8760], [1, 8762], [1, 8764], [1, 8766], [1, 8768], [1, 8770], [1, 8772], [1, 8774], [1, 8776], [1, 8778], [1, 8780], [1, 8782], [1, 8784], [1, 8786], [1, 8788], [1, 8790], [1, 8792], [1, 8794], [1, 8796], [1, 8798], [1, 8800], [1, 8802], [1, 8804], [1, 8806], [1, 8808], [1, 8810], [1, 8812], [1, 8814], [1, 8816], [1, 8818], [1, 8820], [1, 8822], [1, 8824], [1, 8826], [1, 8828], [1, 8830], [1, 8832], [1, 8834], [1, 8836], [1, 8838], [1, 8840], [1, 8842], [1, 8844], [1, 8846], [1, 8848], [1, 8850], [1, 8852], [1, 8854], [1, 8856], [1, 8858], [1, 8860], [1, 8862], [1, 8864], [1, 8866], [1, 8868], [1, 8870], [1, 8872], [1, 8874], [1, 8876], [1, 8878], [1, 8880], [1, 8882], [1, 8884], [1, 8886], [1, 8888], [1, 8890], [1, 8892], [1, 8894], [1, 8896], [1, 8898], [1, 8900], [1, 8902], [1, 8904], [1, 8906], [1, 8908], [1, 8910], [1, 8912], [1, 8914], [1, 8916], [1, 8918], [1, 8920], [1, 8922], [1, 8924], [1, 8926], [1, 8928], [1, 8930], [1, 8932], [1, 8934], [1, 8936], [1, 8938], [1, 8940], [1, 8942], [1, 8944], [1, 8946], [1, 8948], [1, 8950], [1, 8952], [1, 8954], [1, 8956], [1, 8958], [1, 8960], [1, 8962], [1, 8964], [1, 8966], [1, 8968], [1, 8970], [1, 8972], [1, 8974], [1, 8976], [1, 8978], [1, 8980], [1, 8982], [1, 8984], [1, 8986], [1, 8988], [1, 8990], [1, 8992], [1, 8994], [1, 8996], [1, 8998], [1, 9000], [1, 9002], [1, 9004], [1, 9006], [1, 9008], [1, 9010], [1, 9012], [1, 9014], [1, 9016], [1, 9018], [1, 9020], [1, 9022], [1, 9024], [1, 9026], [1, 9028], [1, 9030], [1, 9032], [1, 9034], [1, 9036], [1, 9038], [1, 9040], [1, 9042], [1, 9044], [1, 9046], [1, 9048], [1, 9050], [1, 9052], [1, 9054], [1, 9056], [1, 9058], [1, 9060], [1, 9062], [1, 9064], [1, 9066], [1, 9068], [1, 9070], [1, 9072], [1, 9074], [1, 9076], [1, 9078], [1, 9080], [1, 9082], [1, 9084], [1, 9086], [1, 9088], [1, 9090], [1, 9092], [1, 9094], [1, 9096], [1, 9098], [1, 9100], [1, 9102], [1, 9104], [1, 9106], [1, 9108], [1, 9110], [1, 9112], [1, 9114], [1, 9116], [1, 9118], [1, 9120], [1, 9122], [1, 9124], [1, 9126], [1, 9128], [1, 9130], [1, 9132], [1, 9134], [1, 9136], [1, 9138], [1, 9140], [1, 9142], [1, 9144], [1, 9146], [1, 9148], [1, 9150], [1, 9152], [1, 9154], [1, 9156], [1, 9158], [1, 9160], [1, 9162], [1, 9164], [1, 9166], [1, 9168], [1, 9170], [1, 9172], [1, 9174], [1, 9176], [1, 9178], [1, 9180], [1, 9182], [1, 9184], [1, 9186], [1, 9188], [1, 9190], [1, 9192], [1, 9194], [1, 9196], [1, 9198], [1, 9200], [1, 9202], [1, 9204], [1, 9206], [1, 9208], [1, 9210], [1, 9212], [1, 9214], [1, 9216], [1, 9218], [1, 9220], [1, 9222], [1, 9224], [1, 9226], [1, 9228], [1, 9230], [1, 9232], [1, 9234], [1, 9236], [1, 9238], [1, 9240], [1, 9242], [1, 9244], [1, 9246], [1, 9248], [1, 9250], [1, 9252], [1, 9254], [1, 9256], [1, 9258], [1, 9260], [1, 9262], [1, 9264], [1, 9266], [1, 9268], [1, 9270], [1, 9272], [1, 9274], [1, 9276], [1, 9278], [1, 9280], [1, 9282], [1, 9284], [1, 9286], [1, 9288], [1, 9290], [1, 9292], [1, 9294], [1, 9296], [1, 9298], [1, 9300], [1, 9302], [1, 9304], [1, 9306], [1, 9308], [1, 9310], [1, 9312], [1, 9314], [1, 9316], [1, 9318], [1, 9320], [1, 9322], [1, 9324], [1, 9326], [1, 9328], [1, 9330], [1, 9332], [1, 9334], [1, 9336], [1, 9338], [1, 9340], [1, 9342], [1, 9344], [1, 9346], [1, 9348], [1, 9350], [1, 9352], [1, 9354], [1, 9356], [1, 9358], [1, 9360], [1, 9362], [1, 9364], [1, 9366], [1, 9368], [1, 9370], [1, 9372], [1, 9374], [1, 9376], [1, 9378], [1, 9380], [1, 9382], [1, 9384], [1, 9386], [1, 9388], [1, 9390], [1, 9392], [1, 9394], [1, 9396], [1, 9398], [1, 9400], [1, 9402], [1, 9404], [1, 9406], [1, 9408], [1, 9410], [1, 9412], [1, 9414], [1, 9416], [1, 9418], [1, 9420], [1, 9422], [1, 9424], [1, 9426], [1, 9428], [1, 9430], [1, 9432], [1, 9434], [1, 9436], [1, 9438], [1, 9440], [1, 9442], [1, 9444], [1, 9446], [1, 9448], [1, 9450], [1, 9452], [1, 9454], [1, 9456], [1, 9458], [1, 9460], [1, 9462], [1, 9464], [1, 9466], [1, 9468], [1, 9470], [1, 9472], [1, 9474], [1, 9476], [1, 9478], [1, 9480], [1, 9482], [1, 9484], [1, 9486], [1, 9488], [1, 9490], [1, 9492], [1, 9494], [1, 9496], [1, 9498], [1, 9500], [1, 9502], [1, 9504], [1, 9506], [1, 9508], [1, 9510], [1, 9512], [1, 9514], [1, 9516], [1, 9518], [1, 9520], [1, 9522], [1, 9524], [1, 9526], [1, 9528], [1, 9530], [1, 9532], [1, 9534], [1, 9536], [1, 9538], [1, 9540], [1, 9542], [1, 9544], [1, 9546], [1, 9548], [1, 9550], [1, 9552], [1, 9554], [1, 9556], [1, 9558], [1, 9560], [1, 9562], [1, 9564], [1, 9566], [1, 9568], [1, 9570], [1, 9572], [1, 9574], [1, 9576], [1, 9578], [1, 9580], [1, 9582], [1, 9584], [1, 9586], [1, 9588], [1, 9590], [1, 9592], [1, 9594], [1, 9596], [1, 9598], [1, 9600], [1, 9602], [1, 9604], [1, 9606], [1, 9608], [1, 9610], [1, 9612], [1, 9614], [1, 9616], [1, 9618], [1, 9620], [1, 9622], [1, 9624], [1, 9626], [1, 9628], [1, 9630], [1, 9632], [1, 9634], [1, 9636], [1, 9638], [1, 9640], [1, 9642], [1, 9644], [1, 9646], [1, 9648], [1, 9650], [1, 9652], [1, 9654], [1, 9656], [1, 9658], [1, 9660], [1, 9662], [1, 9664], [1, 9666], [1, 9668], [1, 9670], [1, 9672], [1, 9674], [1, 9676], [1, 9678], [1, 9680], [1, 9682], [1, 9684], [1, 9686], [1, 9688], [1, 9690], [1, 9692], [1, 9694], [1, 9696], [1, 9698], [1, 9700], [1, 9702], [1, 9704], [1, 9706], [1, 9708], [1, 9710], [1, 9712], [1, 9714], [1, 9716], [1, 9718], [1, 9720], [1, 9722], [1, 9724], [1, 9726], [1, 9728], [1, 9730], [1, 9732], [1, 9734], [1, 9736], [1, 9738], [1, 9740], [1, 9742], [1, 9744], [1, 9746], [1, 9748], [1, 9750], [1, 9752], [1, 9754], [1, 9756], [1, 9758], [1, 9760], [1, 9762], [1, 9764], [1, 9766], [1, 9768], [1, 9770], [1, 9772], [1, 9774], [1, 9776], [1, 9778], [1, 9780], [1, 9782], [1, 9784], [1, 9786], [1, 9788], [1, 9790], [1, 9792], [1, 9794], [1, 9796], [1, 9798], [1, 9800], [1, 9802], [1, 9804], [1, 9806], [1, 9808], [1, 9810], [1, 9812], [1, 9814], [1, 9816], [1, 9818], [1, 9820], [1, 9822], [1, 9824], [1, 9826], [1, 9828], [1, 9830], [1, 9832], [1, 9834], [1, 9836], [1, 9838], [1, 9840], [1, 9842], [1, 9844], [1, 9846], [1, 9848], [1, 9850], [1, 9852], [1, 9854], [1, 9856], [1, 9858], [1, 9860], [1, 9862], [1, 9864], [1, 9866], [1, 9868], [1, 9870], [1, 9872], [1, 9874], [1, 9876], [1, 9878], [1, 9880], [1, 9882], [1, 9884], [1, 9886], [1, 9888], [1, 9890], [1, 9892], [1, 9894], [1, 9896], [1, 9898], [1, 9900], [1, 9902], [1, 9904], [1, 9906], [1, 9908], [1, 9910], [1, 9912], [1, 9914], [1, 9916], [1, 9918], [1, 9920], [1, 9922], [1, 9924], [1, 9926], [1, 9928], [1, 9930], [1, 9932], [1, 9934], [1, 9936], [1, 9938], [1, 9940], [1, 9942], [1, 9944], [1, 9946], [1, 9948], [1, 9950], [1, 9952], [1, 9954], [1, 9956], [1, 9958], [1, 9960], [1, 9962], [1, 9964], [1, 9966], [1, 9968], [1, 9970], [1, 9972], [1, 9974], [1, 9976], [1, 9978], [1, 9980], [1, 9982], [1, 9984], [1, 9986], [1, 9988], [1, 9990], [1, 9992], [1, 9994], [1, 9996], [1, 9998], [1, 10000], [1, 10002], [1, 10004], [1, 10006], [1, 10008], [1, 10010], [1, 10012], [1, 10014], [1, 10016], [1, 10018], [1, 10020], [1, 10022], [1, 10024], [1, 10026], [1, 10028], [1, 10030], [1, 10032], [1, 10034], [1, 10036], [1, 10038], [1, 10040], [1, 10042], [1, 10044], [1, 10046], [1, 10048], [1, 10050], [1, 10052], [1, 10054], [1, 10056], [1, 10058], [1, 10060], [1, 10062], [1, 10064], [1, 10066], [1, 10068], [1, 10070], [1, 10072], [1, 10074], [1, 10076], [1, 10078], [1, 10080], [1, 10082], [1, 10084], [1, 10086], [1, 10088], [1, 10090], [1, 10092], [1, 10094], [1, 10096], [1, 10098], [1, 10100], [1, 10102], [1, 10104], [1, 10106], [1, 10108], [1, 10110], [1, 10112], [1, 10114], [1, 10116], [1, 10118], [1, 10120], [1, 10122], [1, 10124], [1, 10126], [1, 10128], [1, 10130], [1, 10132], [1, 10134], [1, 10136], [1, 10138], [1, 10140], [1, 10142], [1, 10144], [1, 10146], [1, 10148], [1, 10150], [1, 10152], [1, 10154], [1, 10156], [1, 10158], [1, 10160], [1, 10162], [1, 10164], [1, 10166], [1, 10168], [1, 10170], [1, 10172], [1, 10174], [1, 10176], [1, 10178], [1, 10180], [1, 10182], [1, 10184], [1, 10186], [1, 10188], [1, 10190], [1, 10192], [1, 10194], [1, 10196], [1, 10198], [1, 10200], [1, 10202], [1, 10204], [1, 10206], [1, 10208], [1, 10210], [1, 10212], [1, 10214], [1, 10216], [1, 10218], [1, 10220], [1, 10222], [1, 10224], [1, 10226], [1, 10228], [1, 10230], [1, 10232], [1, 10234], [1, 10236], [1, 10238], [1, 10240], [1, 10242], [1, 10244], [1, 10246], [1, 10248], [1, 10250], [1, 10252], [1, 10254], [1, 10256], [1, 10258], [1, 10260], [1, 10262], [1, 10264], [1, 10266], [1, 10268], [1, 10270], [1, 10272], [1, 10274], [1, 10276], [1, 10278], [1, 10280], [1, 10282], [1, 10284], [1, 10286], [1, 10288], [1, 10290], [1, 10292], [1, 10294], [1, 10296], [1, 10298], [1, 10300], [1, 10302], [1, 10304], [1, 10306], [1, 10308], [1, 10310], [1, 10312], [1, 10314], [1, 10316], [1, 10318], [1, 10320], [1, 10322], [1, 10324], [1, 10326], [1, 10328], [1, 10330], [1, 10332], [1, 10334], [1, 10336], [1, 10338], [1, 10340], [1, 10342], [1, 10344], [1, 10346], [1, 10348], [1, 10350], [1, 10352], [1, 10354], [1, 10356], [1, 10358], [1, 10360], [1, 10362], [1, 10364], [1, 10366], [1, 10368], [1, 10370], [1, 10372], [1, 10374], [1, 10376], [1, 10378], [1, 10380], [1, 10382], [1, 10384], [1, 10386], [1, 10388], [1, 10390], [1, 10392], [1, 10394], [1, 10396], [1, 10398], [1, 10400], [1, 10402], [1, 10404], [1, 10406], [1, 10408], [1, 10410], [1, 10412], [1, 10414], [1, 10416], [1, 10418], [1, 10420], [1, 10422], [1, 10424], [1, 10426], [1, 10428], [1, 10430], [1, 10432], [1, 10434], [1, 10436], [1, 10438], [1, 10440], [1, 10442], [1, 10444], [1, 10446], [1, 10448], [1, 10450], [1, 10452], [1, 10454], [1, 10456], [1, 10458], [1, 10460], [1, 10462], [1, 10464], [1, 10466], [1, 10468], [1, 10470], [1, 10472], [1, 10474], [1, 10476], [1, 10478], [1, 10480], [1, 10482], [1, 10484], [1, 10486], [1, 10488], [1, 10490], [1, 10492], [1, 10494], [1, 10496], [1, 10498], [1, 10500], [1, 10502], [1, 10504], [1, 10506], [1, 10508], [1, 10510], [1, 10512], [1, 10514], [1, 10516], [1, 10518], [1, 10520], [1, 10522], [1, 10524], [1, 10526], [1, 10528], [1, 10530], [1, 10532], [1, 10534], [1, 10536], [1, 10538], [1, 10540], [1, 10542], [1, 10544], [1, 10546], [1, 10548], [1, 10550], [1, 10552], [1, 10554], [1, 10556], [1, 10558], [1, 10560], [1, 10562], [1, 10564], [1, 10566], [1, 10568], [1, 10570], [1, 10572], [1, 10574], [1, 10576], [1, 10578], [1, 10580], [1, 10582], [1, 10584], [1, 10586], [1, 10588], [1, 10590], [1, 10592], [1, 10594], [1, 10596], [1, 10598], [1, 10600], [1, 10602], [1, 10604], [1, 10606], [1, 10608], [1, 10610], [1, 10612], [1, 10614], [1, 10616], [1, 10618], [1, 10620], [1, 10622], [1, 10624], [1, 10626], [1, 10628], [1, 10630], [1, 10632], [1, 10634], [1, 10636], [1, 10638], [1, 10640], [1, 10642], [1, 10644], [1, 10646], [1, 10648], [1, 10650], [1, 10652], [1, 10654], [1, 10656], [1, 10658], [1, 10660], [1, 10662], [1, 10664], [1, 10666], [1, 10668], [1, 10670], [1, 10672], [1, 10674], [1, 10676], [1, 10678], [1, 10680], [1, 10682], [1, 10684], [1, 10686], [1, 10688], [1, 10690], [1, 10692], [1, 10694], [1, 10696], [1, 10698], [1, 10700], [1, 10702], [1, 10704], [1, 10706], [1, 10708], [1, 10710], [1, 10712], [1, 10714], [1, 10716], [1, 10718], [1, 10720], [1, 10722], [1, 10724], [1, 10726], [1, 10728], [1, 10730], [1, 10732], [1, 10734], [1, 10736], [1, 10738], [1, 10740], [1, 10742], [1, 10744], [1, 10746], [1, 10748], [1, 10750], [1, 10752], [1, 10754], [1, 10756], [1, 10758], [1, 10760], [1, 10762], [1, 10764], [1, 10766], [1, 10768], [1, 10770], [1, 10772], [1, 10774], [1, 10776], [1, 10778], [1, 10780], [1, 10782], [1, 10784], [1, 10786], [1, 10788], [1, 10790], [1, 10792], [1, 10794], [1, 10796], [1, 10798], [1, 10800], [1, 10802], [1, 10804], [1, 10806], [1, 10808], [1, 10810], [1, 10812], [1, 10814], [1, 10816], [1, 10818], [1, 10820], [1, 10822], [1, 10824], [1, 10826], [1, 10828], [1, 10830], [1, 10832], [1, 10834], [1, 10836], [1, 10838], [1, 10840], [1, 10842], [1, 10844], [1, 10846], [1, 10848], [1, 10850], [1, 10852], [1, 10854], [1, 10856], [1, 10858], [1, 10860], [1, 10862], [1, 10864], [1, 10866], [1, 10868], [1, 10870], [1, 10872], [1, 10874], [1, 10876], [1, 10878], [1, 10880], [1, 10882], [1, 10884], [1, 10886], [1, 10888], [1, 10890], [1, 10892], [1, 10894], [1, 10896], [1, 10898], [1, 10900], [1, 10902], [1, 10904], [1, 10906], [1, 10908], [1, 10910], [1, 10912], [1, 10914], [1, 10916], [1, 10918], [1, 10920], [1, 10922], [1, 10924], [1, 10926], [1, 10928], [1, 10930], [1, 10932], [1, 10934], [1, 10936], [1, 10938], [1, 10940], [1, 10942], [1, 10944], [1, 10946], [1, 10948], [1, 10950], [1, 10952], [1, 10954], [1, 10956], [1, 10958], [1, 10960], [1, 10962], [1, 10964], [1, 10966], [1, 10968], [1, 10970], [1, 10972], [1, 10974], [1, 10976], [1, 10978], [1, 10980], [1, 10982], [1, 10984], [1, 10986], [1, 10988], [1, 10990], [1, 10992], [1, 10994], [1, 10996], [1, 10998], [1, 11000], [1, 11002], [1, 11004], [1, 11006], [1, 11008], [1, 11010], [1, 11012], [1, 11014], [1, 11016], [1, 11018], [1, 11020], [1, 11022], [1, 11024], [1, 11026], [1, 11028], [1, 11030], [1, 11032], [1, 11034], [1, 11036], [1, 11038], [1, 11040], [1, 11042], [1, 11044], [1, 11046], [1, 11048], [1, 11050], [1, 11052], [1, 11054], [1, 11056], [1, 11058], [1, 11060], [1, 11062], [1, 11064], [1, 11066], [1, 11068], [1, 11070], [1, 11072], [1, 11074], [1, 11076], [1, 11078], [1, 11080], [1, 11082], [1, 11084], [1, 11086], [1, 11088], [1, 11090], [1, 11092], [1, 11094], [1, 11096], [1, 11098], [1, 11100], [1, 11102], [1, 11104], [1, 11106], [1, 11108], [1, 11110], [1, 11112], [1, 11114], [1, 11116], [1, 11118], [1, 11120], [1, 11122], [1, 11124], [1, 11126], [1, 11128], [1, 11130], [1, 11132], [1, 11134], [1, 11136], [1, 11138], [1, 11140], [1, 11142], [1, 11144], [1, 11146], [1, 11148], [1, 11150], [1, 11152], [1, 11154], [1, 11156], [1, 11158], [1, 11160], [1, 11162], [1, 11164], [1, 11166], [1, 11168], [1, 11170], [1, 11172], [1, 11174], [1, 11176], [1, 11178], [1, 11180], [1, 11182], [1, 11184], [1, 11186], [1, 11188], [1, 11190], [1, 11192], [1, 11194], [1, 11196], [1, 11198], [1, 11200], [1, 11202], [1, 11204], [1, 11206], [1, 11208], [1, 11210], [1, 11212], [1, 11214], [1, 11216], [1, 11218], [1, 11220], [1, 11222], [1, 11224], [1, 11226], [1, 11228], [1, 11230], [1, 11232], [1, 11234], [1, 11236], [1, 11238], [1, 11240], [1, 11242], [1, 11244], [1, 11246], [1, 11248], [1, 11250], [1, 11252], [1, 11254], [1, 11256], [1, 11258], [1, 11260], [1, 11262], [1, 11264], [1, 11266], [1, 11268], [1, 11270], [1, 11272], [1, 11274], [1, 11276], [1, 11278], [1, 11280], [1, 11282], [1, 11284], [1, 11286], [1, 11288], [1, 11290], [1, 11292], [1, 11294], [1, 11296], [1, 11298], [1, 11300], [1, 11302], [1, 11304], [1, 11306], [1, 11308], [1, 11310], [1, 11312], [1, 11314], [1, 11316], [1, 11318], [1, 11320], [1, 11322], [1, 11324], [1, 11326], [1, 11328], [1, 11330], [1, 11332], [1, 11334], [1, 11336], [1, 11338], [1, 11340], [1, 11342], [1, 11344], [1, 11346], [1, 11348], [1, 11350], [1, 11352], [1, 11354], [1, 11356], [1, 11358], [1, 11360], [1, 11362], [1, 11364], [1, 11366], [1, 11368], [1, 11370], [1, 11372], [1, 11374], [1, 11376], [1, 11378], [1, 11380], [1, 11382], [1, 11384], [1, 11386], [1, 11388], [1, 11390], [1, 11392], [1, 11394], [1, 11396], [1, 11398], [1, 11400], [1, 11402], [1, 11404], [1, 11406], [1, 11408], [1, 11410], [1, 11412], [1, 11414], [1, 11416], [1, 11418], [1, 11420], [1, 11422], [1, 11424], [1, 11426], [1, 11428], [1, 11430], [1, 11432], [1, 11434], [1, 11436], [1, 11438], [1, 11440], [1, 11442], [1, 11444], [1, 11446], [1, 11448], [1, 11450], [1, 11452], [1, 11454], [1, 11456], [1, 11458], [1, 11460], [1, 11462], [1, 11464], [1, 11466], [1, 11468], [1, 11470], [1, 11472], [1, 11474], [1, 11476], [1, 11478], [1, 11480], [1, 11482], [1, 11484], [1, 11486], [1, 11488], [1, 11490], [1, 11492], [1, 11494], [1, 11496], [1, 11498], [1, 11500], [1, 11502], [1, 11504], [1, 11506], [1, 11508], [1, 11510], [1, 11512], [1, 11514], [1, 11516], [1, 11518], [1, 11520], [1, 11522], [1, 11524], [1, 11526], [1, 11528], [1, 11530], [1, 11532], [1, 11534], [1, 11536], [1, 11538], [1, 11540], [1, 11542], [1, 11544], [1, 11546], [1, 11548], [1, 11550], [1, 11552], [1, 11554], [1, 11556], [1, 11558], [1, 11560], [1, 11562], [1, 11564], [1, 11566], [1, 11568], [1, 11570], [1, 11572], [1, 11574], [1, 11576], [1, 11578], [1, 11580], [1, 11582], [1, 11584], [1, 11586], [1, 11588], [1, 11590], [1, 11592], [1, 11594], [1, 11596], [1, 11598], [1, 11600], [1, 11602], [1, 11604], [1, 11606], [1, 11608], [1, 11610], [1, 11612], [1, 11614], [1, 11616], [1, 11618], [1, 11620], [1, 11622], [1, 11624], [1, 11626], [1, 11628], [1, 11630], [1, 11632], [1, 11634], [1, 11636], [1, 11638], [1, 11640], [1, 11642], [1, 11644], [1, 11646], [1, 11648], [1, 11650], [1, 11652], [1, 11654], [1, 11656], [1, 11658], [1, 11660], [1, 11662], [1, 11664], [1, 11666], [1, 11668], [1, 11670], [1, 11672], [1, 11674], [1, 11676], [1, 11678], [1, 11680], [1, 11682], [1, 11684], [1, 11686], [1, 11688], [1, 11690], [1, 11692], [1, 11694], [1, 11696], [1, 11698], [1, 11700], [1, 11702], [1, 11704], [1, 11706], [1, 11708], [1, 11710], [1, 11712], [1, 11714], [1, 11716], [1, 11718], [1, 11720], [1, 11722], [1, 11724], [1, 11726], [1, 11728], [1, 11730], [1, 11732], [1, 11734], [1, 11736], [1, 11738], [1, 11740], [1, 11742], [1, 11744], [1, 11746], [1, 11748], [1, 11750], [1, 11752], [1, 11754], [1, 11756], [1, 11758], [1, 11760], [1, 11762], [1, 11764], [1, 11766], [1, 11768], [1, 11770], [1, 11772], [1, 11774], [1, 11776], [1, 11778], [1, 11780], [1, 11782], [1, 11784], [1, 11786], [1, 11788], [1, 11790], [1, 11792], [1, 11794], [1, 11796], [1, 11798], [1, 11800], [1, 11802], [1, 11804], [1, 11806], [1, 11808], [1, 11810], [1, 11812], [1, 11814], [1, 11816], [1, 11818], [1, 11820], [1, 11822], [1, 11824], [1, 11826], [1, 11828], [1, 11830], [1, 11832], [1, 11834], [1, 11836], [1, 11838], [1, 11840], [1, 11842], [1, 11844], [1, 11846], [1, 11848], [1, 11850], [1, 11852], [1, 11854], [1, 11856], [1, 11858], [1, 11860], [1, 11862], [1, 11864], [1, 11866], [1, 11868], [1, 11870], [1, 11872], [1, 11874], [1, 11876], [1, 11878], [1, 11880], [1, 11882], [1, 11884], [1, 11886], [1, 11888], [1, 11890], [1, 11892], [1, 11894], [1, 11896], [1, 11898], [1, 11900], [1, 11902], [1, 11904], [1, 11906], [1, 11908], [1, 11910], [1, 11912], [1, 11914], [1, 11916], [1, 11918], [1, 11920], [1, 11922], [1, 11924], [1, 11926], [1, 11928], [1, 11930], [1, 11932], [1, 11934], [1, 11936], [1, 11938], [1, 11940], [1, 11942], [1, 11944], [1, 11946], [1, 11948], [1, 11950], [1, 11952], [1, 11954], [1, 11956], [1, 11958], [1, 11960], [1, 11962], [1, 11964], [1, 11966], [1, 11968], [1, 11970], [1, 11972], [1, 11974], [1, 11976], [1, 11978], [1, 11980], [1, 11982], [1, 11984], [1, 11986], [1, 11988], [1, 11990], [1, 11992], [1, 11994], [1, 11996], [1, 11998], [1, 12000], [1, 12002], [1, 12004], [1, 12006], [1, 12008], [1, 12010], [1, 12012], [1, 12014], [1, 12016], [1, 12018], [1, 12020], [1, 12022], [1, 12024], [1, 12026], [1, 12028], [1, 12030], [1, 12032], [1, 12034], [1, 12036], [1, 12038], [1, 12040], [1, 12042], [1, 12044], [1, 12046], [1, 12048], [1, 12050], [1, 12052], [1, 12054], [1, 12056], [1, 12058], [1, 12060], [1, 12062], [1, 12064], [1, 12066], [1, 12068], [1, 12070], [1, 12072], [1, 12074], [1, 12076], [1, 12078], [1, 12080], [1, 12082], [1, 12084], [1, 12086], [1, 12088], [1, 12090], [1, 12092], [1, 12094], [1, 12096], [1, 12098], [1, 12100], [1, 12102], [1, 12104], [1, 12106], [1, 12108], [1, 12110], [1, 12112], [1, 12114], [1, 12116], [1, 12118], [1, 12120], [1, 12122], [1, 12124], [1, 12126], [1, 12128], [1, 12130], [1, 12132], [1, 12134], [1, 12136], [1, 12138], [1, 12140], [1, 12142], [1, 12144], [1, 12146], [1, 12148], [1, 12150], [1, 12152], [1, 12154], [1, 12156], [1, 12158], [1, 12160], [1, 12162], [1, 12164], [1, 12166], [1, 12168], [1, 12170], [1, 12172], [1, 12174], [1, 12176], [1, 12178], [1, 12180], [1, 12182], [1, 12184], [1, 12186], [1, 12188], [1, 12190], [1, 12192], [1, 12194], [1, 12196], [1, 12198], [1, 12200], [1, 12202], [1, 12204], [1, 12206], [1, 12208], [1, 12210], [1, 12212], [1, 12214], [1, 12216], [1, 12218], [1, 12220], [1, 12222], [1, 12224], [1, 12226], [1, 12228], [1, 12230], [1, 12232], [1, 12234], [1, 12236], [1, 12238], [1, 12240], [1, 12242], [1, 12244], [1, 12246], [1, 12248], [1, 12250], [1, 12252], [1, 12254], [1, 12256], [1, 12258], [1, 12260], [1, 12262], [1, 12264], [1, 12266], [1, 12268], [1, 12270], [1, 12272], [1, 12274], [1, 12276], [1, 12278], [1, 12280], [1, 12282], [1, 12284], [1, 12286], [1, 12288], [1, 12290], [1, 12292], [1, 12294], [1, 12296], [1, 12298], [1, 12300], [1, 12302], [1, 12304], [1, 12306], [1, 12308], [1, 12310], [1, 12312], [1, 12314], [1, 12316], [1, 12318], [1, 12320], [1, 12322], [1, 12324], [1, 12326], [1, 12328], [1, 12330], [1, 12332], [1, 12334], [1, 12336], [1, 12338], [1, 12340], [1, 12342], [1, 12344], [1, 12346], [1, 12348], [1, 12350], [1, 12352], [1, 12354], [1, 12356], [1, 12358], [1, 12360], [1, 12362], [1, 12364], [1, 12366], [1, 12368], [1, 12370], [1, 12372], [1, 12374], [1, 12376], [1, 12378], [1, 12380], [1, 12382], [1, 12384], [1, 12386], [1, 12388], [1, 12390], [1, 12392], [1, 12394], [1, 12396], [1, 12398], [1, 12400], [1, 12402], [1, 12404], [1, 12406], [1, 12408], [1, 12410], [1, 12412], [1, 12414], [1, 12416], [1, 12418], [1, 12420], [1, 12422], [1, 12424], [1, 12426], [1, 12428], [1, 12430], [1, 12432], [1, 12434], [1, 12436], [1, 12438], [1, 12440], [1, 12442], [1, 12444], [1, 12446], [1, 12448], [1, 12450], [1, 12452], [1, 12454], [1, 12456], [1, 12458], [1, 12460], [1, 12462], [1, 12464], [1, 12466], [1, 12468], [1, 12470], [1, 12472], [1, 12474], [1, 12476], [1, 12478], [1, 12480], [1, 12482], [1, 12484], [1, 12486], [1, 12488], [1, 12490], [1, 12492], [1, 12494], [1, 12496], [1, 12498], [1, 12500], [1, 12502], [1, 12504], [1, 12506], [1, 12508], [1, 12510], [1, 12512], [1, 12514], [1, 12516], [1, 12518], [1, 12520], [1, 12522], [1, 12524], [1, 12526], [1, 12528], [1, 12530], [1, 12532], [1, 12534], [1, 12536], [1, 12538], [1, 12540], [1, 12542], [1, 12544], [1, 12546], [1, 12548], [1, 12550], [1, 12552], [1, 12554], [1, 12556], [1, 12558], [1, 12560], [1, 12562], [1, 12564], [1, 12566], [1, 12568], [1, 12570], [1, 12572], [1, 12574], [1, 12576], [1, 12578], [1, 12580], [1, 12582], [1, 12584], [1, 12586], [1, 12588], [1, 12590], [1, 12592], [1, 12594], [1, 12596], [1, 12598], [1, 12600], [1, 12602], [1, 12604], [1, 12606], [1, 12608], [1, 12610], [1, 12612], [1, 12614], [1, 12616], [1, 12618], [1, 12620], [1, 12622], [1, 12624], [1, 12626], [1, 12628], [1, 12630], [1, 12632], [1, 12634], [1, 12636], [1, 12638], [1, 12640], [1, 12642], [1, 12644], [1, 12646], [1, 12648], [1, 12650], [1, 12652], [1, 12654], [1, 12656], [1, 12658], [1, 12660], [1, 12662], [1, 12664], [1, 12666], [1, 12668], [1, 12670], [1, 12672], [1, 12674], [1, 12676], [1, 12678], [1, 12680], [1, 12682], [1, 12684], [1, 12686], [1, 12688], [1, 12690], [1, 12692], [1, 12694], [1, 12696], [1, 12698], [1, 12700], [1, 12702], [1, 12704], [1, 12706], [1, 12708], [1, 12710], [1, 12712], [1, 12714], [1, 12716], [1, 12718], [1, 12720], [1, 12722], [1, 12724], [1, 12726], [1, 12728], [1, 12730], [1, 12732], [1, 12734], [1, 12736], [1, 12738], [1, 12740], [1, 12742], [1, 12744], [1, 12746], [1, 12748], [1, 12750], [1, 12752], [1, 12754], [1, 12756], [1, 12758], [1, 12760], [1, 12762], [1, 12764], [1, 12766], [1, 12768], [1, 12770], [1, 12772], [1, 12774], [1, 12776], [1, 12778], [1, 12780], [1, 12782], [1, 12784], [1, 12786], [1, 12788], [1, 12790], [1, 12792], [1, 12794], [1, 12796], [1, 12798], [1, 12800], [1, 12802], [1, 12804], [1, 12806], [1, 12808], [1, 12810], [1, 12812], [1, 12814], [1, 12816], [1, 12818], [1, 12820], [1, 12822], [1, 12824], [1, 12826], [1, 12828], [1, 12830], [1, 12832], [1, 12834], [1, 12836], [1, 12838], [1, 12840], [1, 12842], [1, 12844], [1, 12846], [1, 12848], [1, 12850], [1, 12852], [1, 12854], [1, 12856], [1, 12858], [1, 12860], [1, 12862], [1, 12864], [1, 12866], [1, 12868], [1, 12870], [1, 12872], [1, 12874], [1, 12876], [1, 12878], [1, 12880], [1, 12882], [1, 12884], [1, 12886], [1, 12888], [1, 12890], [1, 12892], [1, 12894], [1, 12896], [1, 12898], [1, 12900], [1, 12902], [1, 12904], [1, 12906], [1, 12908], [1, 12910], [1, 12912], [1, 12914], [1, 12916], [1, 12918], [1, 12920], [1, 12922], [1, 12924], [1, 12926], [1, 12928], [1, 12930], [1, 12932], [1, 12934], [1, 12936], [1, 12938], [1, 12940], [1, 12942], [1, 12944], [1, 12946], [1, 12948], [1, 12950], [1, 12952], [1, 12954], [1, 12956], [1, 12958], [1, 12960], [1, 12962], [1, 12964], [1, 12966], [1, 12968], [1, 12970], [1, 12972], [1, 12974], [1, 12976], [1, 12978], [1, 12980], [1, 12982], [1, 12984], [1, 12986], [1, 12988], [1, 12990], [1, 12992], [1, 12994], [1, 12996], [1, 12998], [1, 13000], [1, 13002], [1, 13004], [1, 13006], [1, 13008], [1, 13010], [1, 13012], [1, 13014], [1, 13016], [1, 13018], [1, 13020], [1, 13022], [1, 13024], [1, 13026], [1, 13028], [1, 13030], [1, 13032], [1, 13034], [1, 13036], [1, 13038], [1, 13040], [1, 13042], [1, 13044], [1, 13046], [1, 13048], [1, 13050], [1, 13052], [1, 13054], [1, 13056], [1, 13058], [1, 13060], [1, 13062], [1, 13064], [1, 13066], [1, 13068], [1, 13070], [1, 13072], [1, 13074], [1, 13076], [1, 13078], [1, 13080], [1, 13082], [1, 13084], [1, 13086], [1, 13088], [1, 13090], [1, 13092], [1, 13094], [1, 13096], [1, 13098], [1, 13100], [1, 13102], [1, 13104], [1, 13106], [1, 13108], [1, 13110], [1, 13112], [1, 13114], [1, 13116], [1, 13118], [1, 13120], [1, 13122], [1, 13124], [1, 13126], [1, 13128], [1, 13130], [1, 13132], [1, 13134], [1, 13136], [1, 13138], [1, 13140], [1, 13142], [1, 13144], [1, 13146], [1, 13148], [1, 13150], [1, 13152], [1, 13154], [1, 13156], [1, 13158], [1, 13160], [1, 13162], [1, 13164], [1, 13166], [1, 13168], [1, 13170], [1, 13172], [1, 13174], [1, 13176], [1, 13178], [1, 13180], [1, 13182], [1, 13184], [1, 13186], [1, 13188], [1, 13190], [1, 13192], [1, 13194], [1, 13196], [1, 13198], [1, 13200], [1, 13202], [1, 13204], [1, 13206], [1, 13208], [1, 13210], [1, 13212], [1, 13214], [1, 13216], [1, 13218], [1, 13220], [1, 13222], [1, 13224], [1, 13226], [1, 13228], [1, 13230], [1, 13232], [1, 13234], [1, 13236], [1, 13238], [1, 13240], [1, 13242], [1, 13244], [1, 13246], [1, 13248], [1, 13250], [1, 13252], [1, 13254], [1, 13256], [1, 13258], [1, 13260], [1, 13262], [1, 13264], [1, 13266], [1, 13268], [1, 13270], [1, 13272], [1, 13274], [1, 13276], [1, 13278], [1, 13280], [1, 13282], [1, 13284], [1, 13286], [1, 13288], [1, 13290], [1, 13292], [1, 13294], [1, 13296], [1, 13298], [1, 13300], [1, 13302], [1, 13304], [1, 13306], [1, 13308], [1, 13310], [1, 13312], [1, 13314], [1, 13316], [1, 13318], [1, 13320], [1, 13322], [1, 13324], [1, 13326], [1, 13328], [1, 13330], [1, 13332], [1, 13334], [1, 13336], [1, 13338], [1, 13340], [1, 13342], [1, 13344], [1, 13346], [1, 13348], [1, 13350], [1, 13352], [1, 13354], [1, 13356], [1, 13358], [1, 13360], [1, 13362], [1, 13364], [1, 13366], [1, 13368], [1, 13370], [1, 13372], [1, 13374], [1, 13376], [1, 13378], [1, 13380], [1, 13382], [1, 13384], [1, 13386], [1, 13388], [1, 13390], [1, 13392], [1, 13394], [1, 13396], [1, 13398], [1, 13400], [1, 13402], [1, 13404], [1, 13406], [1, 13408], [1, 13410], [1, 13412], [1, 13414], [1, 13416], [1, 13418], [1, 13420], [1, 13422], [1, 13424], [1, 13426], [1, 13428], [1, 13430], [1, 13432], [1, 13434], [1, 13436], [1, 13438], [1, 13440], [1, 13442], [1, 13444], [1, 13446], [1, 13448], [1, 13450], [1, 13452], [1, 13454], [1, 13456], [1, 13458], [1, 13460], [1, 13462], [1, 13464], [1, 13466], [1, 13468], [1, 13470], [1, 13472], [1, 13474], [1, 13476], [1, 13478], [1, 13480], [1, 13482], [1, 13484], [1, 13486], [1, 13488], [1, 13490], [1, 13492], [1, 13494], [1, 13496], [1, 13498], [1, 13500], [1, 13502], [1, 13504], [1, 13506], [1, 13508], [1, 13510], [1, 13512], [1, 13514], [1, 13516], [1, 13518], [1, 13520], [1, 13522], [1, 13524], [1, 13526], [1, 13528], [1, 13530], [1, 13532], [1, 13534], [1, 13536], [1, 13538], [1, 13540], [1, 13542], [1, 13544], [1, 13546], [1, 13548], [1, 13550], [1, 13552], [1, 13554], [1, 13556], [1, 13558], [1, 13560], [1, 13562], [1, 13564], [1, 13566], [1, 13568], [1, 13570], [1, 13572], [1, 13574], [1, 13576], [1, 13578], [1, 13580], [1, 13582], [1, 13584], [1, 13586], [1, 13588], [1, 13590], [1, 13592], [1, 13594], [1, 13596], [1, 13598], [1, 13600], [1, 13602], [1, 13604], [1, 13606], [1, 13608], [1, 13610], [1, 13612], [1, 13614], [1, 13616], [1, 13618], [1, 13620], [1, 13622], [1, 13624], [1, 13626], [1, 13628], [1, 13630], [1, 13632], [1, 13634], [1, 13636], [1, 13638], [1, 13640], [1, 13642], [1, 13644], [1, 13646], [1, 13648], [1, 13650], [1, 13652], [1, 13654], [1, 13656], [1, 13658], [1, 13660], [1, 13662], [1, 13664], [1, 13666], [1, 13668], [1, 13670], [1, 13672], [1, 13674], [1, 13676], [1, 13678], [1, 13680], [1, 13682], [1, 13684], [1, 13686], [1, 13688], [1, 13690], [1, 13692], [1, 13694], [1, 13696], [1, 13698], [1, 13700], [1, 13702], [1, 13704], [1, 13706], [1, 13708], [1, 13710], [1, 13712], [1, 13714], [1, 13716], [1, 13718], [1, 13720], [1, 13722], [1, 13724], [1, 13726], [1, 13728], [1, 13730], [1, 13732], [1, 13734], [1, 13736], [1, 13738], [1, 13740], [1, 13742], [1, 13744], [1, 13746], [1, 13748], [1, 13750], [1, 13752], [1, 13754], [1, 13756], [1, 13758], [1, 13760], [1, 13762], [1, 13764], [1, 13766], [1, 13768], [1, 13770], [1, 13772], [1, 13774], [1, 13776], [1, 13778], [1, 13780], [1, 13782], [1, 13784], [1, 13786], [1, 13788], [1, 13790], [1, 13792], [1, 13794], [1, 13796], [1, 13798], [1, 13800], [1, 13802], [1, 13804], [1, 13806], [1, 13808], [1, 13810], [1, 13812], [1, 13814], [1, 13816], [1, 13818], [1, 13820], [1, 13822], [1, 13824], [1, 13826], [1, 13828], [1, 13830], [1, 13832], [1, 13834], [1, 13836], [1, 13838], [1, 13840], [1, 13842], [1, 13844], [1, 13846], [1, 13848], [1, 13850], [1, 13852], [1, 13854], [1, 13856], [1, 13858], [1, 13860], [1, 13862], [1, 13864], [1, 13866], [1, 13868], [1, 13870], [1, 13872], [1, 13874], [1, 13876], [1, 13878], [1, 13880], [1, 13882], [1, 13884], [1, 13886], [1, 13888], [1, 13890], [1, 13892], [1, 13894], [1, 13896], [1, 13898], [1, 13900], [1, 13902], [1, 13904], [1, 13906], [1, 13908], [1, 13910], [1, 13912], [1, 13914], [1, 13916], [1, 13918], [1, 13920], [1, 13922], [1, 13924], [1, 13926], [1, 13928], [1, 13930], [1, 13932], [1, 13934], [1, 13936], [1, 13938], [1, 13940], [1, 13942], [1, 13944], [1, 13946], [1, 13948], [1, 13950], [1, 13952], [1, 13954], [1, 13956], [1, 13958], [1, 13960], [1, 13962], [1, 13964], [1, 13966], [1, 13968], [1, 13970], [1, 13972], [1, 13974], [1, 13976], [1, 13978], [1, 13980], [1, 13982], [1, 13984], [1, 13986], [1, 13988], [1, 13990], [1, 13992], [1, 13994], [1, 13996], [1, 13998], [1, 14000], [1, 14002], [1, 14004], [1, 14006], [1, 14008], [1, 14010], [1, 14012], [1, 14014], [1, 14016], [1, 14018], [1, 14020], [1, 14022], [1, 14024], [1, 14026], [1, 14028], [1, 14030], [1, 14032], [1, 14034], [1, 14036], [1, 14038], [1, 14040], [1, 14042], [1, 14044], [1, 14046], [1, 14048], [1, 14050], [1, 14052], [1, 14054], [1, 14056], [1, 14058], [1, 14060], [1, 14062], [1, 14064], [1, 14066], [1, 14068], [1, 14070], [1, 14072], [1, 14074], [1, 14076], [1, 14078], [1, 14080], [1, 14082], [1, 14084], [1, 14086], [1, 14088], [1, 14090], [1, 14092], [1, 14094], [1, 14096], [1, 14098], [1, 14100], [1, 14102], [1, 14104], [1, 14106], [1, 14108], [1, 14110], [1, 14112], [1, 14114], [1, 14116], [1, 14118], [1, 14120], [1, 14122], [1, 14124], [1, 14126], [1, 14128], [1, 14130], [1, 14132], [1, 14134], [1, 14136], [1, 14138], [1, 14140], [1, 14142], [1, 14144], [1, 14146], [1, 14148], [1, 14150], [1, 14152], [1, 14154], [1, 14156], [1, 14158], [1, 14160], [1, 14162], [1, 14164], [1, 14166], [1, 14168], [1, 14170], [1, 14172], [1, 14174], [1, 14176], [1, 14178], [1, 14180], [1, 14182], [1, 14184], [1, 14186], [1, 14188], [1, 14190], [1, 14192], [1, 14194], [1, 14196], [1, 14198], [1, 14200], [1, 14202], [1, 14204], [1, 14206], [1, 14208], [1, 14210], [1, 14212], [1, 14214], [1, 14216], [1, 14218], [1, 14220], [1, 14222], [1, 14224], [1, 14226], [1, 14228], [1, 14230], [1, 14232], [1, 14234], [1, 14236], [1, 14238], [1, 14240], [1, 14242], [1, 14244], [1, 14246], [1, 14248], [1, 14250], [1, 14252], [1, 14254], [1, 14256], [1, 14258], [1, 14260], [1, 14262], [1, 14264], [1, 14266], [1, 14268], [1, 14270], [1, 14272], [1, 14274], [1, 14276], [1, 14278], [1, 14280], [1, 14282], [1, 14284], [1, 14286], [1, 14288], [1, 14290], [1, 14292], [1, 14294], [1, 14296], [1, 14298], [1, 14300], [1, 14302], [1, 14304], [1, 14306], [1, 14308], [1, 14310], [1, 14312], [1, 14314], [1, 14316], [1, 14318], [1, 14320], [1, 14322], [1, 14324], [1, 14326], [1, 14328], [1, 14330], [1, 14332], [1, 14334], [1, 14336], [1, 14338], [1, 14340], [1, 14342], [1, 14344], [1, 14346], [1, 14348], [1, 14350], [1, 14352], [1, 14354], [1, 14356], [1, 14358], [1, 14360], [1, 14362], [1, 14364], [1, 14366], [1, 14368], [1, 14370], [1, 14372], [1, 14374], [1, 14376], [1, 14378], [1, 14380], [1, 14382], [1, 14384], [1, 14386], [1, 14388], [1, 14390], [1, 14392], [1, 14394], [1, 14396], [1, 14398], [1, 14400], [1, 14402], [1, 14404], [1, 14406], [1, 14408], [1, 14410], [1, 14412], [1, 14414], [1, 14416], [1, 14418], [1, 14420], [1, 14422], [1, 14424], [1, 14426], [1, 14428], [1, 14430], [1, 14432], [1, 14434], [1, 14436], [1, 14438], [1, 14440], [1, 14442], [1, 14444], [1, 14446], [1, 14448], [1, 14450], [1, 14452], [1, 14454], [1, 14456], [1, 14458], [1, 14460], [1, 14462], [1, 14464], [1, 14466], [1, 14468], [1, 14470], [1, 14472], [1, 14474], [1, 14476], [1, 14478], [1, 14480], [1, 14482], [1, 14484], [1, 14486], [1, 14488], [1, 14490], [1, 14492], [1, 14494], [1, 14496], [1, 14498], [1, 14500], [1, 14502], [1, 14504], [1, 14506], [1, 14508], [1, 14510], [1, 14512], [1, 14514], [1, 14516], [1, 14518], [1, 14520], [1, 14522], [1, 14524], [1, 14526], [1, 14528], [1, 14530], [1, 14532], [1, 14534], [1, 14536], [1, 14538], [1, 14540], [1, 14542], [1, 14544], [1, 14546], [1, 14548], [1, 14550], [1, 14552], [1, 14554], [1, 14556], [1, 14558], [1, 14560], [1, 14562], [1, 14564], [1, 14566], [1, 14568], [1, 14570], [1, 14572], [1, 14574], [1, 14576], [1, 14578], [1, 14580], [1, 14582], [1, 14584], [1, 14586], [1, 14588], [1, 14590], [1, 14592], [1, 14594], [1, 14596], [1, 14598], [1, 14600], [1, 14602], [1, 14604], [1, 14606], [1, 14608], [1, 14610], [1, 14612], [1, 14614], [1, 14616], [1, 14618], [1, 14620], [1, 14622], [1, 14624], [1, 14626], [1, 14628], [1, 14630], [1, 14632], [1, 14634], [1, 14636], [1, 14638], [1, 14640], [1, 14642], [1, 14644], [1, 14646], [1, 14648], [1, 14650], [1, 14652], [1, 14654], [1, 14656], [1, 14658], [1, 14660], [1, 14662], [1, 14664], [1, 14666], [1, 14668], [1, 14670], [1, 14672], [1, 14674], [1, 14676], [1, 14678], [1, 14680], [1, 14682], [1, 14684], [1, 14686], [1, 14688], [1, 14690], [1, 14692], [1, 14694], [1, 14696], [1, 14698], [1, 14700], [1, 14702], [1, 14704], [1, 14706], [1, 14708], [1, 14710], [1, 14712], [1, 14714], [1, 14716], [1, 14718], [1, 14720], [1, 14722], [1, 14724], [1, 14726], [1, 14728], [1, 14730], [1, 14732], [1, 14734], [1, 14736], [1, 14738], [1, 14740], [1, 14742], [1, 14744], [1, 14746], [1, 14748], [1, 14750], [1, 14752], [1, 14754], [1, 14756], [1, 14758], [1, 14760], [1, 14762], [1, 14764], [1, 14766], [1, 14768], [1, 14770], [1, 14772], [1, 14774], [1, 14776], [1, 14778], [1, 14780], [1, 14782], [1, 14784], [1, 14786], [1, 14788], [1, 14790], [1, 14792], [1, 14794], [1, 14796], [1, 14798], [1, 14800], [1, 14802], [1, 14804], [1, 14806], [1, 14808], [1, 14810], [1, 14812], [1, 14814], [1, 14816], [1, 14818], [1, 14820], [1, 14822], [1, 14824], [1, 14826], [1, 14828], [1, 14830], [1, 14832], [1, 14834], [1, 14836], [1, 14838], [1, 14840], [1, 14842], [1, 14844], [1, 14846], [1, 14848], [1, 14850], [1, 14852], [1, 14854], [1, 14856], [1, 14858], [1, 14860], [1, 14862], [1, 14864], [1, 14866], [1, 14868], [1, 14870], [1, 14872], [1, 14874], [1, 14876], [1, 14878], [1, 14880], [1, 14882], [1, 14884], [1, 14886], [1, 14888], [1, 14890], [1, 14892], [1, 14894], [1, 14896], [1, 14898], [1, 14900], [1, 14902], [1, 14904], [1, 14906], [1, 14908], [1, 14910], [1, 14912], [1, 14914], [1, 14916], [1, 14918], [1, 14920], [1, 14922], [1, 14924], [1, 14926], [1, 14928], [1, 14930], [1, 14932], [1, 14934], [1, 14936], [1, 14938], [1, 14940], [1, 14942], [1, 14944], [1, 14946], [1, 14948], [1, 14950], [1, 14952], [1, 14954], [1, 14956], [1, 14958], [1, 14960], [1, 14962], [1, 14964], [1, 14966], [1, 14968], [1, 14970], [1, 14972], [1, 14974], [1, 14976], [1, 14978], [1, 14980], [1, 14982], [1, 14984], [1, 14986], [1, 14988], [1, 14990], [1, 14992], [1, 14994], [1, 14996], [1, 14998], [1, 15000], [1, 15002], [1, 15004], [1, 15006], [1, 15008], [1, 15010], [1, 15012], [1, 15014], [1, 15016], [1, 15018], [1, 15020], [1, 15022], [1, 15024], [1, 15026], [1, 15028], [1, 15030], [1, 15032], [1, 15034], [1, 15036], [1, 15038], [1, 15040], [1, 15042], [1, 15044], [1, 15046], [1, 15048], [1, 15050], [1, 15052], [1, 15054], [1, 15056], [1, 15058], [1, 15060], [1, 15062], [1, 15064], [1, 15066], [1, 15068], [1, 15070], [1, 15072], [1, 15074], [1, 15076], [1, 15078], [1, 15080], [1, 15082], [1, 15084], [1, 15086], [1, 15088], [1, 15090], [1, 15092], [1, 15094], [1, 15096], [1, 15098], [1, 15100], [1, 15102], [1, 15104], [1, 15106], [1, 15108], [1, 15110], [1, 15112], [1, 15114], [1, 15116], [1, 15118], [1, 15120], [1, 15122], [1, 15124], [1, 15126], [1, 15128], [1, 15130], [1, 15132], [1, 15134], [1, 15136], [1, 15138], [1, 15140], [1, 15142], [1, 15144], [1, 15146], [1, 15148], [1, 15150], [1, 15152], [1, 15154], [1, 15156], [1, 15158], [1, 15160], [1, 15162], [1, 15164], [1, 15166], [1, 15168], [1, 15170], [1, 15172], [1, 15174], [1, 15176], [1, 15178], [1, 15180], [1, 15182], [1, 15184], [1, 15186], [1, 15188], [1, 15190], [1, 15192], [1, 15194], [1, 15196], [1, 15198], [1, 15200], [1, 15202], [1, 15204], [1, 15206], [1, 15208], [1, 15210], [1, 15212], [1, 15214], [1, 15216], [1, 15218], [1, 15220], [1, 15222], [1, 15224], [1, 15226], [1, 15228], [1, 15230], [1, 15232], [1, 15234], [1, 15236], [1, 15238], [1, 15240], [1, 15242], [1, 15244], [1, 15246], [1, 15248], [1, 15250], [1, 15252], [1, 15254], [1, 15256], [1, 15258], [1, 15260], [1, 15262], [1, 15264], [1, 15266], [1, 15268], [1, 15270], [1, 15272], [1, 15274], [1, 15276], [1, 15278], [1, 15280], [1, 15282], [1, 15284], [1, 15286], [1, 15288], [1, 15290], [1, 15292], [1, 15294], [1, 15296], [1, 15298], [1, 15300], [1, 15302], [1, 15304], [1, 15306], [1, 15308], [1, 15310], [1, 15312], [1, 15314], [1, 15316], [1, 15318], [1, 15320], [1, 15322], [1, 15324], [1, 15326], [1, 15328], [1, 15330], [1, 15332], [1, 15334], [1, 15336], [1, 15338], [1, 15340], [1, 15342], [1, 15344], [1, 15346], [1, 15348], [1, 15350], [1, 15352], [1, 15354], [1, 15356], [1, 15358], [1, 15360], [1, 15362], [1, 15364], [1, 15366], [1, 15368], [1, 15370], [1, 15372], [1, 15374], [1, 15376], [1, 15378], [1, 15380], [1, 15382], [1, 15384], [1, 15386], [1, 15388], [1, 15390], [1, 15392], [1, 15394], [1, 15396], [1, 15398], [1, 15400], [1, 15402], [1, 15404], [1, 15406], [1, 15408], [1, 15410], [1, 15412], [1, 15414], [1, 15416], [1, 15418], [1, 15420], [1, 15422], [1, 15424], [1, 15426], [1, 15428], [1, 15430], [1, 15432], [1, 15434], [1, 15436], [1, 15438], [1, 15440], [1, 15442], [1, 15444], [1, 15446], [1, 15448], [1, 15450], [1, 15452], [1, 15454], [1, 15456], [1, 15458], [1, 15460], [1, 15462], [1, 15464], [1, 15466], [1, 15468], [1, 15470], [1, 15472], [1, 15474], [1, 15476], [1, 15478], [1, 15480], [1, 15482], [1, 15484], [1, 15486], [1, 15488], [1, 15490], [1, 15492], [1, 15494], [1, 15496], [1, 15498], [1, 15500], [1, 15502], [1, 15504], [1, 15506], [1, 15508], [1, 15510], [1, 15512], [1, 15514], [1, 15516], [1, 15518], [1, 15520], [1, 15522], [1, 15524], [1, 15526], [1, 15528], [1, 15530], [1, 15532], [1, 15534], [1, 15536], [1, 15538], [1, 15540], [1, 15542], [1, 15544], [1, 15546], [1, 15548], [1, 15550], [1, 15552], [1, 15554], [1, 15556], [1, 15558], [1, 15560], [1, 15562], [1, 15564], [1, 15566], [1, 15568], [1, 15570], [1, 15572], [1, 15574], [1, 15576], [1, 15578], [1, 15580], [1, 15582], [1, 15584], [1, 15586], [1, 15588], [1, 15590], [1, 15592], [1, 15594], [1, 15596], [1, 15598], [1, 15600], [1, 15602], [1, 15604], [1, 15606], [1, 15608], [1, 15610], [1, 15612], [1, 15614], [1, 15616], [1, 15618], [1, 15620], [1, 15622], [1, 15624], [1, 15626], [1, 15628], [1, 15630], [1, 15632], [1, 15634], [1, 15636], [1, 15638], [1, 15640], [1, 15642], [1, 15644], [1, 15646], [1, 15648], [1, 15650], [1, 15652], [1, 15654], [1, 15656], [1, 15658], [1, 15660], [1, 15662], [1, 15664], [1, 15666], [1, 15668], [1, 15670], [1, 15672], [1, 15674], [1, 15676], [1, 15678], [1, 15680], [1, 15682], [1, 15684], [1, 15686], [1, 15688], [1, 15690], [1, 15692], [1, 15694], [1, 15696], [1, 15698], [1, 15700], [1, 15702], [1, 15704], [1, 15706], [1, 15708], [1, 15710], [1, 15712], [1, 15714], [1, 15716], [1, 15718], [1, 15720], [1, 15722], [1, 15724], [1, 15726], [1, 15728], [1, 15730], [1, 15732], [1, 15734], [1, 15736], [1, 15738], [1, 15740], [1, 15742], [1, 15744], [1, 15746], [1, 15748], [1, 15750], [1, 15752], [1, 15754], [1, 15756], [1, 15758], [1, 15760], [1, 15762], [1, 15764], [1, 15766], [1, 15768], [1, 15770], [1, 15772], [1, 15774], [1, 15776], [1, 15778], [1, 15780], [1, 15782], [1, 15784], [1, 15786], [1, 15788], [1, 15790], [1, 15792], [1, 15794], [1, 15796], [1, 15798], [1, 15800], [1, 15802], [1, 15804], [1, 15806], [1, 15808], [1, 15810], [1, 15812], [1, 15814], [1, 15816], [1, 15818], [1, 15820], [1, 15822], [1, 15824], [1, 15826], [1, 15828], [1, 15830], [1, 15832], [1, 15834], [1, 15836], [1, 15838], [1, 15840], [1, 15842], [1, 15844], [1, 15846], [1, 15848], [1, 15850], [1, 15852], [1, 15854], [1, 15856], [1, 15858], [1, 15860], [1, 15862], [1, 15864], [1, 15866], [1, 15868], [1, 15870], [1, 15872], [1, 15874], [1, 15876], [1, 15878], [1, 15880], [1, 15882], [1, 15884], [1, 15886], [1, 15888], [1, 15890], [1, 15892], [1, 15894], [1, 15896], [1, 15898], [1, 15900], [1, 15902], [1, 15904], [1, 15906], [1, 15908], [1, 15910], [1, 15912], [1, 15914], [1, 15916], [1, 15918], [1, 15920], [1, 15922], [1, 15924], [1, 15926], [1, 15928], [1, 15930], [1, 15932], [1, 15934], [1, 15936], [1, 15938], [1, 15940], [1, 15942], [1, 15944], [1, 15946], [1, 15948], [1, 15950], [1, 15952], [1, 15954], [1, 15956], [1, 15958], [1, 15960], [1, 15962], [1, 15964], [1, 15966], [1, 15968], [1, 15970], [1, 15972], [1, 15974], [1, 15976], [1, 15978], [1, 15980], [1, 15982], [1, 15984], [1, 15986], [1, 15988], [1, 15990], [1, 15992], [1, 15994], [1, 15996], [1, 15998], [1, 16000], [1, 16002], [1, 16004], [1, 16006], [1, 16008], [1, 16010], [1, 16012], [1, 16014], [1, 16016], [1, 16018], [1, 16020], [1, 16022], [1, 16024], [1, 16026], [1, 16028], [1, 16030], [1, 16032], [1, 16034], [1, 16036], [1, 16038], [1, 16040], [1, 16042], [1, 16044], [1, 16046], [1, 16048], [1, 16050], [1, 16052], [1, 16054], [1, 16056], [1, 16058], [1, 16060], [1, 16062], [1, 16064], [1, 16066], [1, 16068], [1, 16070], [1, 16072], [1, 16074], [1, 16076], [1, 16078], [1, 16080], [1, 16082], [1, 16084], [1, 16086], [1, 16088], [1, 16090], [1, 16092], [1, 16094], [1, 16096], [1, 16098], [1, 16100], [1, 16102], [1, 16104], [1, 16106], [1, 16108], [1, 16110], [1, 16112], [1, 16114], [1, 16116], [1, 16118], [1, 16120], [1, 16122], [1, 16124], [1, 16126], [1, 16128], [1, 16130], [1, 16132], [1, 16134], [1, 16136], [1, 16138], [1, 16140], [1, 16142], [1, 16144], [1, 16146], [1, 16148], [1, 16150], [1, 16152], [1, 16154], [1, 16156], [1, 16158], [1, 16160], [1, 16162], [1, 16164], [1, 16166], [1, 16168], [1, 16170], [1, 16172], [1, 16174], [1, 16176], [1, 16178], [1, 16180], [1, 16182], [1, 16184], [1, 16186], [1, 16188], [1, 16190], [1, 16192], [1, 16194], [1, 16196], [1, 16198], [1, 16200], [1, 16202], [1, 16204], [1, 16206], [1, 16208], [1, 16210], [1, 16212], [1, 16214], [1, 16216], [1, 16218], [1, 16220], [1, 16222], [1, 16224], [1, 16226], [1, 16228], [1, 16230], [1, 16232], [1, 16234], [1, 16236], [1, 16238], [1, 16240], [1, 16242], [1, 16244], [1, 16246], [1, 16248], [1, 16250], [1, 16252], [1, 16254], [1, 16256], [1, 16258], [1, 16260], [1, 16262], [1, 16264], [1, 16266], [1, 16268], [1, 16270], [1, 16272], [1, 16274], [1, 16276], [1, 16278], [1, 16280], [1, 16282], [1, 16284], [1, 16286], [1, 16288], [1, 16290], [1, 16292], [1, 16294], [1, 16296], [1, 16298], [1, 16300], [1, 16302], [1, 16304], [1, 16306], [1, 16308], [1, 16310], [1, 16312], [1, 16314], [1, 16316], [1, 16318], [1, 16320], [1, 16322], [1, 16324], [1, 16326], [1, 16328], [1, 16330], [1, 16332], [1, 16334], [1, 16336], [1, 16338], [1, 16340], [1, 16342], [1, 16344], [1, 16346], [1, 16348], [1, 16350], [1, 16352], [1, 16354], [1, 16356], [1, 16358], [1, 16360], [1, 16362], [1, 16364], [1, 16366], [1, 16368], [1, 16370], [1, 16372], [1, 16374], [1, 16376], [1, 16378], [1, 16380], [1, 16382], [1, 16384], [1, 16386], [1, 16388], [1, 16390], [1, 16392], [1, 16394], [1, 16396], [1, 16398], [1, 16400], [1, 16402], [1, 16404], [1, 16406], [1, 16408], [1, 16410], [1, 16412], [1, 16414], [1, 16416], [1, 16418], [1, 16420], [1, 16422], [1, 16424], [1, 16426], [1, 16428], [1, 16430], [1, 16432], [1, 16434], [1, 16436], [1, 16438], [1, 16440], [1, 16442], [1, 16444], [1, 16446], [1, 16448], [1, 16450], [1, 16452], [1, 16454], [1, 16456], [1, 16458], [1, 16460], [1, 16462], [1, 16464], [1, 16466], [1, 16468], [1, 16470], [1, 16472], [1, 16474], [1, 16476], [1, 16478], [1, 16480], [1, 16482], [1, 16484], [1, 16486], [1, 16488], [1, 16490], [1, 16492], [1, 16494], [1, 16496], [1, 16498], [1, 16500], [1, 16502], [1, 16504], [1, 16506], [1, 16508], [1, 16510], [1, 16512], [1, 16514], [1, 16516], [1, 16518], [1, 16520], [1, 16522], [1, 16524], [1, 16526], [1, 16528], [1, 16530], [1, 16532], [1, 16534], [1, 16536], [1, 16538], [1, 16540], [1, 16542], [1, 16544], [1, 16546], [1, 16548], [1, 16550], [1, 16552], [1, 16554], [1, 16556], [1, 16558], [1, 16560], [1, 16562], [1, 16564], [1, 16566], [1, 16568], [1, 16570], [1, 16572], [1, 16574], [1, 16576], [1, 16578], [1, 16580], [1, 16582], [1, 16584], [1, 16586], [1, 16588], [1, 16590], [1, 16592], [1, 16594], [1, 16596], [1, 16598], [1, 16600], [1, 16602], [1, 16604], [1, 16606], [1, 16608], [1, 16610], [1, 16612], [1, 16614], [1, 16616], [1, 16618], [1, 16620], [1, 16622], [1, 16624], [1, 16626], [1, 16628], [1, 16630], [1, 16632], [1, 16634], [1, 16636], [1, 16638], [1, 16640], [1, 16642], [1, 16644], [1, 16646], [1, 16648], [1, 16650], [1, 16652], [1, 16654], [1, 16656], [1, 16658], [1, 16660], [1, 16662], [1, 16664], [1, 16666], [1, 16668], [1, 16670], [1, 16672], [1, 16674], [1, 16676], [1, 16678], [1, 16680], [1, 16682], [1, 16684], [1, 16686], [1, 16688], [1, 16690], [1, 16692], [1, 16694], [1, 16696], [1, 16698], [1, 16700], [1, 16702], [1, 16704], [1, 16706], [1, 16708], [1, 16710], [1, 16712], [1, 16714], [1, 16716], [1, 16718], [1, 16720], [1, 16722], [1, 16724], [1, 16726], [1, 16728], [1, 16730], [1, 16732], [1, 16734], [1, 16736], [1, 16738], [1, 16740], [1, 16742], [1, 16744], [1, 16746], [1, 16748], [1, 16750], [1, 16752], [1, 16754], [1, 16756], [1, 16758], [1, 16760], [1, 16762], [1, 16764], [1, 16766], [1, 16768], [1, 16770], [1, 16772], [1, 16774], [1, 16776], [1, 16778], [1, 16780], [1, 16782], [1, 16784], [1, 16786], [1, 16788], [1, 16790], [1, 16792], [1, 16794], [1, 16796], [1, 16798], [1, 16800], [1, 16802], [1, 16804], [1, 16806], [1, 16808], [1, 16810], [1, 16812], [1, 16814], [1, 16816], [1, 16818], [1, 16820], [1, 16822], [1, 16824], [1, 16826], [1, 16828], [1, 16830], [1, 16832], [1, 16834], [1, 16836], [1, 16838], [1, 16840], [1, 16842], [1, 16844], [1, 16846], [1, 16848], [1, 16850], [1, 16852], [1, 16854], [1, 16856], [1, 16858], [1, 16860], [1, 16862], [1, 16864], [1, 16866], [1, 16868], [1, 16870], [1, 16872], [1, 16874], [1, 16876], [1, 16878], [1, 16880], [1, 16882], [1, 16884], [1, 16886], [1, 16888], [1, 16890], [1, 16892], [1, 16894], [1, 16896], [1, 16898], [1, 16900], [1, 16902], [1, 16904], [1, 16906], [1, 16908], [1, 16910], [1, 16912], [1, 16914], [1, 16916], [1, 16918], [1, 16920], [1, 16922], [1, 16924], [1, 16926], [1, 16928], [1, 16930], [1, 16932], [1, 16934], [1, 16936], [1, 16938], [1, 16940], [1, 16942], [1, 16944], [1, 16946], [1, 16948], [1, 16950], [1, 16952], [1, 16954], [1, 16956], [1, 16958], [1, 16960], [1, 16962], [1, 16964], [1, 16966], [1, 16968], [1, 16970], [1, 16972], [1, 16974], [1, 16976], [1, 16978], [1, 16980], [1, 16982], [1, 16984], [1, 16986], [1, 16988], [1, 16990], [1, 16992], [1, 16994], [1, 16996], [1, 16998], [1, 17000], [1, 17002], [1, 17004], [1, 17006], [1, 17008], [1, 17010], [1, 17012], [1, 17014], [1, 17016], [1, 17018], [1, 17020], [1, 17022], [1, 17024], [1, 17026], [1, 17028], [1, 17030], [1, 17032], [1, 17034], [1, 17036], [1, 17038], [1, 17040], [1, 17042], [1, 17044], [1, 17046], [1, 17048], [1, 17050], [1, 17052], [1, 17054], [1, 17056], [1, 17058], [1, 17060], [1, 17062], [1, 17064], [1, 17066], [1, 17068], [1, 17070], [1, 17072], [1, 17074], [1, 17076], [1, 17078], [1, 17080], [1, 17082], [1, 17084], [1, 17086], [1, 17088], [1, 17090], [1, 17092], [1, 17094], [1, 17096], [1, 17098], [1, 17100], [1, 17102], [1, 17104], [1, 17106], [1, 17108], [1, 17110], [1, 17112], [1, 17114], [1, 17116], [1, 17118], [1, 17120], [1, 17122], [1, 17124], [1, 17126], [1, 17128], [1, 17130], [1, 17132], [1, 17134], [1, 17136], [1, 17138], [1, 17140], [1, 17142], [1, 17144], [1, 17146], [1, 17148], [1, 17150], [1, 17152], [1, 17154], [1, 17156], [1, 17158], [1, 17160], [1, 17162], [1, 17164], [1, 17166], [1, 17168], [1, 17170], [1, 17172], [1, 17174], [1, 17176], [1, 17178], [1, 17180], [1, 17182], [1, 17184], [1, 17186], [1, 17188], [1, 17190], [1, 17192], [1, 17194], [1, 17196], [1, 17198], [1, 17200], [1, 17202], [1, 17204], [1, 17206], [1, 17208], [1, 17210], [1, 17212], [1, 17214], [1, 17216], [1, 17218], [1, 17220], [1, 17222], [1, 17224], [1, 17226], [1, 17228], [1, 17230], [1, 17232], [1, 17234], [1, 17236], [1, 17238], [1, 17240], [1, 17242], [1, 17244], [1, 17246], [1, 17248], [1, 17250], [1, 17252], [1, 17254], [1, 17256], [1, 17258], [1, 17260], [1, 17262], [1, 17264], [1, 17266], [1, 17268], [1, 17270], [1, 17272], [1, 17274], [1, 17276], [1, 17278], [1, 17280], [1, 17282], [1, 17284], [1, 17286], [1, 17288], [1, 17290], [1, 17292], [1, 17294], [1, 17296], [1, 17298], [1, 17300], [1, 17302], [1, 17304], [1, 17306], [1, 17308], [1, 17310], [1, 17312], [1, 17314], [1, 17316], [1, 17318], [1, 17320], [1, 17322], [1, 17324], [1, 17326], [1, 17328], [1, 17330], [1, 17332], [1, 17334], [1, 17336], [1, 17338], [1, 17340], [1, 17342], [1, 17344], [1, 17346], [1, 17348], [1, 17350], [1, 17352], [1, 17354], [1, 17356], [1, 17358], [1, 17360], [1, 17362], [1, 17364], [1, 17366], [1, 17368], [1, 17370], [1, 17372], [1, 17374], [1, 17376], [1, 17378], [1, 17380], [1, 17382], [1, 17384], [1, 17386], [1, 17388], [1, 17390], [1, 17392], [1, 17394], [1, 17396], [1, 17398], [1, 17400], [1, 17402], [1, 17404], [1, 17406], [1, 17408], [1, 17410], [1, 17412], [1, 17414], [1, 17416], [1, 17418], [1, 17420], [1, 17422], [1, 17424], [1, 17426], [1, 17428], [1, 17430], [1, 17432], [1, 17434], [1, 17436], [1, 17438], [1, 17440], [1, 17442], [1, 17444], [1, 17446], [1, 17448], [1, 17450], [1, 17452], [1, 17454], [1, 17456], [1, 17458], [1, 17460], [1, 17462], [1, 17464], [1, 17466], [1, 17468], [1, 17470], [1, 17472], [1, 17474], [1, 17476], [1, 17478], [1, 17480], [1, 17482], [1, 17484], [1, 17486], [1, 17488], [1, 17490], [1, 17492], [1, 17494], [1, 17496], [1, 17498], [1, 17500], [1, 17502], [1, 17504], [1, 17506], [1, 17508], [1, 17510], [1, 17512], [1, 17514], [1, 17516], [1, 17518], [1, 17520], [1, 17522], [1, 17524], [1, 17526], [1, 17528], [1, 17530], [1, 17532], [1, 17534], [1, 17536], [1, 17538], [1, 17540], [1, 17542], [1, 17544], [1, 17546], [1, 17548], [1, 17550], [1, 17552], [1, 17554], [1, 17556], [1, 17558], [1, 17560], [1, 17562], [1, 17564], [1, 17566], [1, 17568], [1, 17570], [1, 17572], [1, 17574], [1, 17576], [1, 17578], [1, 17580], [1, 17582], [1, 17584], [1, 17586], [1, 17588], [1, 17590], [1, 17592], [1, 17594], [1, 17596], [1, 17598], [1, 17600], [1, 17602], [1, 17604], [1, 17606], [1, 17608], [1, 17610], [1, 17612], [1, 17614], [1, 17616], [1, 17618], [1, 17620], [1, 17622], [1, 17624], [1, 17626], [1, 17628], [1, 17630], [1, 17632], [1, 17634], [1, 17636], [1, 17638], [1, 17640], [1, 17642], [1, 17644], [1, 17646], [1, 17648], [1, 17650], [1, 17652], [1, 17654], [1, 17656], [1, 17658], [1, 17660], [1, 17662], [1, 17664], [1, 17666], [1, 17668], [1, 17670], [1, 17672], [1, 17674], [1, 17676], [1, 17678], [1, 17680], [1, 17682], [1, 17684], [1, 17686], [1, 17688], [1, 17690], [1, 17692], [1, 17694], [1, 17696], [1, 17698], [1, 17700], [1, 17702], [1, 17704], [1, 17706], [1, 17708], [1, 17710], [1, 17712], [1, 17714], [1, 17716], [1, 17718], [1, 17720], [1, 17722], [1, 17724], [1, 17726], [1, 17728], [1, 17730], [1, 17732], [1, 17734], [1, 17736], [1, 17738], [1, 17740], [1, 17742], [1, 17744], [1, 17746], [1, 17748], [1, 17750], [1, 17752], [1, 17754], [1, 17756], [1, 17758], [1, 17760], [1, 17762], [1, 17764], [1, 17766], [1, 17768], [1, 17770], [1, 17772], [1, 17774], [1, 17776], [1, 17778], [1, 17780], [1, 17782], [1, 17784], [1, 17786], [1, 17788], [1, 17790], [1, 17792], [1, 17794], [1, 17796], [1, 17798], [1, 17800], [1, 17802], [1, 17804], [1, 17806], [1, 17808], [1, 17810], [1, 17812], [1, 17814], [1, 17816], [1, 17818], [1, 17820], [1, 17822], [1, 17824], [1, 17826], [1, 17828], [1, 17830], [1, 17832], [1, 17834], [1, 17836], [1, 17838], [1, 17840], [1, 17842], [1, 17844], [1, 17846], [1, 17848], [1, 17850], [1, 17852], [1, 17854], [1, 17856], [1, 17858], [1, 17860], [1, 17862], [1, 17864], [1, 17866], [1, 17868], [1, 17870], [1, 17872], [1, 17874], [1, 17876], [1, 17878], [1, 17880], [1, 17882], [1, 17884], [1, 17886], [1, 17888], [1, 17890], [1, 17892], [1, 17894], [1, 17896], [1, 17898], [1, 17900], [1, 17902], [1, 17904], [1, 17906], [1, 17908], [1, 17910], [1, 17912], [1, 17914], [1, 17916], [1, 17918], [1, 17920], [1, 17922], [1, 17924], [1, 17926], [1, 17928], [1, 17930], [1, 17932], [1, 17934], [1, 17936], [1, 17938], [1, 17940], [1, 17942], [1, 17944], [1, 17946], [1, 17948], [1, 17950], [1, 17952], [1, 17954], [1, 17956], [1, 17958], [1, 17960], [1, 17962], [1, 17964], [1, 17966], [1, 17968], [1, 17970], [1, 17972], [1, 17974], [1, 17976], [1, 17978], [1, 17980], [1, 17982], [1, 17984], [1, 17986], [1, 17988], [1, 17990], [1, 17992], [1, 17994], [1, 17996], [1, 17998], [1, 18000], [1, 18002], [1, 18004], [1, 18006], [1, 18008], [1, 18010], [1, 18012], [1, 18014], [1, 18016], [1, 18018], [1, 18020], [1, 18022], [1, 18024], [1, 18026], [1, 18028], [1, 18030], [1, 18032], [1, 18034], [1, 18036], [1, 18038], [1, 18040], [1, 18042], [1, 18044], [1, 18046], [1, 18048], [1, 18050], [1, 18052], [1, 18054], [1, 18056], [1, 18058], [1, 18060], [1, 18062], [1, 18064], [1, 18066], [1, 18068], [1, 18070], [1, 18072], [1, 18074], [1, 18076], [1, 18078], [1, 18080], [1, 18082], [1, 18084], [1, 18086], [1, 18088], [1, 18090], [1, 18092], [1, 18094], [1, 18096], [1, 18098], [1, 18100], [1, 18102], [1, 18104], [1, 18106], [1, 18108], [1, 18110], [1, 18112], [1, 18114], [1, 18116], [1, 18118], [1, 18120], [1, 18122], [1, 18124], [1, 18126], [1, 18128], [1, 18130], [1, 18132], [1, 18134], [1, 18136], [1, 18138], [1, 18140], [1, 18142], [1, 18144], [1, 18146], [1, 18148], [1, 18150], [1, 18152], [1, 18154], [1, 18156], [1, 18158], [1, 18160], [1, 18162], [1, 18164], [1, 18166], [1, 18168], [1, 18170], [1, 18172], [1, 18174], [1, 18176], [1, 18178], [1, 18180], [1, 18182], [1, 18184], [1, 18186], [1, 18188], [1, 18190], [1, 18192], [1, 18194], [1, 18196], [1, 18198], [1, 18200], [1, 18202], [1, 18204], [1, 18206], [1, 18208], [1, 18210], [1, 18212], [1, 18214], [1, 18216], [1, 18218], [1, 18220], [1, 18222], [1, 18224], [1, 18226], [1, 18228], [1, 18230], [1, 18232], [1, 18234], [1, 18236], [1, 18238], [1, 18240], [1, 18242], [1, 18244], [1, 18246], [1, 18248], [1, 18250], [1, 18252], [1, 18254], [1, 18256], [1, 18258], [1, 18260], [1, 18262], [1, 18264], [1, 18266], [1, 18268], [1, 18270], [1, 18272], [1, 18274], [1, 18276], [1, 18278], [1, 18280], [1, 18282], [1, 18284], [1, 18286], [1, 18288], [1, 18290], [1, 18292], [1, 18294], [1, 18296], [1, 18298], [1, 18300], [1, 18302], [1, 18304], [1, 18306], [1, 18308], [1, 18310], [1, 18312], [1, 18314], [1, 18316], [1, 18318], [1, 18320], [1, 18322], [1, 18324], [1, 18326], [1, 18328], [1, 18330], [1, 18332], [1, 18334], [1, 18336], [1, 18338], [1, 18340], [1, 18342], [1, 18344], [1, 18346], [1, 18348], [1, 18350], [1, 18352], [1, 18354], [1, 18356], [1, 18358], [1, 18360], [1, 18362], [1, 18364], [1, 18366], [1, 18368], [1, 18370], [1, 18372], [1, 18374], [1, 18376], [1, 18378], [1, 18380], [1, 18382], [1, 18384], [1, 18386], [1, 18388], [1, 18390], [1, 18392], [1, 18394], [1, 18396], [1, 18398], [1, 18400], [1, 18402], [1, 18404], [1, 18406], [1, 18408], [1, 18410], [1, 18412], [1, 18414], [1, 18416], [1, 18418], [1, 18420], [1, 18422], [1, 18424], [1, 18426], [1, 18428], [1, 18430], [1, 18432], [1, 18434], [1, 18436], [1, 18438], [1, 18440], [1, 18442], [1, 18444], [1, 18446], [1, 18448], [1, 18450], [1, 18452], [1, 18454], [1, 18456], [1, 18458], [1, 18460], [1, 18462], [1, 18464], [1, 18466], [1, 18468], [1, 18470], [1, 18472], [1, 18474], [1, 18476], [1, 18478], [1, 18480], [1, 18482], [1, 18484], [1, 18486], [1, 18488], [1, 18490], [1, 18492], [1, 18494], [1, 18496], [1, 18498], [1, 18500], [1, 18502], [1, 18504], [1, 18506], [1, 18508], [1, 18510], [1, 18512], [1, 18514], [1, 18516], [1, 18518], [1, 18520], [1, 18522], [1, 18524], [1, 18526], [1, 18528], [1, 18530], [1, 18532], [1, 18534], [1, 18536], [1, 18538], [1, 18540], [1, 18542], [1, 18544], [1, 18546], [1, 18548], [1, 18550], [1, 18552], [1, 18554], [1, 18556], [1, 18558], [1, 18560], [1, 18562], [1, 18564], [1, 18566], [1, 18568], [1, 18570], [1, 18572], [1, 18574], [1, 18576], [1, 18578], [1, 18580], [1, 18582], [1, 18584], [1, 18586], [1, 18588], [1, 18590], [1, 18592], [1, 18594], [1, 18596], [1, 18598], [1, 18600], [1, 18602], [1, 18604], [1, 18606], [1, 18608], [1, 18610], [1, 18612], [1, 18614], [1, 18616], [1, 18618], [1, 18620], [1, 18622], [1, 18624], [1, 18626], [1, 18628], [1, 18630], [1, 18632], [1, 18634], [1, 18636], [1, 18638], [1, 18640], [1, 18642], [1, 18644], [1, 18646], [1, 18648], [1, 18650], [1, 18652], [1, 18654], [1, 18656], [1, 18658], [1, 18660], [1, 18662], [1, 18664], [1, 18666], [1, 18668], [1, 18670], [1, 18672], [1, 18674], [1, 18676], [1, 18678], [1, 18680], [1, 18682], [1, 18684], [1, 18686], [1, 18688], [1, 18690], [1, 18692], [1, 18694], [1, 18696], [1, 18698], [1, 18700], [1, 18702], [1, 18704], [1, 18706], [1, 18708], [1, 18710], [1, 18712], [1, 18714], [1, 18716], [1, 18718], [1, 18720], [1, 18722], [1, 18724], [1, 18726], [1, 18728], [1, 18730], [1, 18732], [1, 18734], [1, 18736], [1, 18738], [1, 18740], [1, 18742], [1, 18744], [1, 18746], [1, 18748], [1, 18750], [1, 18752], [1, 18754], [1, 18756], [1, 18758], [1, 18760], [1, 18762], [1, 18764], [1, 18766], [1, 18768], [1, 18770], [1, 18772], [1, 18774], [1, 18776], [1, 18778], [1, 18780], [1, 18782], [1, 18784], [1, 18786], [1, 18788], [1, 18790], [1, 18792], [1, 18794], [1, 18796], [1, 18798], [1, 18800], [1, 18802], [1, 18804], [1, 18806], [1, 18808], [1, 18810], [1, 18812], [1, 18814], [1, 18816], [1, 18818], [1, 18820], [1, 18822], [1, 18824], [1, 18826], [1, 18828], [1, 18830], [1, 18832], [1, 18834], [1, 18836], [1, 18838], [1, 18840], [1, 18842], [1, 18844], [1, 18846], [1, 18848], [1, 18850], [1, 18852], [1, 18854], [1, 18856], [1, 18858], [1, 18860], [1, 18862], [1, 18864], [1, 18866], [1, 18868], [1, 18870], [1, 18872], [1, 18874], [1, 18876], [1, 18878], [1, 18880], [1, 18882], [1, 18884], [1, 18886], [1, 18888], [1, 18890], [1, 18892], [1, 18894], [1, 18896], [1, 18898], [1, 18900], [1, 18902], [1, 18904], [1, 18906], [1, 18908], [1, 18910], [1, 18912], [1, 18914], [1, 18916], [1, 18918], [1, 18920], [1, 18922], [1, 18924], [1, 18926], [1, 18928], [1, 18930], [1, 18932], [1, 18934], [1, 18936], [1, 18938], [1, 18940], [1, 18942], [1, 18944], [1, 18946], [1, 18948], [1, 18950], [1, 18952], [1, 18954], [1, 18956], [1, 18958], [1, 18960], [1, 18962], [1, 18964], [1, 18966], [1, 18968], [1, 18970], [1, 18972], [1, 18974], [1, 18976], [1, 18978], [1, 18980], [1, 18982], [1, 18984], [1, 18986], [1, 18988], [1, 18990], [1, 18992], [1, 18994], [1, 18996], [1, 18998], [1, 19000], [1, 19002], [1, 19004], [1, 19006], [1, 19008], [1, 19010], [1, 19012], [1, 19014], [1, 19016], [1, 19018], [1, 19020], [1, 19022], [1, 19024], [1, 19026], [1, 19028], [1, 19030], [1, 19032], [1, 19034], [1, 19036], [1, 19038], [1, 19040], [1, 19042], [1, 19044], [1, 19046], [1, 19048], [1, 19050], [1, 19052], [1, 19054], [1, 19056], [1, 19058], [1, 19060], [1, 19062], [1, 19064], [1, 19066], [1, 19068], [1, 19070], [1, 19072], [1, 19074], [1, 19076], [1, 19078], [1, 19080], [1, 19082], [1, 19084], [1, 19086], [1, 19088], [1, 19090], [1, 19092], [1, 19094], [1, 19096], [1, 19098], [1, 19100], [1, 19102], [1, 19104], [1, 19106], [1, 19108], [1, 19110], [1, 19112], [1, 19114], [1, 19116], [1, 19118], [1, 19120], [1, 19122], [1, 19124], [1, 19126], [1, 19128], [1, 19130], [1, 19132], [1, 19134], [1, 19136], [1, 19138], [1, 19140], [1, 19142], [1, 19144], [1, 19146], [1, 19148], [1, 19150], [1, 19152], [1, 19154], [1, 19156], [1, 19158], [1, 19160], [1, 19162], [1, 19164], [1, 19166], [1, 19168], [1, 19170], [1, 19172], [1, 19174], [1, 19176], [1, 19178], [1, 19180], [1, 19182], [1, 19184], [1, 19186], [1, 19188], [1, 19190], [1, 19192], [1, 19194], [1, 19196], [1, 19198], [1, 19200], [1, 19202], [1, 19204], [1, 19206], [1, 19208], [1, 19210], [1, 19212], [1, 19214], [1, 19216], [1, 19218], [1, 19220], [1, 19222], [1, 19224], [1, 19226], [1, 19228], [1, 19230], [1, 19232], [1, 19234], [1, 19236], [1, 19238], [1, 19240], [1, 19242], [1, 19244], [1, 19246], [1, 19248], [1, 19250], [1, 19252], [1, 19254], [1, 19256], [1, 19258], [1, 19260], [1, 19262], [1, 19264], [1, 19266], [1, 19268], [1, 19270], [1, 19272], [1, 19274], [1, 19276], [1, 19278], [1, 19280], [1, 19282], [1, 19284], [1, 19286], [1, 19288], [1, 19290], [1, 19292], [1, 19294], [1, 19296], [1, 19298], [1, 19300], [1, 19302], [1, 19304], [1, 19306], [1, 19308], [1, 19310], [1, 19312], [1, 19314], [1, 19316], [1, 19318], [1, 19320], [1, 19322], [1, 19324], [1, 19326], [1, 19328], [1, 19330], [1, 19332], [1, 19334], [1, 19336], [1, 19338], [1, 19340], [1, 19342], [1, 19344], [1, 19346], [1, 19348], [1, 19350], [1, 19352], [1, 19354], [1, 19356], [1, 19358], [1, 19360], [1, 19362], [1, 19364], [1, 19366], [1, 19368], [1, 19370], [1, 19372], [1, 19374], [1, 19376], [1, 19378], [1, 19380], [1, 19382], [1, 19384], [1, 19386], [1, 19388], [1, 19390], [1, 19392], [1, 19394], [1, 19396], [1, 19398], [1, 19400], [1, 19402], [1, 19404], [1, 19406], [1, 19408], [1, 19410], [1, 19412], [1, 19414], [1, 19416], [1, 19418], [1, 19420], [1, 19422], [1, 19424], [1, 19426], [1, 19428], [1, 19430], [1, 19432], [1, 19434], [1, 19436], [1, 19438], [1, 19440], [1, 19442], [1, 19444], [1, 19446], [1, 19448], [1, 19450], [1, 19452], [1, 19454], [1, 19456], [1, 19458], [1, 19460], [1, 19462], [1, 19464], [1, 19466], [1, 19468], [1, 19470], [1, 19472], [1, 19474], [1, 19476], [1, 19478], [1, 19480], [1, 19482], [1, 19484], [1, 19486], [1, 19488], [1, 19490], [1, 19492], [1, 19494], [1, 19496], [1, 19498], [1, 19500], [1, 19502], [1, 19504], [1, 19506], [1, 19508], [1, 19510], [1, 19512], [1, 19514], [1, 19516], [1, 19518], [1, 19520], [1, 19522], [1, 19524], [1, 19526], [1, 19528], [1, 19530], [1, 19532], [1, 19534], [1, 19536], [1, 19538], [1, 19540], [1, 19542], [1, 19544], [1, 19546], [1, 19548], [1, 19550], [1, 19552], [1, 19554], [1, 19556], [1, 19558], [1, 19560], [1, 19562], [1, 19564], [1, 19566], [1, 19568], [1, 19570], [1, 19572], [1, 19574], [1, 19576], [1, 19578], [1, 19580], [1, 19582], [1, 19584], [1, 19586], [1, 19588], [1, 19590], [1, 19592], [1, 19594], [1, 19596], [1, 19598], [1, 19600], [1, 19602], [1, 19604], [1, 19606], [1, 19608], [1, 19610], [1, 19612], [1, 19614], [1, 19616], [1, 19618], [1, 19620], [1, 19622], [1, 19624], [1, 19626], [1, 19628], [1, 19630], [1, 19632], [1, 19634], [1, 19636], [1, 19638], [1, 19640], [1, 19642], [1, 19644], [1, 19646], [1, 19648], [1, 19650], [1, 19652], [1, 19654], [1, 19656], [1, 19658], [1, 19660], [1, 19662], [1, 19664], [1, 19666], [1, 19668], [1, 19670], [1, 19672], [1, 19674], [1, 19676], [1, 19678], [1, 19680], [1, 19682], [1, 19684], [1, 19686], [1, 19688], [1, 19690], [1, 19692], [1, 19694], [1, 19696], [1, 19698], [1, 19700], [1, 19702], [1, 19704], [1, 19706], [1, 19708], [1, 19710], [1, 19712], [1, 19714], [1, 19716], [1, 19718], [1, 19720], [1, 19722], [1, 19724], [1, 19726], [1, 19728], [1, 19730], [1, 19732], [1, 19734], [1, 19736], [1, 19738], [1, 19740], [1, 19742], [1, 19744], [1, 19746], [1, 19748], [1, 19750], [1, 19752], [1, 19754], [1, 19756], [1, 19758], [1, 19760], [1, 19762], [1, 19764], [1, 19766], [1, 19768], [1, 19770], [1, 19772], [1, 19774], [1, 19776], [1, 19778], [1, 19780], [1, 19782], [1, 19784], [1, 19786], [1, 19788], [1, 19790], [1, 19792], [1, 19794], [1, 19796], [1, 19798], [1, 19800], [1, 19802], [1, 19804], [1, 19806], [1, 19808], [1, 19810], [1, 19812], [1, 19814], [1, 19816], [1, 19818], [1, 19820], [1, 19822], [1, 19824], [1, 19826], [1, 19828], [1, 19830], [1, 19832], [1, 19834], [1, 19836], [1, 19838], [1, 19840], [1, 19842], [1, 19844], [1, 19846], [1, 19848], [1, 19850], [1, 19852], [1, 19854], [1, 19856], [1, 19858], [1, 19860], [1, 19862], [1, 19864], [1, 19866], [1, 19868], [1, 19870], [1, 19872], [1, 19874], [1, 19876], [1, 19878], [1, 19880], [1, 19882], [1, 19884], [1, 19886], [1, 19888], [1, 19890], [1, 19892], [1, 19894], [1, 19896], [1, 19898], [1, 19900], [1, 19902], [1, 19904], [1, 19906], [1, 19908], [1, 19910], [1, 19912], [1, 19914], [1, 19916], [1, 19918], [1, 19920], [1, 19922], [1, 19924], [1, 19926], [1, 19928], [1, 19930], [1, 19932], [1, 19934], [1, 19936], [1, 19938], [1, 19940], [1, 19942], [1, 19944], [1, 19946], [1, 19948], [1, 19950], [1, 19952], [1, 19954], [1, 19956], [1, 19958], [1, 19960], [1, 19962], [1, 19964], [1, 19966], [1, 19968], [1, 19970], [1, 19972], [1, 19974], [1, 19976], [1, 19978], [1, 19980], [1, 19982], [1, 19984], [1, 19986], [1, 19988], [1, 19990], [1, 19992], [1, 19994], [1, 19996], [1, 19998]]
explain select count(*) from (select count(*) from test group by id) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "union_set_aggs      0      21     0     ",
      "06": "set                 1      1      0     ",
      "07": "store_open          1      0      12    ",
      "08": "count               2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "store_next          1      8      0     ",
      "12": "store_close         1      1      0     ",
      "13": "set                 0      1      0     ",
      "14": "set                 2      1      1     ",
      "15": "ref                 3      1      0     ",
      "16": "store_open          0      3      24    ",
      "17": "bool                4      1      0     ",
      "18": "push                4      0      0     ",
      "19": "set_get             4      2      0     ",
      "20": "int                 5      -      0     # 1",
      "21": "push                5      0      0     ",
      "22": "set_agg             2      4      25    ",
      "23": "store_next          0      17     0     ",
      "24": "store_close         0      1      0     ",
      "25": "bool                4      1      0     ",
      "26": "push                4      0      0     ",
      "27": "set_get             4      2      0     ",
      "28": "null                5      0      0     ",
      "29": "push                5      0      0     ",
      "30": "set_agg             2      4      25    ",
      "31": "store_open          1      2      36    ",
      "32": "count               4      1      0     ",
      "33": "push                4      0      0     ",
      "34": "set_add             0      0      0     ",
      "35": "store_next          1      32     0     ",
      "36": "store_close         1      1      0     ",
      "37": "content             0      -      -     ",
      "38": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         0      1      1     ",
      "01": "table_open_part     0      1      9     # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_get             1      0      0     ",
      "05": "int                 2      -      0     # 1",
      "06": "push                2      0      0     ",
      "07": "set_agg             0      1      21    ",
      "08": "table_next          0      2      0     ",
      "09": "table_close         0      0      0     ",
      "10": "set_sort            0      0      0     ",
      "11": "result              0      0      0     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select count(*) from (select count(*) from test group by id) t
[10000]
drop table test
# test: select from table group by 1
create table test (id int primary key, data int)
insert into test values (0, 0)
insert into test values (1, 0)
insert into test values (2, 1)
insert into test values (3, 1)
insert into test values (4, 2)
select * from test
[[0, 0], [1, 0], [3, 1], [4, 2], [2, 1]]
select id from test group by id
[0, 1, 2, 3, 4]
select data from test group by id
{"msg": "select ❰data❱ ⟵ column data must appear in the GROUP BY clause or be used by an aggregate function"}
select data from test group by data
[0, 1, 2]
select id from test group by 1
[0, 1, 2, 3, 4]
select data from test group by 1
[0, 1, 2]
# test: select from table group by 1 (expr)
select data + 25 from test group by 1
[25, 26, 27]
select abs(-id + data) from test
[0, 1, 2, 2, 1]
select abs(-id + data) from test group by 1
[0, 1, 2]
# test: select from table group by 1 (agg)
select count(id) from test group by 1
{"msg": "select count(id) from test group by ❰1❱ ⟵ aggregate functions cannot be used in GROUP BY expressions"}
# test: select from table group by alias
select id as x, count(*) from test group by x
[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]]
select data as x, count(*) from test group by x
[[0, 2], [1, 2], [2, 1]]
# test: select from table group by alias (expr)
select abs(-id + data) as x, count(*) from test group by x
[[0, 1], [1, 2], [2, 2]]
# test: select from table group by alias (agg)
select count(*) as x, abs(-id + data) from test group by x
{"msg": "select count(*) as x, abs(-id + data) from test group by ❰x❱ ⟵ aggregate functions cannot be used in GROUP BY expressions"}
drop table test
# test: select * from table group by vector/interval
create table test (id int primary key, vec vector, iv interval)
insert into test values (0, [1,2,3], "1 min 5 sec")
insert into test values (1, [1,2,3], "1 min 5 sec")
# test: select * from table group by vector
select count(*) from test group by vec
[2]
select count(*) from test group by id, vec
[1, 1]
# test: select * from table group by interval
select count(*) from test group by iv
[2]
select count(*) from test group by id,iv
[1, 1]
drop table test
disconnect S0
close E0
