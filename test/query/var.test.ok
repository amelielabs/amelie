open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: := operator parsing
:=
{"msg": ":= ⟵ unexpected statement"}
0 :=
{"msg": "0 ❰:=❱ ⟵ unexpected statement"}
0 := 0
{"msg": "0 ❰:=❱ ⟵ unexpected statement"}
'x' := 1
{"msg": "'x' ❰:=❱ ⟵ unexpected statement"}
x :=
{"msg": "x := ⟵ statement expected"}
# test: := expr
x := 1
[1]
explain x := 1
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "assign              1      0      0     ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    }
  },
  "access": []
}]
# test: := select expr
x := select 1
[1]
explain x := select 1
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "assign              1      0      0     ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    }
  },
  "access": []
}]
# test: := select var
x := 1; select x
[1]
explain x := 1; select x
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "assign              1      0      0     ",
      "05": "set                 2      1      0     ",
      "06": "ref                 3      1      0     ",
      "07": "push                3      0      0     ",
      "08": "set_add             2      0      0     ",
      "09": "content             2      -      -     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": []
}]
x := 1; y := 2; select x + y
[3]
# test: := select var (redefine)
x := 1; y := 2; x := 2; select x + y
[4]
# test: := select var (json)
x := {"id": 48}; select x.id
[48]
explain x := {"id": 48}; select x.id
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "json                1      0      0     ",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "assign              1      0      0     ",
      "05": "set                 2      1      0     ",
      "06": "ref                 3      1      0     ",
      "07": "string              4      7      0     # id",
      "08": "dotjs               5      3      4     ",
      "09": "push                5      0      0     ",
      "10": "set_add             2      0      0     ",
      "11": "content             2      -      -     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": []
}]
# test: := select var (null)
x := null; select x
[null]
explain x := null; select x
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "null                1      0      0     ",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "assign              1      0      0     ",
      "05": "set                 2      1      0     ",
      "06": "ref                 3      1      0     ",
      "07": "push                3      0      0     ",
      "08": "set_add             2      0      0     ",
      "09": "content             2      -      -     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": []
}]
x := null; select x + 10
[null]
# test: := select var (1 column)
x := select 1
[1]
# test: := select var (n columns)
x := select 1, 2
{"msg": "x := select 1, 2 ⟵ statement must return only one column to be assigned"}
# test: := select var (column shadow)
create table test (id int primary key)
insert into test values (1)
id := 1; select * from test where id = id
[1]
id := 1; select * from test where test.id = id
[1]
drop table test
# test: := insert returning (1 column)
create table test (id int primary key)
x := insert into test values (1) returning id; select x
[1]
# test: := insert returning (n columns)
x := insert into test values (2) returning id, id; select x
{"msg": "x := insert into test values (2) returning id, id; select x ⟵ statement must return only one column to be assigned"}
# test: := pushdown
x := 1; select * from test where id = x
[1]
explain x := 1; select * from test where id = x
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "assign              1      0      0     ",
      "05": "ref                 2      1      0     ",
      "06": "push                2      0      0     ",
      "07": "send_lookup_by      0      -      -     # public.test",
      "08": "recv                0      0      0     ",
      "09": "bool                2      0      0     ",
      "10": "push                2      0      0     ",
      "11": "union_recv          2      -1     -1    ",
      "12": "content             2      -      -     ",
      "13": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 2      1      0     ",
      "01": "ref                 3      1      0     ",
      "02": "push                3      0      0     ",
      "03": "table_open_partl    0      0      11    # public.test (primary)",
      "04": "table_readi32       3      0      0     ",
      "05": "ref                 4      1      0     ",
      "06": "equii               5      3      4     ",
      "07": "jntr                11     5      0     ",
      "08": "table_readi32       3      0      0     ",
      "09": "push                3      0      0     ",
      "10": "set_add             2      0      0     ",
      "11": "table_close         0      0      0     ",
      "12": "result              2      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
# test: := with cte
x := with a as (select 1) select * from a; select x
[1]
# test: := with cte (assign inside)
with a as (x := select 1) select * from a; select x
{"msg": "with a as (x ❰:=❱ ⟵ unexpected statement"}
drop table test
# test: := ddl
x := show all;
{"msg": "x := show all❰;❱ ⟵ := cannot be used with utility statements"}
# test: select into
select 1 into x; select x
[1]
# test: select into (redefine)
select 1 into x; select 2 into x; select x
[2]
x := 1; select 2 into x; select x
[2]
# test: select into (cte)
with a as (select 1 into x) select * from a
{"msg": "with a as (select 1 into ❰x❱ ⟵ INTO cannot be used with CTE"}
# test: select into (subquery)
select (select 1 into x); select x
{"msg": "select (select 1 into ❰x❱ ⟵ INTO cannot be used inside subquery"}
# test: select into (var)
x := select 1 into x; select x
{"msg": "x := select 1 into ❰x❱ ⟵ INTO cannot be used with := operator"}
# test: returning into
create table test (id int primary key)
insert into test values (1) returning id into x; select x
[1]
# test: returning into (var)
x := insert into test values (1) returning id into x; select x
{"msg": "x := insert into test values (1) returning id into ❰x❱ ⟵ INTO cannot be used with := operator"}
# test: returning into (cte)
with a as (insert into test values (1) returning id into x) select * from a
{"msg": "with a as (insert into test values (1) returning id into ❰x❱ ⟵ INTO cannot be used with CTE"}
drop table test
disconnect S0
close E0
