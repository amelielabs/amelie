open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: create table statement parsing
create
{"msg": "CREATE <USER|REPLICA|NODE|SCHEMA|TABLE|INDEX|VIEW> expected"}
create junk
{"msg": "CREATE <USER|REPLICA|NODE|SCHEMA|TABLE|INDEX|VIEW> expected"}
create unique
{"msg": "CREATE UNIQUE <INDEX> expected"}
create unique table
{"msg": "CREATE UNIQUE <INDEX> expected"}
create table
{"msg": "CREATE TABLE <name> expected"}
create table "junk_name"
{"msg": "CREATE TABLE <name> expected"}
create table if
{"msg": "IF <NOT> EXISTS expected"}
create table if not
{"msg": "IF NOT <EXISTS> expected"}
create table if not exists
{"msg": "CREATE TABLE <name> expected"}
create table 1234
{"msg": "CREATE TABLE <name> expected"}
create table test(
{"msg": "(<name> expected"}
create table test(0
{"msg": "(<name> expected"}
create table test("123"
{"msg": "(<name> expected"}
create table test(name
{"msg": "name <> unrecognized column type"}
create table test(name junk_type
{"msg": "name <junk_type> unrecognized column type"}
create table test(name int
{"msg": "CREATE TABLE name (name type <,)> expected"}
create table test(name int,
{"msg": "(<name> expected"}
create table test(name int,)
{"msg": "(<name> expected"}
create table if not exists 1234
{"msg": "CREATE TABLE <name> expected"}
create table if not exists test(
{"msg": "(<name> expected"}
create table if not exists test(0
{"msg": "(<name> expected"}
create table if not exists test("123"
{"msg": "(<name> expected"}
create table if not exists test(name
{"msg": "name <> unrecognized column type"}
create table if not exists test(name junk_type
{"msg": "name <junk_type> unrecognized column type"}
create table if not exists test(name int
{"msg": "CREATE TABLE name (name type <,)> expected"}
create table test(name int) junk
{"msg": "primary key is not defined"}
create table test()
{"msg": "(<name> expected"}
# test: column bool/boolean
create table test(id int primary key, a bool, b boolean)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 1,
  "type_size": 1,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "b",
  "type": 1,
  "type_size": 1,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column int8/i8
create table test(id int primary key, id2 int8, id3 i8)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 1,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id3",
  "type": 2,
  "type_size": 1,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column int16/i16
create table test(id int primary key, id2 int16, id3 i16)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 2,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id3",
  "type": 2,
  "type_size": 2,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column int/integer/int32/i32
create table test(id int primary key, id2 integer, id3 int32, id4 i32)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id3",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id4",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column int64/i64
create table test(id int64 primary key, id2 i64)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 8,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column float
create table test(id int primary key, a float)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 3,
  "type_size": 4,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column double
create table test(id int primary key, a double)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 3,
  "type_size": 8,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column text/string
create table test(id int primary key, a text, b string)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 4,
  "type_size": 0,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "b",
  "type": 4,
  "type_size": 0,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column json
create table test(id int primary key, a json, b json)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 5,
  "type_size": 0,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "b",
  "type": 5,
  "type_size": 0,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column timestamp
create table test(id int primary key, a timestamp)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 6,
  "type_size": 8,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column interval
create table test(id int primary key, a interval)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 7,
  "type_size": 16,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column vector
create table test(id int primary key, a vector)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "a",
  "type": 8,
  "type_size": 0,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: column redefined
create table test(id int, id int)
{"msg": "<id> column redefined"}
# test: primary key is not defined
create table test(id int)
{"msg": "primary key is not defined"}
# test: primary key clause parsing
create table test(primary)
{"msg": "PRIMARY <KEY> expected"}
create table test(primary key(
{"msg": "KEY (<name> expected"}
create table test(primary key()
{"msg": "KEY (<name> expected"}
create table test(primary key())
{"msg": "KEY (<name> expected"}
create table test(primary key(abc))
{"msg": "<abc> column does not exists"}
create table test(id int, primary key())
{"msg": "KEY (<name> expected"}
create table test(id int, primary key(id, ))
{"msg": "KEY (<name> expected"}
create table test(primary key(id), id int)
{"msg": "<id> column does not exists"}
# test: primary key is not found
create table test(id int, primary key(idd))
{"msg": "<idd> column does not exists"}
# test: primary key redefined
create table test(id int, primary key(id, id))
create table test(id int primary key, primary key(id))
{"msg": "table 'test': already exists"}
create table if not exists test(id int primary key, primary key(id))
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: primary key redefined #2
create table test(id int primary key primary key)
{"msg": "PRIMARY KEY defined twice"}
# test: primary key ensure valid type
create table test(id json primary key)
{"msg": "<id> column key can be text, int32, int64 or timestamp"}
create table test(id json, primary key(id))
{"msg": "<id> column key can be text, int32, int64 or timestamp"}
create table test (id int primary key)
create table test (id int primary key)
{"msg": "table 'test': already exists"}
# test: table create if not exists
create table test (id int primary key)
{"msg": "table 'test': already exists"}
create table if not exists test (id int primary key)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
select system.tables()['public.test'].columns
{"msg": "[]: object key 'public.test' not found"}
# test: schema default
create table test (id int primary key)
select system.tables()['public.test'].schema
["public"]
drop table test
# test: schema system
create table system.test (id int primary key)
{"msg": "system schema <system> cannot be used to create objects"}
# test: schema default explicit
create table public.test (id int primary key)
select system.tables()['public.test'].schema
["public"]
drop table public.test
# test: schema non-exists
create table test.test (id int primary key)
{"msg": "schema 'test': not exists"}
select system.tables()['test.test'].schema
{"msg": "[]: object key 'test.test' not found"}
# test: schema set
create table test (id int primary key)
create schema test
create table test.test (id int primary key)
select system.tables()['test.test'].schema
["test"]
drop table test
drop table test.test
drop schema test
# test: table create with conflicting view
create view test as select 1
create table test (id int primary key)
{"msg": "view <test> with the same name exists"}
drop view test
# test: distributed
create distributed table test (id int primary key)
select system.tables()['public.test'].shared
[false]
drop table test
# test: shared
create shared table test (id int primary key)
select system.tables()['public.test'].shared
[true]
drop table test
# test: aggregated
create aggregated table test (id int primary key)
select system.tables()['public.test'].aggregated
[true]
drop table test
create distributed aggregated table test (id int primary key)
select system.tables()['public.test'].shared
[false]
select system.tables()['public.test'].aggregated
[true]
drop table test
create shared aggregated table test (id int primary key)
select system.tables()['public.test'].shared
[true]
select system.tables()['public.test'].aggregated
[true]
drop table test
# test: constraint default
create table test (id int primary key, data int default 1)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": 1
  }
}]]
drop table test
# test: constraint default with key
create table test (id int default 1 primary key)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": 1
  }
}]]
drop table test
# test: constraint default with key #2
create table test (id int default 1, primary key(id))
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": 1
  }
}]]
drop table test
# test: constraint default expr validate
create table test (id int primary key, data int default 1 + 1)
{"msg": "only consts allowed as DEFAULT expression"}
# test: constraint not null with key
create table test (id int not null primary key)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: constraint not null forced for keys
create table test (id int primary key, data int)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: constraint not null forced for keys #2
create table test (id int, data int, primary key(id))
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": false,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: constraint serial
create table test (id int primary key, data int64 serial)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraint": {
    "not_null": true,
    "serial": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 8,
  "constraint": {
    "not_null": false,
    "serial": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: constraint serial key
create table test (id int64 serial primary key)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraint": {
    "not_null": true,
    "serial": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: constraint serial key #2
create table test (id int64 serial, primary key(id))
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraint": {
    "not_null": true,
    "serial": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: constraint serial key type
create table test (id string serial primary key)
{"msg": "SERIAL column <id> must be int64"}
# test: constraint serial multiple columns
create table test (id int64 serial primary key, data int64 serial)
select system.tables()['public.test'].columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraint": {
    "not_null": true,
    "serial": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 8,
  "constraint": {
    "not_null": false,
    "serial": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "as_stored": "",
    "as_aggregated": "",
    "default": null
  }
}]]
drop table test
# test: with parsing
create table test (id int primary key) with
{"msg": "WITH <(> expected"}
create table test (id int primary key) with (
{"msg": "WITH (<name> expected"}
create table test (id int primary key) with (,
{"msg": "WITH (<name> expected"}
create table test (id int primary key) with (abc
{"msg": "WITH: <abc> unrecognized parameter"}
create table test (id int primary key) with (abc = 10)
{"msg": "WITH: <abc> unrecognized parameter"}
create table test (id int primary key) with (abc = "")
{"msg": "WITH: <abc> unrecognized parameter"}
# test: with
create table test (id int primary key) with (type = "hash")
disconnect S0
close E0
