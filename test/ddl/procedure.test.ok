open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: create procedure statement parsing
create procedure
{"msg": "create procedure ⟵ name expected"}
create procedure 123
{"msg": "create procedure ❰123❱ ⟵ name expected"}
create procedure if
{"msg": "create procedure ❰if❱ ⟵ name expected"}
create procedure or
{"msg": "create procedure ❰or❱ ⟵ name expected"}
create procedure or 123
{"msg": "create procedure ❰or❱ ⟵ name expected"}
create or
{"msg": "create or ⟵ REPLACE expected"}
create or replace
{"msg": "create or replace ⟵ PROCEDURE expected"}
create or replace 123
{"msg": "create or replace ❰123❱ ⟵ PROCEDURE expected"}
create or replace procedure
{"msg": "create or replace procedure ⟵ name expected"}
create procedure test
{"msg": "create procedure test ⟵ ( expected"}
create procedure test 123
{"msg": "create procedure test ❰123❱ ⟵ ( expected"}
create procedure test.test
{"msg": "create procedure test.test ⟵ ( expected"}
create procedure test (
{"msg": "create procedure test ( ⟵ name expected"}
create procedure test (a
{"msg": "create procedure test (a ⟵ unrecognized data type"}
create procedure test (a 1
{"msg": "create procedure test (a ❰1❱ ⟵ unrecognized data type"}
create procedure test (a int
{"msg": "create procedure test (a int ⟵ ) expected"}
create procedure test (a int,
{"msg": "create procedure test (a int, ⟵ name expected"}
create procedure test (a int,,
{"msg": "create procedure test (a int,❰,❱ ⟵ name expected"}
create procedure test (a int)
{"msg": "create procedure test (a int) ⟵ BEGIN expected"}
create procedure test (a int) begin
{"msg": "create procedure test (a int) begin ⟵ END expected"}
create procedure test ()
{"msg": "create procedure test () ⟵ BEGIN expected"}
create procedure test () begin
{"msg": "create procedure test () begin ⟵ END expected"}
create procedure test begin
{"msg": "create procedure test ❰begin❱ ⟵ ( expected"}
create procedure test () begin
{"msg": "create procedure test () begin ⟵ END expected"}
# test: create procedure
create procedure test() begin select 1 end
show procedures
[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": [],
  "vars": []
}]
# test: create procedure (already exists)
create procedure test() begin select 1 end
{"msg": "procedure 'test': already exists"}
drop procedure test
# test: create procedure (multi statement)
create procedure test() begin select 1; select 1; end
show procedures
[{
  "schema": "public",
  "name": "test",
  "text": "select 1; select 1;",
  "columns": [],
  "vars": []
}]
# test: create procedure (no arguments)
create procedure test() begin select 1 end
{"msg": "procedure 'test': already exists"}
show procedures
[{
  "schema": "public",
  "name": "test",
  "text": "select 1; select 1;",
  "columns": [],
  "vars": []
}]
drop procedure test
# test: create procedure (arguments)
create procedure test(a int) begin select 1 end
show procedures
[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": [{
    "name": "a",
    "type": 2,
    "type_size": 4,
    "constraints": {
      "not_null": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "default": null,
      "as_identity": false,
      "as_stored": "",
      "as_resolved": ""
    }
  }],
  "vars": []
}]
drop procedure test
create procedure test(a int, b text) begin select 1 end
show procedures
[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": [{
    "name": "a",
    "type": 2,
    "type_size": 4,
    "constraints": {
      "not_null": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "default": null,
      "as_identity": false,
      "as_stored": "",
      "as_resolved": ""
    }
  }, {
    "name": "b",
    "type": 4,
    "type_size": 0,
    "constraints": {
      "not_null": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "default": null,
      "as_identity": false,
      "as_stored": "",
      "as_resolved": ""
    }
  }],
  "vars": []
}]
drop procedure test
# test: create procedure (ddl)
create procedure test() begin show lsn end
{"msg": "utility commands cannot be used inside procedure"}
# test: create procedure (begin)
create procedure test() begin begin end
{"msg": "begin ⟵ unexpected statement"}
# test: create procedure (commit)
create procedure test() begin commit end
{"msg": "❰commit❱ ⟵ COMMIT cannot be inside procedure"}
# test: create procedure (declare empty)
create procedure test() declare begin select 1 end
show procedures
[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": [],
  "vars": []
}]
drop procedure test
# test: create procedure (declare)
create procedure test() declare v begin select 1 end
{"msg": "create procedure test() declare v ❰begin❱ ⟵ unrecognized data type"}
create procedure test() declare v int begin select 1 end
{"msg": "create procedure test() declare v int ❰begin❱ ⟵ ; expected"}
create procedure test() declare v int; begin select v end
show procedures
[{
  "schema": "public",
  "name": "test",
  "text": "select v",
  "columns": [],
  "vars": [{
    "name": "v",
    "type": 2,
    "type_size": 4,
    "constraints": {
      "not_null": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "default": null,
      "as_identity": false,
      "as_stored": "",
      "as_resolved": ""
    }
  }]
}]
drop procedure test
# test: create procedure (declare type mismatch)
create procedure test() declare v int; begin v := 'hey'; end
{"msg": "v := ❰'hey'❱ ⟵ variable expected int"}
# test: create procedure (declare argument exists)
create procedure test(v int) declare v int; begin end
{"msg": "create procedure test(v int) declare ❰v❱ ⟵ argument redefined"}
# test: create procedure (declare var exists)
create procedure test() declare v int; v int; begin end
{"msg": "create procedure test() declare v int; ❰v❱ ⟵ variable redefined"}
# test: create procedure (declare assign)
create table cfg(id string primary key)
create procedure test(prefix string) declare conf json; id string; begin conf := system.config(); id := conf.uuid::string; insert into cfg values (prefix || id); end
explain call test('id_')
[{
  "bytecode": {
    "frontend": {
      "00": "string              0      0      0     # id_",
      "01": "set                 1      1      0     ",
      "02": "call                2      -      0     # system.config()",
      "03": "push                2      0      0     ",
      "04": "set_add             1      0      0     ",
      "05": "assign              2      1      0     ",
      "06": "set                 3      1      0     ",
      "07": "ref                 4      2      0     ",
      "08": "string              5      4      0     # uuid",
      "09": "dotjs               6      4      5     ",
      "10": "push                6      0      0     ",
      "11": "call                4      -      1     # public.string()",
      "12": "push                4      0      0     ",
      "13": "set_add             3      0      0     ",
      "14": "assign              4      3      0     ",
      "15": "set                 5      1      0     ",
      "16": "ref                 6      0      0     ",
      "17": "ref                 7      4      0     ",
      "18": "catss               8      6      7     ",
      "19": "push                8      0      0     ",
      "20": "set_add             5      0      0     ",
      "21": "dup                 6      5      0     ",
      "22": "send_shard          0      -      6     # public.cfg",
      "23": "recv                0      0      0     ",
      "24": "ret                 0      0      0     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.cfg",
      "01": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "call"], ["public.cfg", "rw"]]
}]
call test('id_')
select * from cfg
["id_00000000-0000-0000-0000-000000000000"]
explain execute test('id__')
[{
  "bytecode": {
    "frontend": {
      "00": "set                 3      1      0     ",
      "01": "call                4      -      0     # system.config()",
      "02": "push                4      0      0     ",
      "03": "set_add             3      0      0     ",
      "04": "assign              4      3      0     ",
      "05": "set                 5      1      0     ",
      "06": "ref                 6      4      0     ",
      "07": "string              7      0      0     # uuid",
      "08": "dotjs               8      6      7     ",
      "09": "push                8      0      0     ",
      "10": "call                6      -      1     # public.string()",
      "11": "push                6      0      0     ",
      "12": "set_add             5      0      0     ",
      "13": "assign              6      5      0     ",
      "14": "set                 7      1      0     ",
      "15": "ref                 8      0      0     ",
      "16": "ref                 9      6      0     ",
      "17": "catss               10     8      9     ",
      "18": "push                10     0      0     ",
      "19": "set_add             7      0      0     ",
      "20": "dup                 8      7      0     ",
      "21": "send_shard          0      -      8     # public.cfg",
      "22": "recv                0      0      0     ",
      "23": "ret                 0      0      0     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.cfg",
      "01": "ret                 0      0      0     "
    }
  },
  "access": [["public.cfg", "rw"]]
}]
execute test('id__')
select * from cfg
["id_00000000-0000-0000-0000-000000000000", "id__00000000-0000-0000-0000-000000000000"]
drop procedure test
drop table cfg
# test: drop procedure statement parsing
create procedure test() begin select 1 end
drop procedure
{"msg": "drop procedure ⟵ name expected"}
drop procedure 123
{"msg": "drop procedure ❰123❱ ⟵ name expected"}
drop procedure if
{"msg": "drop procedure if ⟵ EXISTS expected"}
drop procedure if exists
{"msg": "drop procedure if exists ⟵ name expected"}
drop procedure test abc
{"msg": "drop procedure test ❰abc❱ ⟵ ; expected"}
# test: drop procedure
drop procedure test
show procedures
[]
# test: drop procedure if exists
drop procedure test
{"msg": "procedure 'test': not exists"}
drop procedure if exists test
show procedures
[]
# test: alter procedure statment parsing
alter procedure
{"msg": "alter procedure ⟵ name expected"}
alter procedure 123
{"msg": "alter procedure ❰123❱ ⟵ name expected"}
alter procedure test
{"msg": "alter procedure test ⟵ RENAME expected"}
alter procedure test rename
{"msg": "alter procedure test rename ⟵ name expected"}
alter procedure test rename to
{"msg": "alter procedure test rename to ⟵ name expected"}
alter procedure test rename "hello"
{"msg": "alter procedure test rename ❰\"hello\"❱ ⟵ name expected"}
# test: alter procedure rename
create procedure test() begin select 1 end
select system.procedures()
[[{
  "schema": "public",
  "name": "test",
  "text": "select 1",
  "columns": [],
  "vars": []
}]]
alter procedure test rename to test2
select system.procedures()
[[{
  "schema": "public",
  "name": "test2",
  "text": "select 1",
  "columns": [],
  "vars": []
}]]
# test: alter procedure rename (already exists)
alter procedure test2 rename to test2
{"msg": "procedure 'test2': already exists"}
# test: alter procedure rename (schema rename)
alter procedure test2 rename to test.test
{"msg": "schema 'test': not exists"}
create schema test
alter procedure test2 rename to test.test
show procedure test.test
[{
  "schema": "test",
  "name": "test",
  "text": "select 1",
  "columns": [],
  "vars": []
}]
drop procedure test.test
show procedures
[]
# test: dep (table drop)
create table x (id int primary key)
create procedure test() begin insert into x values (0) end
drop table x
{"msg": "relation has dependency on the procedure 'public.test'"}
drop procedure test
drop table x
# test: dep (table rename)
create table x (id int primary key)
create procedure test() begin insert into x values (0) end
alter table x rename to y
{"msg": "relation has dependency on the procedure 'public.test'"}
drop procedure test
drop table x
# test: dep (procedure drop)
create procedure a() begin end
create procedure b() begin call a() end
drop procedure a
{"msg": "relation has dependency on the procedure 'public.b'"}
drop procedure b
drop procedure a
# test: dep (procedure rename)
create procedure a() begin end
create procedure b() begin call a() end
alter procedure a rename to x
{"msg": "relation has dependency on the procedure 'public.b'"}
drop procedure b
drop procedure a
disconnect S0
close E0
