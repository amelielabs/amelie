open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 3
connect E0 S0 127.0.0.1:3485
# test: select from table limit
create table test (id serial primary key)
insert into test generate 20
select * from test limit 100
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
explain select * from test limit 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "union_recv          1      0      -1    ",
      "06": "content             1      -      -     ",
      "07": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "table_open_part     0      0      10    # public.test (primary)",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 10     0      0     ",
      "05": "cjltd               1      4      0     ",
      "06": "table_readi64       2      0      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             0      0      0     ",
      "09": "table_next          0      5      0     ",
      "10": "table_close         0      0      0     ",
      "11": "result              0      0      0     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from test limit 1
[0]
select * from test limit 2
[0, 1]
select * from test limit 3
[0, 1, 6]
select * from test limit 4
[0, 1, 6, 7]
select * from test limit 10
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9]
select * from test limit 20
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
# test: select from table limit (type mismatch)
select * from test limit 'abc'
{"msg": "select * from test limit ❰'abc'❱ ⟵ integer type expected"}
select * from test limit null
{"msg": "select * from test limit ❰null❱ ⟵ integer type expected"}
# test: select from table limit 0
explain select * from test limit 0
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 0",
      "05": "union_recv          1      0      -1    ",
      "06": "content             1      -      -     ",
      "07": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 0",
      "02": "table_open_part     0      0      10    # public.test (primary)",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 10     0      0     ",
      "05": "cjltd               1      4      0     ",
      "06": "table_readi64       2      0      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             0      0      0     ",
      "09": "table_next          0      5      0     ",
      "10": "table_close         0      0      0     ",
      "11": "result              0      0      0     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from test limit 0
[]
select * from test limit -1
{"msg": "select * from test limit ❰-1❱ ⟵ positive integer value expected"}
# test: select from table limit offset
explain select * from test limit 1 offset 0
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "int                 1      -      0     # 0",
      "06": "union_recv          2      0      1     ",
      "07": "content             2      -      -     ",
      "08": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "int                 2      -      0     # 0",
      "03": "addii               3      1      2     ",
      "04": "table_open_part     0      0      12    # public.test (primary)",
      "05": "jmp                 7      0      0     ",
      "06": "jmp                 12     0      0     ",
      "07": "cjltd               3      6      0     ",
      "08": "table_readi64       1      0      0     ",
      "09": "push                1      0      0     ",
      "10": "set_add             0      0      0     ",
      "11": "table_next          0      7      0     ",
      "12": "table_close         0      0      0     ",
      "13": "result              0      0      0     ",
      "14": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from test limit 1 offset 0
[0]
# test: select from table limit offset (type mismatch)
select * from test limit 1 offset 'abc'
{"msg": "select * from test limit 1 offset ❰'abc'❱ ⟵ integer type expected"}
select * from test limit 1 offset null
{"msg": "select * from test limit 1 offset ❰null❱ ⟵ integer type expected"}
# test: select from table limit offset #2
explain select * from test limit 1 offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "int                 1      -      0     # 1",
      "06": "union_recv          2      0      1     ",
      "07": "content             2      -      -     ",
      "08": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "int                 2      -      0     # 1",
      "03": "addii               3      1      2     ",
      "04": "table_open_part     0      0      12    # public.test (primary)",
      "05": "jmp                 7      0      0     ",
      "06": "jmp                 12     0      0     ",
      "07": "cjltd               3      6      0     ",
      "08": "table_readi64       1      0      0     ",
      "09": "push                1      0      0     ",
      "10": "set_add             0      0      0     ",
      "11": "table_next          0      7      0     ",
      "12": "table_close         0      0      0     ",
      "13": "result              0      0      0     ",
      "14": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from test limit 1 offset 1
[1]
select * from test limit 1 offset 2
[6]
select * from test limit 1 offset 3
[7]
select * from test limit 1 offset 4
[8]
# test: select from table limit offset #3
select * from test limit 2 offset 1
[1, 6]
select * from test limit 2 offset 2
[6, 7]
select * from test limit 2 offset 3
[7, 8]
select * from test limit 2 offset 4
[8, 14]
# test: select from table limit offset #4
select * from test limit 2 offset 0
[0, 1]
select * from test limit 1 offset -1
{"msg": "select * from test limit 1 offset ❰-1❱ ⟵ positive integer value expected"}
# test: select from table limit offset #5
select * from test limit 0 offset 1
[]
select * from test limit 0 offset 2
[]
select * from test limit 0 offset 3
[]
select * from test limit 0 offset 4
[]
# test: select from table offset
explain select * from test offset 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "union_recv          1      -1     0     ",
      "06": "content             1      -      -     ",
      "07": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      6     # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_add             0      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "result              0      0      0     ",
      "08": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from test offset 1
[1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 2
[6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 3
[7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 4
[8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 0
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset -1
{"msg": "select * from test offset ❰-1❱ ⟵ positive integer value expected"}
# test: select from table, table limit
select test.id, t.id from test, test t
[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [14, 0], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [15, 0], [15, 1], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [17, 0], [17, 1], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [18, 0], [18, 1], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [19, 0], [19, 1], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [13, 0], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [16, 0], [16, 1], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19]]
select test.id, t.id from test, test t limit 1
[[0, 0]]
select test.id, t.id from test, test t limit 2
[[0, 0], [0, 1]]
select test.id, t.id from test, test t limit 3
[[0, 0], [0, 1], [0, 2]]
select test.id, t.id from test, test t limit 4
[[0, 0], [0, 1], [0, 2], [0, 3]]
select test.id, t.id from test, test t limit 0
[]
select test.id, t.id from test, test t limit -1
{"msg": "select test.id, t.id from test, test t limit ❰-1❱ ⟵ positive integer value expected"}
# test: select from table, table limit offset
select test.id, t.id from test, test t limit 1 offset 0
[[0, 0]]
select test.id, t.id from test, test t limit 1 offset 1
[[0, 1]]
select test.id, t.id from test, test t limit 1 offset 2
[[0, 2]]
select test.id, t.id from test, test t limit 1 offset 3
[[0, 3]]
select test.id, t.id from test, test t limit 1 offset 4
[[0, 4]]
select test.id, t.id from test, test t limit 1 offset -1
{"msg": "select test.id, t.id from test, test t limit 1 offset ❰-1❱ ⟵ positive integer value expected"}
drop table test
disconnect S0
close E0
