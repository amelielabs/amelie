open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 2
connect E0 S0 localhost:3485
# test: agg state
select agg_count()
{"msg": "agg_count(): expected 2 arguments, but got 0"}
select null::agg_count()
{"msg": "agg_count(): expected 2 arguments, but got 1"}
select 1::agg_count(1)
{"msg": "unsupported aggregate state"}
select null::agg_sum([])
{"msg": "unsupported aggregate operation type"}
select null::agg_sum("")
{"msg": "unsupported aggregate operation type"}
select null::agg_count([])
[1]
select null::agg_count("")
[1]
# test: agg_count(int)
select null::agg_count(1)
[1]
select null::agg_count(1)::type
["aggregate"]
select null::agg_count(1)::agg_count(2)::agg_count(3)
[3]
select null::agg_count(1)::agg_count(null)::agg_count(3)
[2]
select null::agg_count(null)::agg_count(null)::agg_count(3)
[1]
select null::agg_count(null)
[null]
# test: agg_count(real)
select null::agg_count(1.0)
[1]
select null::agg_count(1.0)::type
["aggregate"]
select null::agg_count(1.0)::agg_count(2.0)::agg_count(3.0)
[3]
select null::agg_count(1.0)::agg_count(null)::agg_count(3.0)
[2]
select null::agg_count(null)::agg_count(null)::agg_count(3.0)
[1]
# test: agg_count(merge)
select null::agg_count(1)::agg_count( null::agg_count(1)::agg_count(2)::agg_count(3) )
[4]
# test: agg_min(int)
select null::agg_min(1)
[1]
select null::agg_min(2)::agg_min(1)::agg_min(0)
[0]
select null::agg_min(2)::agg_min(1)::agg_min(null)
[1]
select null::agg_min(null)
[null]
# test: agg_min(real)
select null::agg_min(1.0)
[1]
select null::agg_min(2.0)::agg_min(1.0)::agg_min(0.0)
[0]
select null::agg_min(2.0)::agg_min(1.0)::agg_min(null)
[1]
select null::agg_min(null)
[null]
# test: agg_min(merge)
select null::agg_min(1)::agg_min( null::agg_min(1)::agg_min(2)::agg_min(3) )
[1]
# test: agg_max(int)
select null::agg_max(1)
[1]
select null::agg_max(2)::agg_max(1)::agg_max(0)
[2]
select null::agg_max(null)::agg_max(2)::agg_max(1)
[2]
select null::agg_max(null)
[null]
# test: agg_max(real)
select null::agg_max(1.0)
[1]
select null::agg_max(2.0)::agg_max(1.0)::agg_max(0.0)
[2]
select null::agg_max(null)::agg_max(2.0)::agg_max(1.0)
[2]
select null::agg_max(null)
[null]
# test: agg_max(merge)
select null::agg_max(1)::agg_max( null::agg_max(1)::agg_max(2)::agg_max(3) )
[3]
# test: agg_sum(int)
select null::agg_sum(1)
[1]
select null::agg_sum(2)::agg_sum(1)::agg_sum(0)
[3]
select null::agg_sum(null)::agg_sum(2)::agg_sum(1)
[3]
select null::agg_sum(null)
[null]
# test: agg_sum(real)
select null::agg_sum(1.0)
[1]
select null::agg_sum(2.0)::agg_sum(1.0)::agg_sum(0.0)
[3]
select null::agg_sum(null)::agg_sum(2.0)::agg_sum(1.0)
[3]
select null::agg_sum(null)
[null]
# test: agg_sum(merge)
select null::agg_sum(1)::agg_sum( null::agg_sum(1)::agg_sum(2)::agg_sum(3) )
[7]
# test: agg_avg(int)
select null::agg_avg(1)
[1]
select null::agg_avg(2)::agg_avg(1)::agg_avg(0)
[1]
select null::agg_avg(null)::agg_avg(2)::agg_avg(1)
[1]
select null::agg_avg(null)
[null]
# test: agg_avg(real)
select null::agg_avg(1.0)
[1]
select null::agg_avg(2.0)::agg_avg(1.0)::agg_avg(0.0)
[1]
select null::agg_avg(null)::agg_avg(2.0)::agg_avg(1.0)
[1.5]
select null::agg_avg(null)
[null]
# test: agg_avg(merge)
select null::agg_avg(1)::agg_avg( null::agg_avg(1)::agg_avg(2)::agg_avg(3) )
[1]
# test: agg eq
select null::agg_count(0) = null::agg_count(1)
[true]
select null::agg_count(0) = null::agg_count(null)
[false]
select null::agg_count(0) = null::agg_count(1)::agg_count(1)
[false]
# test: agg lt
select null::agg_count(0) < null::agg_count(1)
[false]
select null::agg_count(0) < null::agg_count(null)
[false]
select null::agg_count(0) < null::agg_count(1)::agg_count(1)
[true]
# test: agg lte
select null::agg_count(0) <= null::agg_count(1)
[true]
select null::agg_count(0) <= null::agg_count(null)
[false]
select null::agg_count(0) <= null::agg_count(1)::agg_count(1)
[true]
# test: agg gt
select null::agg_count(0) > null::agg_count(1)
[false]
select null::agg_count(0) > null::agg_count(null)
[true]
select null::agg_count(0) > null::agg_count(1)::agg_count(1)
[false]
# test: agg gte
select null::agg_count(0) >= null::agg_count(1)
[true]
select null::agg_count(0) >= null::agg_count(null)
[true]
select null::agg_count(0) >= null::agg_count(1)::agg_count(1)
[false]
# test: agg to real
select null::agg_count(1)::agg_count(1)::real
[2]
select null::agg_count(1)::agg_count(1)::real::type
["real"]
# test: agg to int
select null::agg_count(1)::agg_count(1)::int
[2]
select null::agg_count(1)::agg_count(1)::int::type
["int"]
# test: agg expr
select null::agg_count(1) + 1
{"msg": "bad + expression types"}
select null::agg_count(1) + null::agg_count(1)
{"msg": "bad + expression types"}
# test: agg column (count)
create table test (id int primary key, agg agg(count))
insert into test values (0, 10) on conflict do update set agg = agg::agg_count(@[1])
select agg::type from test
["aggregate"]
select * from test
[[0, 1]]
insert into test values (0, 20) on conflict do update set agg = agg::agg_count(@[1])
select * from test
[[0, 2]]
drop table test
# test: agg column (min)
create table test (id int primary key, agg agg(min))
insert into test values (0, 10) on conflict do update set agg = agg::agg_min(@[1])
select agg::type from test
["aggregate"]
select * from test
[[0, 10]]
insert into test values (0, 20) on conflict do update set agg = agg::agg_min(@[1])
select * from test
[[0, 10]]
drop table test
# test: agg column (max)
create table test (id int primary key, agg agg(max))
insert into test values (0, 10) on conflict do update set agg = agg::agg_max(@[1])
select agg::type from test
["aggregate"]
select * from test
[[0, 10]]
insert into test values (0, 20) on conflict do update set agg = agg::agg_max(@[1])
select * from test
[[0, 20]]
drop table test
# test: agg column (sum)
create table test (id int primary key, agg agg(sum))
insert into test values (0, 10) on conflict do update set agg = agg::agg_sum(@[1])
select agg::type from test
["aggregate"]
select * from test
[[0, 10]]
insert into test values (0, 20) on conflict do update set agg = agg::agg_sum(@[1])
select * from test
[[0, 30]]
drop table test
# test: agg column (avg)
create table test (id int primary key, agg agg(avg))
insert into test values (0, 10) on conflict do update set agg = agg::agg_avg(@[1])
select agg::type from test
["aggregate"]
select * from test
[[0, 10]]
insert into test values (0, 20) on conflict do update set agg = agg::agg_avg(@[1])
select * from test
[[0, 15]]
drop table test
disconnect S0
close E0
