#

open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }];
connect E0 S0 127.0.0.1:3485;

# test: return (last stmt)
explain select 1;
explain begin select 1; select 2; end;
explain begin select 1; select 2; select 3; end;
begin select 1; select 2; end;

# test: return (last stmt, if)
explain if true then end;
if true then end;

explain begin if true then end; select 1; end;
begin if true then end; select 1; end;

explain begin if true then select 1; end; select 2; end;
begin if true then select 1; end; select 2; end;

# test: return (last stmt select into)
explain begin declare x int; select 123 into x; end;
begin declare x int; select 123 into x; end;

# test: return var
return x;
begin declare x int; return x; end;
begin declare x int := 123; return x; end;

# test: return var format
begin declare x int := 123; return x format; end;
begin declare x int := 123; return x format 'json-obj'; end;

## test: return var table
#declare x table (a int, b int); select 1, 2 into x; return x
#declare x table (a int, b int); select 1, 2 into x; return x format 'json-obj'
#declare x table (a int, b int); select 1, 2 into x; select x format 'json-obj'

# test: return from cte
begin declare x int; with a as (return x) select 1; end;
begin declare x int; with a as (select 1) return x; end;

# test: return return
explain begin
	declare x int := 0;
	return x;
	return x;
end;
begin
	declare x int := 0;
	return x;
	return x;
end;

# test: if return
explain begin
	declare x int;
	if true then
		x := 12;
		return x;
	end;
end;
begin
	declare x int;
	if true then
		x := 12;
		return x;
	end;
end;

# test: if return return
explain begin
	declare x int;
	if true then
		x := 12;
		return x;
	end;
	return x;
end;
begin
	declare x int;
	if true then
		x := 12;
		return x;
	end;
	return x;
end;

explain begin
	declare x int;
	if false then
		x := 12;
		return x;
	end;
	return x;
end;
begin
	declare x int;
	if false then
		x := 12;
		return x;
	end;
	return x;
end;

# test: if return return (dep)
create table test (id int primary key);
insert into test values (1), (2), (3);

explain begin
	declare x int;
	select id into x from test;
	if true then
		x := x + 1;
		return x;
	end;
	return x;
end;
begin
	declare x int;
	select id into x from test;
	if true then
		x := x + 1;
		return x;
	end;
	return x;
end;

explain begin
	declare x int;
	select id into x from test;
	if false then
		x := x + 1;
		return x;
	end;
	return x;
end;
begin
	declare x int;
	select id into x from test;
	if false then
		x := x + 1;
		return x;
	end;
	return x;
end;

explain begin
	declare x int;
	if true then
		select id into x from test;
		return x;
	end;
	return x;
end;
begin
	declare x int;
	if true then
		select id into x from test;
		return x;
	end;
	return x;
end;

explain begin
	declare x int;
	if false then
		select id into x from test;
		return x;
	end;
	return x;
end;
begin
	declare x int;
	if false then
		select id into x from test;
		return x;
	end;
	return x;
end;

# test: for if return
explain begin
	declare x int := 0;
	for i in (select id from test) do
		if i.id > 2 then
			return x;
		end;
		x := x + 1;
	end;
	select x;
end;
begin
	declare x int := 0;
	for i in (select id from test) do
		if i.id > 2 then
			return x;
		end;
		x := x + 1;
	end;
	select x;
end;

insert into test values (4), (5);

begin
	declare x int := 0;
	for i in (select id from test) do
		if i.id > 2 then
			return x;
		end;
		x := x + 1;
	end;
	select x;
end;
begin
	declare x int := 0;
	for i in ([1,2,3,4]) do
		if i::int > 2 then
			return x;
		end;
		x := x + 1;
	end;
	select x;
end;
begin
	declare x int := 0;
	for i in ([1,2,3,4]) do
		if i::int > 2 then
			return select x;
		end;
		x := x + 1;
	end;
	select x;
end;

# test: return insert
explain return insert into test values (6);
return insert into test values (6);

explain begin
	return insert into test values (6);
	select 1;
end;
begin
	return insert into test values (6);
	select 1;
end;

# test: return insert returning
explain return insert into test values (7) returning *;
return insert into test values (7) returning *;

explain begin
	return insert into test values (8) returning *;
	select 1;
end;
begin
	return insert into test values (8) returning *;
	select 1;
end;

# test: if return insert returning
explain begin
	if true then
		return insert into test values (9) returning *;
	end;
	select 0;
end;
begin
	if true then
		return insert into test values (9) returning *;
	end;
	select 0;
end;
begin
	if false then
		return insert into test values (9) returning *;
	end;
	select 0;
end;

# test: return select
explain return select 1 as a, 2 as b;
return select 1 as a, 2 as b;
return select 1 as a, 2 as b format 'json-obj';
return select system.tables();

begin
	declare list json := [];
	for it in system.tables() do
		list := list::append([it.schema, it.name]);
	end;
	return list;
end;

select `schema`, name from system.tables();

begin
	declare list json := [];
	for it in system.tables() do
		list := list::append({"schema": it.schema, "name": it.name});
	end;
	return list;
end;
begin
	declare list json := [];
	for it in system.tables() do
		list := list::append({"schema": it.schema, "name": it.name});
	end;
	select list;
end;

begin
	declare list json := [];
	for it in system.tables() do
		list := list::append({"schema": it.schema, "name": it.name});
	end;
	select list;
end;

select [] -> self::append({"schema": it.schema, "name": it.name}) from system.tables() as it;

begin
	declare list json;
	select
		[] -> self::append({"schema": it.schema, "name": it.name})
	into
		list from system.tables() as it;
	return list;
end;

begin
	declare list json;
	select
		[] -> append(self, {"schema": it.schema, "name": it.name})
	into
		list
	from
		system.tables() as it;
	return list;
end;

# test: return ;
explain return;
return;

explain begin
	select 123;
	return;
	select 7;
end;
begin
	select 123;
	return;
	select 7;
end;

begin
	declare x int := 0;
	for i in ([1,2,3]) do
		x := i::int;
		return;
	end;
	select x;
end;

# test: return expr
explain return 123;
return 123;
return 2 * 2;
return select 123;
return select (select 123);

drop table test;

disconnect S0;
close E0;
