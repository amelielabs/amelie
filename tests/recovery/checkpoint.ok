open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 3;
connect E0 S0 127.0.0.1:3485;
# test: default checkpoint
select system.state().checkpoint;
[1]
# test: default checkpoint_compression
select system.config().checkpoint_compression;
["zstd"]
# test: checkpoint (no data)
checkpoint;
select system.state().checkpoint;
[1]
# test: create table
create table test (id serial primary key);
select system.state().lsn;
[2]
# test: checkpoint
checkpoint;
select system.state().lsn;
[2]
select system.state().checkpoint;
[2]
# test: restart/recover
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
select system.state().lsn;
[2]
select system.state().checkpoint;
[2]
select * from test;
[]
# test: insert
insert into test () values (), (), ();
select identity_of("public", "test");
[3]
# test: restart/recover (checkpoint + wal)
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
select system.state().lsn;
[3]
select system.state().checkpoint;
[2]
select identity_of("public", "test");
[3]
select * from test;
[0, 1, 2]
# test: checkpoint
checkpoint;
select system.state().lsn;
[3]
select system.state().checkpoint;
[3]
# test: restart/recover (checkpoint)
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
select system.state().lsn;
[3]
select system.state().checkpoint;
[3]
select identity_of("public", "test");
[3]
select * from test;
[0, 1, 2]
# test: create function
create function reverse(array json) return json
begin
	declare rev json := [];
	for it in (array) do
		rev := rev::push(it);
	end;
	return rev;
end;
show functions extended;
[{
  "schema": "public",
  "name": "reverse",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(it);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse;
[[3, 2, 1]]
# test: restart/recover (checkpoint + wal)
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
select system.state().lsn;
[4]
select system.state().checkpoint;
[3]
show functions extended;
[{
  "schema": "public",
  "name": "reverse",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(it);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse;
[[3, 2, 1]]
# test: checkpoint
checkpoint;
select system.state().lsn;
[4]
select system.state().checkpoint;
[4]
# test: restart/recover (checkpoint)
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
select system.state().lsn;
[4]
select system.state().checkpoint;
[4]
show functions extended;
[{
  "schema": "public",
  "name": "reverse",
  "text": "begin\n\tdeclare rev json := [];\n\tfor it in (array) do\n\t\trev := rev::push(it);\n\tend;\n\treturn rev;\nend",
  "type": 5,
  "args": [{
    "name": "array",
    "type": 5,
    "type_size": 0,
    "constraints": [["default", null]]
  }],
  "returning": []
}]
select [1,2,3]::reverse;
[[3, 2, 1]]
# test: create schema
create schema test;
alter table public.test rename to test.test;
select system.state().lsn;
[6]
# test: restart/recover (checkpoint + wal)
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
select system.state().lsn;
[6]
select system.state().checkpoint;
[4]
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test",
  "system": false
}]
select identity_of("test", "test");
[3]
select * from test.test;
[0, 1, 2]
# test: checkpoint
checkpoint;
select system.state().lsn;
[6]
select system.state().checkpoint;
[6]
# test: restart/recover (checkpoint)
disconnect S0;
close E0;
open E0;
connect E0 S0 127.0.0.1:3485;
select system.state().lsn;
[6]
select system.state().checkpoint;
[6]
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test",
  "system": false
}]
select identity_of("test", "test");
[3]
select * from test.test;
[0, 1, 2]
disconnect S0;
close E0;
# test: checkpoint (compression none)
open E1 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 3, "checkpoint_compression": "none";
connect E1 S1 127.0.0.1:3485;
show checkpoint_compression;
["none"]
create table test (id serial primary key);
insert into test values (1), (2), (3);
checkpoint;
# test: restart/recover (checkpoint)
disconnect S1;
close E1;
open E1;
connect E1 S1 127.0.0.1:3485;
show checkpoint_compression;
["none"]
select * from test;
[1, 2, 3]
disconnect S1;
close E1;
