env_open E0
connect E0 S0
connect: on_connect
# test: drop schema with dependency
create schema test
create table test.a(id int primary key)
create table test.b(id int primary key)
drop schema test
query: on_error
{"code": 1, "msg": "table 'a' depends on schema 'test"}
select *.schema, *.name from system.tables()
["test", "a"]
["test", "b"]
create view test.test_view as select 1
select * from system.views()
{"schema": "test", "name": "test_view", "query": "select 1", "def": {"column": [], "key": [], "key_unique": false, "key_exclude": 0, "reserved": 0}}
# test: drop schema cascade
drop schema test cascade
select * from system.schemas()
{"name": "system", "system": true, "create": false}
{"name": "public", "system": true, "create": true}
# test: drop schema cascade (tables)
select *.schema, *.name from system.tables()
# test: drop schema cascade (views)
select * from system.views()
create schema test
create table test.a(id int primary key)
create table test.b(id int primary key)
drop schema test cascade
select *.schema, *.name from system.tables()
# test: alter schema rename
create schema test
create table test.a(id int primary key)
create table test.b(id int primary key)
select * from system.schemas()
{"name": "system", "system": true, "create": false}
{"name": "public", "system": true, "create": true}
{"name": "test", "system": false, "create": true}
select *.schema, *.name from system.tables()
["test", "a"]
["test", "b"]
alter schema test rename test2
select * from system.schemas()
{"name": "system", "system": true, "create": false}
{"name": "public", "system": true, "create": true}
{"name": "test2", "system": false, "create": true}
select *.schema, *.name from system.tables()
["test2", "a"]
["test2", "b"]
disconnect S0
env_close E0
