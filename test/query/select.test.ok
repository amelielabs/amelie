open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: select statement parsing
select
{"msg": "select ⟵ bad expression"}
select,
{"msg": "select❰,❱ ⟵ bad expression"}
select null null
{"msg": "select null ❰null❱ ⟵ ; expected"}
select null 1
{"msg": "select null ❰1❱ ⟵ ; expected"}
select from
{"msg": "select ❰from❱ ⟵ bad expression"}
select 1 from
{"msg": "select 1 from ⟵ target name expected"}
select 1 from "test"
{"msg": "select 1 from ❰\"test\"❱ ⟵ target name expected"}
select 1 from name
{"msg": "select 1 from ❰name❱ ⟵ relation not found"}
select 1 from 1 where
{"msg": "select 1 from ❰1❱ ⟵ target name expected"}
select 1 from 1 where null
{"msg": "select 1 from ❰1❱ ⟵ target name expected"}
# test: select expr
select 1
[1]
select 1, 2
[[1, 2]]
select [1, 2]
[[1, 2]]
select {}
[{}]
select null
[null]
select null, null
[[null, null]]
explain select 1
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "content             0      -      -     ",
      "05": "ret                 0      0      0     "
    }
  },
  "access": []
}]
explain select [1, 2, 3]
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "json                1      0      0     ",
      "02": "push                1      0      0     ",
      "03": "set_add             0      0      0     ",
      "04": "content             0      -      -     ",
      "05": "ret                 0      0      0     "
    }
  },
  "access": []
}]
# test: select name
select name
{"msg": "select ❰name❱ ⟵ column not found"}
select name.name
{"msg": "select ❰name.name❱ ⟵ target not found"}
select name.name.name
{"msg": "select ❰name.name.name❱ ⟵ target not found"}
# test: select *
select *
{"msg": "select ❰*❱ ⟵ no targets defined"}
select *, *
{"msg": "select ❰*❱ ⟵ no targets defined"}
# test: select * from table
create table test (id serial primary key)
insert into test () values ()
insert into test () values ()
insert into test () values ()
explain select * from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      6     # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_add             0      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "result              0      0      0     ",
      "08": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select * from test
[0, 1, 2]
# test: select *, * from table
select *, * from test
[[0, 0], [1, 1], [2, 2]]
# test: select target.* from table
select test.* from test
[0, 1, 2]
select test.*, *, test.* from test
[[0, 0, 0], [1, 1, 1], [2, 2, 2]]
select `test.*` from test
[0, 1, 2]
drop table test
# test: select column from table
create table test (id serial primary key, data int default 0)
insert into test () values ()
insert into test () values ()
insert into test () values ()
select * from test
[[0, 0], [1, 0], [2, 0]]
explain select id, data from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "push                1      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select id, data from test
[[0, 0], [1, 0], [2, 0]]
select `id`, data from test
[[0, 0], [1, 0], [2, 0]]
drop table test
# test: select column.path from table
create table test (id serial primary key, data json)
insert into test (data) values ({"data": 123})
insert into test (data) values ({"data": 123})
insert into test (`data`) values ({"data": 123})
select * from test
[[0, {
  "data": 123
}], [1, {
  "data": 123
}], [2, {
  "data": 123
}]]
explain select data.data from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readj         1      0      1     ",
      "03": "string              2      20     0     # data",
      "04": "dotjs               3      1      2     ",
      "05": "push                3      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select data.data from test
[123, 123, 123]
drop table test
# test: select column.path from table #2
create table test (id serial primary key, data json)
insert into test (data) values ({"data": {"data": 123}})
insert into test (data) values ({"data": {"data": 123}})
insert into test (data) values ({"data": {"data": 123}})
select * from test
[[0, {
  "data": {
    "data": 123
  }
}], [1, {
  "data": {
    "data": 123
  }
}], [2, {
  "data": {
    "data": 123
  }
}]]
explain select data.data.data from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readj         1      0      1     ",
      "03": "string              2      20     0     # data.data",
      "04": "dotjs               3      1      2     ",
      "05": "push                3      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select data.data.data from test
[123, 123, 123]
drop table test
# test: select target.column from table
create table test (id serial primary key, data int default 0)
insert into test () values ()
insert into test () values ()
insert into test () values ()
explain select test.id, test.data from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "push                1      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select test.id, test.data from test
[[0, 0], [1, 0], [2, 0]]
drop table test
# test: select target.column.path from table
create table test (id serial primary key, data json)
insert into test (data) values ({"data": 123})
insert into test (data) values ({"data": 123})
insert into test (data) values ({"data": 123})
explain select test.data.data from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readj         1      0      1     ",
      "03": "string              2      20     0     # data",
      "04": "dotjs               3      1      2     ",
      "05": "push                3      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select test.data.data from test
[123, 123, 123]
select test.data.data, * from test
[[123, 0, {
  "data": 123
}], [123, 1, {
  "data": 123
}], [123, 2, {
  "data": 123
}]]
select test.data.data, *, test.* from test
[[123, 0, {
  "data": 123
}, 0, {
  "data": 123
}], [123, 1, {
  "data": 123
}, 1, {
  "data": 123
}], [123, 2, {
  "data": 123
}, 2, {
  "data": 123
}]]
drop table test
# test: select alias.column from table
create table test (id serial primary key, data int default 0)
insert into test () values ()
insert into test () values ()
insert into test () values ()
select * from test
[[0, 0], [1, 0], [2, 0]]
explain select alias.id, alias.data from test alias
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "push                1      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select alias.id, alias.data from test alias
[[0, 0], [1, 0], [2, 0]]
drop table test
# test: select alias.column.path from table
create table test (id serial primary key, data json)
insert into test (data) values ({"data": 123})
insert into test (data) values ({"data": 123})
insert into test (data) values ({"data": 123})
explain select alias.data.data from test alias
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readj         1      0      1     ",
      "03": "string              2      20     0     # data",
      "04": "dotjs               3      1      2     ",
      "05": "push                3      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select alias.data.data from test alias
[123, 123, 123]
select alias.data['data'] from test alias
[123, 123, 123]
drop table test
# test: select alias.* from table
create table test (id serial primary key, data int default 0)
insert into test () values ()
insert into test () values ()
insert into test () values ()
select * from test
[[0, 0], [1, 0], [2, 0]]
explain select alias.id, alias.data from test alias
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_open_part     0      0      8     # public.test (primary)",
      "02": "table_readi64       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "push                1      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          0      2      0     ",
      "08": "table_close         0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select alias.id, alias.* from test alias
[[0, 0, 0], [1, 1, 0], [2, 2, 0]]
drop table test
# test: select * from function() (missing)
select * from unknown()
{"msg": "select * from ❰unknown❱ ⟵ function not found"}
# test: select * from function() (unsupported type)
select * from now()
{"msg": "select * from ❰now❱ ⟵ function must return result set or JSON"}
# test: select * from function() (unsupported json type)
select * from system.wal()
{"msg": "FROM: json array expected"}
create user test
select * from system.users()
[{
  "name": "test"
}]
explain select * from system.users()
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "call                1      -      0     # system.users()",
      "02": "json_open           0      1      7     ",
      "03": "json_read           2      0      0     ",
      "04": "push                2      0      0     ",
      "05": "set_add             0      0      0     ",
      "06": "json_next           0      3      0     ",
      "07": "json_close          0      1      0     ",
      "08": "content             0      -      -     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": []
}]
# test: select column from function()
select name from system.users()
["test"]
explain select name from system.users()
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "call                1      -      0     # system.users()",
      "02": "json_open           0      1      9     ",
      "03": "json_read           2      0      0     ",
      "04": "string              3      0      0     # name",
      "05": "dotjs               4      2      3     ",
      "06": "push                4      0      0     ",
      "07": "set_add             0      0      0     ",
      "08": "json_next           0      3      0     ",
      "09": "json_close          0      1      0     ",
      "10": "content             0      -      -     ",
      "11": "ret                 0      0      0     "
    }
  },
  "access": []
}]
select non_exists_column from system.users()
[null]
# test: select target.column from function()
select users.name from system.users()
["test"]
# test: select alias.column from function()
select t.name from system.users() t
["test"]
drop user test
# test: select target.column.path from function()
create table test (id serial primary key)
select indexes[0].type from system.tables()
[2]
select tables.indexes[0].type from system.tables()
[2]
select t.indexes[0].type from system.tables() t
[2]
drop table test
# test: select * from (expr)
select * from (
{"msg": "select * from ( ⟵ bad expression"}
select * from (1
{"msg": "select * from (1 ⟵ ) expected"}
select * from (1)
{"msg": "select * from (1) ⟵ subquery must have an alias"}
# test: select * from (unsupported type)
select * from (1) t
{"msg": "select * from (❰1❱ ⟵ unsupported expression type int"}
# test: select * from ({})
select * from ({}) t
{"msg": "FROM: json array expected"}
# test: select * from ([])
explain select * from ([]) t
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "json                1      0      0     ",
      "02": "json_open           0      1      7     ",
      "03": "json_read           2      0      0     ",
      "04": "push                2      0      0     ",
      "05": "set_add             0      0      0     ",
      "06": "json_next           0      3      0     ",
      "07": "json_close          0      1      0     ",
      "08": "content             0      -      -     ",
      "09": "ret                 0      0      0     "
    }
  },
  "access": []
}]
select * from ([]) t
[]
# test: select target from ([])
select t from ([]) t
[]
select t.t from ([]) t
[]
select t.x from ([]) t
{"msg": "select ❰t.x❱ ⟵ column t.x not found"}
disconnect S0
close E0
