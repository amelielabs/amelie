open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }];
connect E0 S0 127.0.0.1:3485;
# test: ensure system schemas exists
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}]
# test: create schema statement parsing
create;
{"msg": "create❰;❱ ⟵ USER|REPLICA|SCHEMA|TABLE|INDEX|FUNCTION expected"}
create schema;
{"msg": "create schema❰;❱ ⟵ name expected"}
create schema 123;
{"msg": "create schema ❰123❱ ⟵ name expected"}
create schema if;
{"msg": "create schema if❰;❱ ⟵ NOT expected"}
create schema if not;
{"msg": "create schema if not❰;❱ ⟵ EXISTS expected"}
create schema if not 123;
{"msg": "create schema if not ❰123❱ ⟵ EXISTS expected"}
create schema if not exists;
{"msg": "create schema if not exists❰;❱ ⟵ name expected"}
create schema test abc;
{"msg": "create schema test ❰abc❱ ⟵ ; expected"}
# test: create schema
create schema test;
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test",
  "system": false
}]
select system.schemas();
[[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test",
  "system": false,
  "create": true
}]]
# test: create schema if not exists
create schema test;
{"msg": "schema 'test': already exists"}
create schema if not exists test;
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}, {
  "name": "test",
  "system": false
}]
# test: drop schema statement parsing
drop schema;
{"msg": "drop schema❰;❱ ⟵ name expected"}
drop schema 123;
{"msg": "drop schema ❰123❱ ⟵ name expected"}
drop schema if;
{"msg": "drop schema if❰;❱ ⟵ EXISTS expected"}
drop schema if exists;
{"msg": "drop schema if exists❰;❱ ⟵ name expected"}
drop schema test abc;
{"msg": "drop schema test ❰abc❱ ⟵ ; expected"}
# test: drop schema
drop schema test;
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}]
# test: drop schema if exists
drop schema test;
{"msg": "schema 'test': not exists"}
drop schema if exists test;
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}]
# test: drop system schema
drop schema public;
{"msg": "schema 'public': system schema cannot be dropped"}
show schemas;
[{
  "name": "system",
  "system": true
}, {
  "name": "public",
  "system": true
}]
# test: drop schema cascade
create schema test;
drop schema test cascade;
select system.schemas();
[[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]]
# test: drop schema cascade (tables)
show tables;
[]
create schema test;
create table test.a(id int primary key);
create table test.b(id int primary key);
drop schema test cascade;
show tables;
[]
# test: drop schema with dependency
create schema test;
create table test.test(id int primary key);
create function test.fn() begin end;
drop schema test;
{"msg": "table 'test' depends on schema 'test"}
drop table test.test;
drop schema test;
{"msg": "function 'fn' depends on schema 'test"}
drop function test.fn;
drop schema test;
# test: drop schema with udf dep
create schema test;
create table test.test(id int primary key);
create function fn()
begin
	select * from test.test;
end;
drop schema test;
{"msg": "function 'public.fn' depends on schema 'test"}
drop schema test cascade;
{"msg": "function 'public.fn' depends on schema 'test"}
drop function fn;
drop schema test;
{"msg": "table 'test' depends on schema 'test"}
drop schema test cascade;
# test: alter schema statment parsing
alter schema;
{"msg": "alter schema❰;❱ ⟵ name expected"}
alter schema 123;
{"msg": "alter schema ❰123❱ ⟵ name expected"}
alter schema test;
{"msg": "alter schema test❰;❱ ⟵ RENAME expected"}
alter schema test rename;
{"msg": "alter schema test rename❰;❱ ⟵ TO expected"}
alter schema test rename to;
{"msg": "alter schema test rename to❰;❱ ⟵ name expected"}
alter schema test rename "hello";
{"msg": "alter schema test rename ❰\"hello\"❱ ⟵ TO expected"}
# test: alter schema rename
create schema test;
select system.schemas();
[[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test",
  "system": false,
  "create": true
}]]
alter schema test rename to test2;
select system.schemas();
[[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test2",
  "system": false,
  "create": true
}]]
drop schema test2;
# test: alter schema system
alter schema public rename to _public;
{"msg": "schema 'public': system schema cannot be altered"}
# test: alter schema rename cascade
create schema test;
create table test.a(id int primary key);
create table test.b(id int primary key);
alter schema test rename to test2;
select system.schemas();
[[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test2",
  "system": false,
  "create": true
}]]
select system.table('test2.a').name;
["a"]
select system.table('test2.b').name;
["b"]
drop schema test2 cascade;
# test: alter schema rename with udf dep
create schema test;
create table test.test(id int primary key);
create function fn()
begin
	select * from test.test;
end;
alter schema test rename to test2;
{"msg": "function 'public.fn' depends on schema 'test"}
drop function fn;
alter schema test rename to test2;
drop schema test2 cascade;
disconnect S0;
close E0;
