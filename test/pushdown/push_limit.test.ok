open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 3
connect E0 S0 localhost:3485
# test: select from table limit
create table test (id int primary key serial)
insert into test generate 20
select * from test limit 100
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
explain select * from test limit 1
[{
  "bytecode": {
    "coordinator": {
      "00": "send_all            0      0      -     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "merge_recv          1      0      -1    ",
      "06": "cte_set             0      1      0     ",
      "07": "body                0      0      0     ",
      "08": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "cntr_init           0      0      1     ",
      "03": "int                 1      -      0     # -2147483648",
      "04": "push                1      0      0     ",
      "05": "cursor_open         0      0      7     # public.test (primary)",
      "06": "jmp                 12     0      0     ",
      "07": "cntr_lte            0      0      6     ",
      "08": "cursor_readi32      1      0      0     ",
      "09": "push                1      0      0     ",
      "10": "set_add             0      0      0     ",
      "11": "cursor_next         0      7      0     ",
      "12": "cursor_close        0      0      0     ",
      "13": "result              0      0      0     ",
      "14": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 1
[0]
select * from test limit 2
[0, 1]
select * from test limit 3
[0, 1, 6]
select * from test limit 4
[0, 1, 6, 7]
select * from test limit 10
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9]
select * from test limit 20
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
# test: select from table limit (type mismatch)
select * from test limit 'abc'
{"msg": "LIMIT/OFFSET: integer type expected"}
select * from test limit null
{"msg": "LIMIT/OFFSET: integer type expected"}
# test: select from table limit 0
explain select * from test limit 0
[{
  "bytecode": {
    "coordinator": {
      "00": "send_all            0      0      -     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 0",
      "05": "merge_recv          1      0      -1    ",
      "06": "cte_set             0      1      0     ",
      "07": "body                0      0      0     ",
      "08": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 0",
      "02": "cntr_init           0      0      1     ",
      "03": "int                 1      -      0     # -2147483648",
      "04": "push                1      0      0     ",
      "05": "cursor_open         0      0      7     # public.test (primary)",
      "06": "jmp                 12     0      0     ",
      "07": "cntr_lte            0      0      6     ",
      "08": "cursor_readi32      1      0      0     ",
      "09": "push                1      0      0     ",
      "10": "set_add             0      0      0     ",
      "11": "cursor_next         0      7      0     ",
      "12": "cursor_close        0      0      0     ",
      "13": "result              0      0      0     ",
      "14": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 0
[]
select * from test limit -1
{"msg": "LIMIT/OFFSET: positive integer value expected"}
# test: select from table limit offset
explain select * from test limit 1 offset 0
[{
  "bytecode": {
    "coordinator": {
      "00": "send_all            0      0      -     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "int                 1      -      0     # 0",
      "06": "merge_recv          2      0      1     ",
      "07": "cte_set             0      2      0     ",
      "08": "body                0      0      0     ",
      "09": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "int                 2      -      0     # 0",
      "03": "addii               3      1      2     ",
      "04": "cntr_init           0      0      3     ",
      "05": "int                 1      -      0     # -2147483648",
      "06": "push                1      0      0     ",
      "07": "cursor_open         0      0      9     # public.test (primary)",
      "08": "jmp                 14     0      0     ",
      "09": "cntr_lte            0      0      8     ",
      "10": "cursor_readi32      1      0      0     ",
      "11": "push                1      0      0     ",
      "12": "set_add             0      0      0     ",
      "13": "cursor_next         0      9      0     ",
      "14": "cursor_close        0      0      0     ",
      "15": "result              0      0      0     ",
      "16": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 1 offset 0
[0]
# test: select from table limit offset (type mismatch)
select * from test limit 1 offset 'abc'
{"msg": "unsupported operation: <int> + <string>"}
select * from test limit 1 offset null
{"msg": "LIMIT/OFFSET: integer type expected"}
# test: select from table limit offset #2
explain select * from test limit 1 offset 1
[{
  "bytecode": {
    "coordinator": {
      "00": "send_all            0      0      -     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "int                 1      -      0     # 1",
      "06": "merge_recv          2      0      1     ",
      "07": "cte_set             0      2      0     ",
      "08": "body                0      0      0     ",
      "09": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "int                 2      -      0     # 1",
      "03": "addii               3      1      2     ",
      "04": "cntr_init           0      0      3     ",
      "05": "int                 1      -      0     # -2147483648",
      "06": "push                1      0      0     ",
      "07": "cursor_open         0      0      9     # public.test (primary)",
      "08": "jmp                 14     0      0     ",
      "09": "cntr_lte            0      0      8     ",
      "10": "cursor_readi32      1      0      0     ",
      "11": "push                1      0      0     ",
      "12": "set_add             0      0      0     ",
      "13": "cursor_next         0      9      0     ",
      "14": "cursor_close        0      0      0     ",
      "15": "result              0      0      0     ",
      "16": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 1 offset 1
[1]
select * from test limit 1 offset 2
[6]
select * from test limit 1 offset 3
[7]
select * from test limit 1 offset 4
[8]
# test: select from table limit offset #3
select * from test limit 2 offset 1
[1, 6]
select * from test limit 2 offset 2
[6, 7]
select * from test limit 2 offset 3
[7, 8]
select * from test limit 2 offset 4
[8, 14]
# test: select from table limit offset #4
select * from test limit 2 offset 0
[0, 1]
select * from test limit 1 offset -1
{"msg": "OFFSET: positive integer value expected"}
# test: select from table limit offset #5
select * from test limit 0 offset 1
[]
select * from test limit 0 offset 2
[]
select * from test limit 0 offset 3
[]
select * from test limit 0 offset 4
[]
# test: select from table offset
explain select * from test offset 1
[{
  "bytecode": {
    "coordinator": {
      "00": "send_all            0      0      -     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "merge_recv          1      -1     0     ",
      "06": "cte_set             0      1      0     ",
      "07": "body                0      0      0     ",
      "08": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # -2147483648",
      "02": "push                1      0      0     ",
      "03": "cursor_open         0      0      5     # public.test (primary)",
      "04": "jmp                 9      0      0     ",
      "05": "cursor_readi32      1      0      0     ",
      "06": "push                1      0      0     ",
      "07": "set_add             0      0      0     ",
      "08": "cursor_next         0      5      0     ",
      "09": "cursor_close        0      0      0     ",
      "10": "result              0      0      0     ",
      "11": "ret                 0      0      0     "
    }
  }
}]
select * from test offset 1
[1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 2
[6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 3
[7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 4
[8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset 0
[0, 1, 6, 7, 8, 14, 15, 17, 2, 9, 10, 12, 18, 19, 3, 4, 5, 11, 13, 16]
select * from test offset -1
{"msg": "OFFSET: positive integer value expected"}
drop table test
# test: select from shared limit
create shared table test (id int primary key serial)
insert into test generate 20
select * from test limit 100
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
explain select * from test limit 1
[{
  "bytecode": {
    "coordinator": {
      "00": "send_first          0      0      0     ",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "merge_recv          1      0      -1    ",
      "06": "cte_set             0      1      0     ",
      "07": "body                0      0      0     ",
      "08": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "cntr_init           0      0      1     ",
      "03": "int                 1      -      0     # -2147483648",
      "04": "push                1      0      0     ",
      "05": "cursor_open         0      0      7     # public.test (primary)",
      "06": "jmp                 12     0      0     ",
      "07": "cntr_lte            0      0      6     ",
      "08": "cursor_readi32      1      0      0     ",
      "09": "push                1      0      0     ",
      "10": "set_add             0      0      0     ",
      "11": "cursor_next         0      7      0     ",
      "12": "cursor_close        0      0      0     ",
      "13": "result              0      0      0     ",
      "14": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 1
[0]
select * from test limit 2
[0, 1]
select * from test limit 3
[0, 1, 2]
select * from test limit 4
[0, 1, 2, 3]
select * from test limit 10
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
select * from test limit 20
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
# test: select from shared limit 0
explain select * from test limit 0
[{
  "bytecode": {
    "coordinator": {
      "00": "send_first          0      0      0     ",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 0",
      "05": "merge_recv          1      0      -1    ",
      "06": "cte_set             0      1      0     ",
      "07": "body                0      0      0     ",
      "08": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 0",
      "02": "cntr_init           0      0      1     ",
      "03": "int                 1      -      0     # -2147483648",
      "04": "push                1      0      0     ",
      "05": "cursor_open         0      0      7     # public.test (primary)",
      "06": "jmp                 12     0      0     ",
      "07": "cntr_lte            0      0      6     ",
      "08": "cursor_readi32      1      0      0     ",
      "09": "push                1      0      0     ",
      "10": "set_add             0      0      0     ",
      "11": "cursor_next         0      7      0     ",
      "12": "cursor_close        0      0      0     ",
      "13": "result              0      0      0     ",
      "14": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 0
[]
select * from test limit -1
{"msg": "LIMIT/OFFSET: positive integer value expected"}
# test: select from shared limit offset
explain select * from test limit 1 offset 0
[{
  "bytecode": {
    "coordinator": {
      "00": "send_first          0      0      0     ",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "int                 1      -      0     # 0",
      "06": "merge_recv          2      0      1     ",
      "07": "cte_set             0      2      0     ",
      "08": "body                0      0      0     ",
      "09": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "int                 2      -      0     # 0",
      "03": "addii               3      1      2     ",
      "04": "cntr_init           0      0      3     ",
      "05": "int                 1      -      0     # -2147483648",
      "06": "push                1      0      0     ",
      "07": "cursor_open         0      0      9     # public.test (primary)",
      "08": "jmp                 14     0      0     ",
      "09": "cntr_lte            0      0      8     ",
      "10": "cursor_readi32      1      0      0     ",
      "11": "push                1      0      0     ",
      "12": "set_add             0      0      0     ",
      "13": "cursor_next         0      9      0     ",
      "14": "cursor_close        0      0      0     ",
      "15": "result              0      0      0     ",
      "16": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 1 offset 0
[0]
# test: select from shared limit offset #2
explain select * from test limit 1 offset 1
[{
  "bytecode": {
    "coordinator": {
      "00": "send_first          0      0      0     ",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "int                 1      -      0     # 1",
      "06": "merge_recv          2      0      1     ",
      "07": "cte_set             0      2      0     ",
      "08": "body                0      0      0     ",
      "09": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # 1",
      "02": "int                 2      -      0     # 1",
      "03": "addii               3      1      2     ",
      "04": "cntr_init           0      0      3     ",
      "05": "int                 1      -      0     # -2147483648",
      "06": "push                1      0      0     ",
      "07": "cursor_open         0      0      9     # public.test (primary)",
      "08": "jmp                 14     0      0     ",
      "09": "cntr_lte            0      0      8     ",
      "10": "cursor_readi32      1      0      0     ",
      "11": "push                1      0      0     ",
      "12": "set_add             0      0      0     ",
      "13": "cursor_next         0      9      0     ",
      "14": "cursor_close        0      0      0     ",
      "15": "result              0      0      0     ",
      "16": "ret                 0      0      0     "
    }
  }
}]
select * from test limit 1 offset 1
[1]
select * from test limit 1 offset 2
[2]
select * from test limit 1 offset 3
[3]
select * from test limit 1 offset 4
[4]
# test: select from shared limit offset #3
select * from test limit 2 offset 1
[1, 2]
select * from test limit 2 offset 2
[2, 3]
select * from test limit 2 offset 3
[3, 4]
select * from test limit 2 offset 4
[4, 5]
# test: select from shared limit offset #4
select * from test limit 2 offset 0
[0, 1]
select * from test limit 1 offset -1
{"msg": "OFFSET: positive integer value expected"}
# test: select from shared limit offset #5
select * from test limit 0 offset 1
[]
select * from test limit 0 offset 2
[]
select * from test limit 0 offset 3
[]
select * from test limit 0 offset 4
[]
# test: select from shared offset
explain select * from test offset 1
[{
  "bytecode": {
    "coordinator": {
      "00": "send_first          0      0      0     ",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "int                 0      -      0     # 1",
      "05": "merge_recv          1      -1     0     ",
      "06": "cte_set             0      1      0     ",
      "07": "body                0      0      0     ",
      "08": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      0     ",
      "01": "int                 1      -      0     # -2147483648",
      "02": "push                1      0      0     ",
      "03": "cursor_open         0      0      5     # public.test (primary)",
      "04": "jmp                 9      0      0     ",
      "05": "cursor_readi32      1      0      0     ",
      "06": "push                1      0      0     ",
      "07": "set_add             0      0      0     ",
      "08": "cursor_next         0      5      0     ",
      "09": "cursor_close        0      0      0     ",
      "10": "result              0      0      0     ",
      "11": "ret                 0      0      0     "
    }
  }
}]
select * from test offset 1
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
select * from test offset 2
[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
select * from test offset 3
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
select * from test offset 4
[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
select * from test offset 0
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
select * from test offset -1
{"msg": "OFFSET: positive integer value expected"}
drop table test
disconnect S0
close E0
