#

open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485

# test: update statement parsing
create table test(id int primary key)
update
update;
update 1;
update "name"
update test
update test "path"
update test 1
update test path
update test set path
update test set path /
update test set path =
update test set path = expr
update test set id = id expr
drop table test

# test: update
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
explain update test set data = data + 1
update test set data = data + 1
select * from test
drop table test

# test: update schema
create schema test
create table test.test(id int primary key, data int)
insert into test.test values (0, 3)
insert into test.test values (1, 2)
insert into test.test values (2, 1)
explain update test.test set data = data + 1
update test.test set data = data + 1
select * from test.test
drop table test.test
drop schema test

# test: update star reference
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
update test set data = *[1] + 1
select * from test
drop table test

# test: update multiple ops
create table test(id int primary key, a int, b int)
insert into test values (0, 3, 3)
insert into test values (1, 2, 2)
insert into test values (2, 1, 1)
explain update test set a = a + 1, b = b - 1
update test set a = a + 1, b = b - 1
select * from test
drop table test

# test: update same column twice
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
update test set data = data + 1, data = data + 1
select * from test
drop table test

# test: update object
create table test(id int primary key, data object)
insert into test values (0, {"id": 48})
insert into test values (1, {"id": 49})
insert into test values (2, {"id": 50})
update test set data.id = data.id + 1
update test set data = {"id": data.id + 1}
select * from test
drop table test

# test: update object add key
create table test(id int primary key, data object)
insert into test values (0, {"id": 48})
insert into test values (1, {"id": 49})
insert into test values (2, {"id": 50})
update test set data.data = id + 1
select * from test
drop table test

# test: update object rewrite
create table test(id int primary key serial, data object)
insert into test (data) values ({"id": 48})
insert into test (data) values ({"id": 49})
insert into test (data) values ({"id": 50})
update test set data = {"id": id}
select * from test
drop table test

# test: update object rewrite #2
create table test(id int primary key serial, data object)
insert into test (data) values ({"id": 48})
insert into test (data) values ({"id": 49})
insert into test (data) values ({"id": 50})
update test set data = {"id": *[0], "data": *[1]}
select * from test
drop table test

# test: update key
create table test(id int primary key)
insert into test values (0)
insert into test values (1)
insert into test values (2)
update test set id = id + 1
select * from test
drop table test

# test: update key nested
create table test(data object, primary key(data.id int))
insert into test values ({"id": 48, "data": null})
insert into test values ({"id": 49, "data": null})
insert into test values ({"id": 50, "data": null})
update test set data.id = data.id + 1
select * from test
drop table test

# test: update key nested prefix
create table test(data object, primary key(data.id int))
insert into test values ({"id": 48, "data": null})
insert into test values ({"id": 49, "data": null})
insert into test values ({"id": 50, "data": null})
update test set data = {"id": data.id + 1}
select * from test
drop table test

# test: update key nested prefix #2
create table test(data object, primary key(data.data.id int))
insert into test values ({"data": {"id": 1}})
insert into test values ({"data": {"id": 2}})
insert into test values ({"data": {"id": 3}})

update test set data = {"id": data.data.id + 1}
update test set data.id = null
update test set data.data.id = null
update test set data.data.id2 = null
update test set data.data = {}
update test set data.id = null, data.data.id = null
select * from test
drop table test

# test: update key nested field
create table test(data object, primary key(data.id int))
insert into test values ({"id": 48, "data": null})
insert into test values ({"id": 49, "data": null})
insert into test values ({"id": 50, "data": null})
update test set data.data = data.id + 1
select * from test
drop table test

# test: update point-lookup
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
explain update test set data = data + 1 where id = 0
update test set data = data + 1 where id = 0
update test set data = data + 1 where id = 1
update test set data = data + 1 where id = 2
select * from test
drop table test

# test: update range scan
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
explain update test set data = data + 1 where id >= 1
update test set data = data + 1 where id > 2
select * from test
update test set data = data + 1 where id >= 2
select * from test
update test set data = data + 1 where id >= 1
select * from test
drop table test

# test: update update error
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, null)
update test set data = data + 1
select * from test
drop table test

# test: update secondary index
create table test (id int primary key, data int, value int)
create index i on test (data)

insert into test values (0, 2, 0)
insert into test values (1, 1, 0)
insert into test values (2, 0, 0)

select * from test
select * from test use index (i)

update test set value = data

select * from test
select * from test use index (i)

# test: update secondary index (key)
update test set data = id
drop table test

# test: update secondary index (object)
create table test (obj object, primary key (obj.id int))
create index i on test (obj.data int)

insert into test {"id": 0, "data": 2}
insert into test {"id": 1, "data": 1}
insert into test {"id": 2, "data": 0}

update test set obj.value = obj.data

select * from test
select * from test use index (i)

create index j on test (obj.value int)
select * from test use index (j)

drop table test

disconnect S0
close E0
