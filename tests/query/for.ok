open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }];
connect E0 S0 127.0.0.1:3485;
# test: for parsing
for end;
{"msg": "for ❰end❱ ⟵ name expected"}
for 1 end;
{"msg": "for ❰1❱ ⟵ name expected"}
for it end;
{"msg": "for it ❰end❱ ⟵ IN expected"}
for it 1 end;
{"msg": "for it ❰1❱ ⟵ IN expected"}
for it in end;
{"msg": "for it in ❰end❱ ⟵ target name expected"}
for it in 1 end;
{"msg": "for it in ❰1❱ ⟵ target name expected"}
for it in ; end;
{"msg": "for it in ❰;❱ ⟵ target name expected"}
for it in [1,2,3] end;
{"msg": "for it in ❰[❱ ⟵ target name expected"}
for it in ([1,2,3] end;
{"msg": "for it in ([1,2,3] ❰end❱ ⟵ ) expected"}
for it in (select [1,2,3] end;
{"msg": "for it in (select [1,2,3] ❰end❱ ⟵ ) expected"}
# test: for
explain for it in (select [1,2,3]) do end;
[{
  "main": {
    "00": "json                0      0      0     ",
    "01": "dup                 1      0      0     ",
    "02": "json_open           2      1      4     ",
    "03": "json_next           2      3      0     ",
    "04": "free                1      0      0     ",
    "05": "ret                 -1     0      -     "
  },
  "access": []
}]
for it in (select [1,2,3]) do end;
begin
	declare n int := 0;
	for it in (select [1,2,3]) do
		n := n + 1;
	end;
	select n;
end;
[3]
# test: for if
begin
	declare n int := 0;
	for it in (select [1,2,3,4] as it) do
		if it::int % 2 = 0 then
			n := n + 1;
		end;
	end;
	select n;
end;
[2]
# test: for for
begin
	declare n int := 0;
	for i in (select [1,2,3]) do
		for j in (select [1,2,3]) do
			n := n + 1;
		end;
	end;
	select n;
end;
[9]
explain begin
	declare n int := 0;
	for i in (select [1,2,3] as i) do
		for j in (select [1,2,3] as j) do
			n := n + i.i::int + j.j::int;
		end;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "json                0      0      0     ",
    "04": "dup                 1      0      0     ",
    "05": "json_open           2      1      23    ",
    "06": "json                3      5      0     ",
    "07": "dup                 4      3      0     ",
    "08": "json_open           5      4      20    ",
    "09": "var                 6      0      0     ",
    "10": "json_read           7      2      0     ",
    "11": "push                7      0      0     ",
    "12": "call                7      -      1     # public.int()",
    "13": "json_read           8      5      0     ",
    "14": "push                8      0      0     ",
    "15": "call                8      -      1     # public.int()",
    "16": "addii               9      7      8     ",
    "17": "addii               7      6      9     ",
    "18": "var_set             0      0      7     ",
    "19": "json_next           5      9      0     ",
    "20": "free                4      0      0     ",
    "21": "free                3      0      0     ",
    "22": "json_next           2      6      0     ",
    "23": "free                1      0      0     ",
    "24": "var                 1      0      0     ",
    "25": "ret                 1      0      -     "
  },
  "access": []
}]
begin
	declare n int := 0;
	for i in (select [1,2,3] as i) do
		for j in (select [1,2,3] as j) do
			n := n + i.i::int + j.j::int;
		end;
	end;
	select n;
end;
[36]
# test: for for for
begin
	declare n int := 0;
	for i in (select [1,2,3]) do
		for j in (select [1,2,3]) do
			for k in (select [1,2,3]) do
				n := n + 1;
			end;
		end;
	end;
	select n;
end;
[27]
begin
	declare n int := 0;
	for i in (select [1,2,3] as i) do
		for j in (select [1,2,3] as j) do
			for k in (select [1,2,3] as k) do
				n := n + i.i::int + j.j::int + k.k::int;
			end;
		end;
	end;
	select n;
end;
[162]
# test: for in select
create table test (id int primary key);
insert into test values (1), (2), (3);
explain begin
	declare n int := 0;
	for i in (select * from test) do
		n := n + 1;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "send_all            0      0      20    # public.test (select)",
    "04": "recv                1      0      -1    ",
    "05": "dup                 0      1      0     ",
    "06": "store_open          2      0      12    ",
    "07": "var                 3      0      0     ",
    "08": "int                 4      -      0     # 1",
    "09": "addii               5      3      4     ",
    "10": "var_set             0      0      5     ",
    "11": "store_next          2      7      0     ",
    "12": "free                2      0      0     ",
    "13": "free                0      0      0     ",
    "14": "var                 0      0      0     ",
    "15": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 0      1      0     ",
    "01": "table_open_part     1      0      6     # public.test (primary)",
    "02": "table_readi32       2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_add             0      0      0     ",
    "05": "table_next          1      2      0     ",
    "06": "free                1      0      0     ",
    "07": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin declare
	n int := 0;
	for i in (select * from test) do
		n := n + 1;
	end;
	select n;
end;
[3]
begin
	declare n int := 0;
	for i in (select * from test) do
		n := n + i.id;
	end;
	select n;
end;
[6]
drop table test;
# test: for in select for int select
create table test (id int primary key);
insert into test values (1), (2), (3);
explain begin
	declare n int;
	n := 0;
	for i in (select * from test) do
		for j in (select * from test) do
			n := n + 1;
		end;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "send_all            0      0      20    # public.test (select)",
    "04": "recv                1      0      -1    ",
    "05": "dup                 0      1      0     ",
    "06": "store_open          2      0      20    ",
    "07": "send_all            3      0      64    # public.test (select)",
    "08": "recv                4      3      -1    ",
    "09": "dup                 3      4      0     ",
    "10": "store_open          5      3      16    ",
    "11": "var                 6      0      0     ",
    "12": "int                 7      -      0     # 1",
    "13": "addii               8      6      7     ",
    "14": "var_set             0      0      8     ",
    "15": "store_next          5      11     0     ",
    "16": "free                5      0      0     ",
    "17": "free                3      0      0     ",
    "18": "free                4      0      0     ",
    "19": "store_next          2      7      0     ",
    "20": "free                2      0      0     ",
    "21": "free                0      0      0     ",
    "22": "var                 0      0      0     ",
    "23": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 0      1      0     ",
    "01": "table_open_part     1      0      6     # public.test (primary)",
    "02": "table_readi32       2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_add             0      0      0     ",
    "05": "table_next          1      2      0     ",
    "06": "free                1      0      0     ",
    "07": "ret                 0      0      -     ",
    "08": "set                 3      1      0     ",
    "09": "table_open_part     4      44     14    # public.test (primary)",
    "10": "table_readi32       5      4      0     ",
    "11": "push                5      0      0     ",
    "12": "set_add             3      0      0     ",
    "13": "table_next          4      10     0     ",
    "14": "free                4      0      0     ",
    "15": "ret                 3      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare n int := 0;
	for i in (select * from test) do
		for j in (select * from test) do
			n := n + 1;
		end;
	end;
	select n;
end;
[9]
begin
	declare n int := 0;
	for i in (select * from test) do
		for j in (select * from test) do
			n := n + i.id + j.id;
		end;
	end;
	select n;
end;
[36]
drop table test;
# test: for (select from (select from))
create table test (id int primary key);
insert into test values (1), (2), (3);
explain begin
	declare n int := 0;
	for i in (select * from (select * from test) x) do
		n := n + 1;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "send_all            0      0      20    # public.test (select)",
    "04": "recv                1      0      -1    ",
    "05": "set                 0      1      0     ",
    "06": "dup                 2      1      0     ",
    "07": "store_open          3      2      12    ",
    "08": "store_read          4      3      0     ",
    "09": "push                4      0      0     ",
    "10": "set_add             0      0      0     ",
    "11": "store_next          3      8      0     ",
    "12": "free                3      0      0     ",
    "13": "free                2      0      0     ",
    "14": "dup                 2      0      0     ",
    "15": "store_open          3      2      21    ",
    "16": "var                 4      0      0     ",
    "17": "int                 5      -      0     # 1",
    "18": "addii               6      4      5     ",
    "19": "var_set             0      0      6     ",
    "20": "store_next          3      16     0     ",
    "21": "free                3      0      0     ",
    "22": "free                2      0      0     ",
    "23": "var                 2      0      0     ",
    "24": "ret                 2      0      -     "
  },
  "pushdown": {
    "00": "set                 0      1      0     ",
    "01": "table_open_part     1      0      6     # public.test (primary)",
    "02": "table_readi32       2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_add             0      0      0     ",
    "05": "table_next          1      2      0     ",
    "06": "free                1      0      0     ",
    "07": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare n int := 0; for i in (select * from (select * from test) x) do
		n := n + 1;
	end;
	select n;
end;
[3]
drop table test;
# test: for table
create table test (id int primary key);
insert into test values (1), (2), (3);
for i in test do end;
{"msg": "for i in test ❰do❱ ⟵ tables are not supported here"}
drop table test;
# test: for var
begin
	declare list json := [];
	declare x json := [1,2,3];
	for it in x do
		list := list::append(it);
	end;
	select list;
end;
[[1, 2, 3]]
begin
	declare list json := [];
	declare x json := [1,2,3];
	for it in (x) do
		list := list::append(it);
	end;
	select list;
end;
[[1, 2, 3]]
begin
	declare list json := [];
	declare x json := [1,2,3];
	for it in (select x as it) do
		list := list::append(it);
	end;
	select list;
end;
[[1, 2, 3]]
begin
	declare x int := 77;
	declare last int;
	for it in x do
		last := it;
	end;
	select last;
end;
[77]
begin
	declare x int := 77;
	declare last int;
	for it in (x) do
		last := it;
	end;
	select last;
end;
[77]
begin
	declare x int := 77;
	declare last int;
	for it in (select x as it) do
		last := it;
	end;
	select last;
end;
[77]
# test: for var (table)
create table test (id int primary key);
insert into test values (1), (2), (3);
# test: select from var (table)
begin
	declare x table (a int, b int);
	select id, id * 10 into x from test;
	for it in x do end;
end;
begin
	declare list json := []
   	declare x table (a int, b int);
	select id, id * 10 into x from test;
	for it in x do
		list := list::append(it.a)::append(it.b);
	end;
	select list;
end;
{"msg": "begin\n\tdeclare list json := []\n   \t❰declare❱ ⟵ ; expected"}
drop table test;
# test: for .. select
create table test (id int primary key);
insert into test values (1), (2), (3);
explain begin
	declare total int;
	declare n int;
	total := 0;
	for i in (select [1,2,3]) do
		select count(id) into n from test;
		total := total + n;
	end;
	select total;
end;
[{
  "main": {
    "00": "push_nulls          2      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "json                0      0      0     ",
    "04": "dup                 1      0      0     ",
    "05": "json_open           2      1      23    ",
    "06": "send_all            3      0      30    # public.test (select)",
    "07": "recv_aggs           4      3      26    ",
    "08": "set                 5      1      0     ",
    "09": "store_open          6      4      14    ",
    "10": "count               7      6      0     ",
    "11": "push                7      0      0     ",
    "12": "set_add             5      0      0     ",
    "13": "store_next          6      10     0     ",
    "14": "free                6      0      0     ",
    "15": "free                4      0      0     ",
    "16": "var_set             1      0      5     ",
    "17": "free                5      0      0     ",
    "18": "var                 3      0      0     ",
    "19": "var                 4      1      0     ",
    "20": "addii               5      3      4     ",
    "21": "var_set             0      0      5     ",
    "22": "json_next           2      6      0     ",
    "23": "free                1      0      0     ",
    "24": "close               0      0      0     ",
    "25": "var                 1      0      0     ",
    "26": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "set_ordered         3      1      1     ",
    "01": "table_open_part     4      6      8     # public.test (primary)",
    "02": "push_bool           1      0      0     ",
    "03": "set_get             5      3      0     ",
    "04": "table_readi32       6      4      0     ",
    "05": "push                6      0      0     ",
    "06": "set_agg             3      5      26    ",
    "07": "table_next          4      2      0     ",
    "08": "free                4      0      0     ",
    "09": "push_bool           1      0      0     ",
    "10": "set_get             4      3      0     ",
    "11": "push_nulls          1      0      0     ",
    "12": "set_agg             3      4      26    ",
    "13": "set_sort            3      0      0     ",
    "14": "ret                 3      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare total int; declare n int;
	total := 0;
	for i in (select [1,2,3]) do
		select count(id) into n from test;
		total := total + n;
	end;
	select total;
end;
[9]
drop table test;
# test: for .. select (push target)
create table test (id int primary key);
insert into test values (1), (2), (3);
explain begin
	declare n int := 0;
	declare r int;
	for i in ([1,2,3]) do
		select 1 into r from test where id = i.i::int;
		n := n + r;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          2      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "json                0      0      0     ",
    "04": "json_open           1      0      16    ",
    "05": "json_read           2      1      0     ",
    "06": "push_ref            2      0      0     ",
    "07": "send_all            2      1      25    # public.test (select)",
    "08": "recv                3      2      -1    ",
    "09": "var_set             1      0      3     ",
    "10": "free                3      0      0     ",
    "11": "var                 2      0      0     ",
    "12": "var                 3      1      0     ",
    "13": "addii               4      2      3     ",
    "14": "var_set             0      0      4     ",
    "15": "json_next           1      5      0     ",
    "16": "free                0      0      0     ",
    "17": "close               0      0      0     ",
    "18": "var                 0      0      0     ",
    "19": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 2      1      0     ",
    "01": "table_open_part     3      5      11    # public.test (primary)",
    "02": "table_readi32       4      3      0     ",
    "03": "ref                 5      0      0     ",
    "04": "push                5      0      0     ",
    "05": "call                5      -      1     # public.int()",
    "06": "equii               6      4      5     ",
    "07": "jntr                10     6      0     ",
    "08": "push_int            -      0      0     # 1",
    "09": "set_add             2      0      0     ",
    "10": "table_next          3      2      0     ",
    "11": "free                3      0      0     ",
    "12": "ret                 2      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare n int := 0;
	declare r int;
	for i in ([1,2,3]) do
		select 1 into r from test where id = i.i::int;
		n := n + r;
	end;
	select n;
end;
[3]
drop table test;
# test: for .. select (push target agg)
create table test (id int primary key);
insert into test values (1), (2), (3);
explain begin
	declare n int := 0;
	declare r int;
	for i in ([1,2,3]) do
		select count(*) into r from test where id = i.i::int;
		n := n + r;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          2      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "json                0      0      0     ",
    "04": "json_open           1      0      24    ",
    "05": "json_read           2      1      0     ",
    "06": "push_ref            2      0      0     ",
    "07": "send_all            2      1      30    # public.test (select)",
    "08": "recv_aggs           3      2      26    ",
    "09": "set                 4      1      0     ",
    "10": "store_open          5      3      15    ",
    "11": "count               6      5      0     ",
    "12": "push                6      0      0     ",
    "13": "set_add             4      0      0     ",
    "14": "store_next          5      11     0     ",
    "15": "free                5      0      0     ",
    "16": "free                3      0      0     ",
    "17": "var_set             1      0      4     ",
    "18": "free                4      0      0     ",
    "19": "var                 2      0      0     ",
    "20": "var                 3      1      0     ",
    "21": "addii               4      2      3     ",
    "22": "var_set             0      0      4     ",
    "23": "json_next           1      5      0     ",
    "24": "free                0      0      0     ",
    "25": "close               0      0      0     ",
    "26": "var                 0      0      0     ",
    "27": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set_ordered         2      1      1     ",
    "01": "table_open_part     3      6      13    # public.test (primary)",
    "02": "table_readi32       4      3      0     ",
    "03": "ref                 5      0      0     ",
    "04": "push                5      0      0     ",
    "05": "call                5      -      1     # public.int()",
    "06": "equii               6      4      5     ",
    "07": "jntr                12     6      0     ",
    "08": "push_bool           1      0      0     ",
    "09": "set_get             4      2      0     ",
    "10": "push_int            -      0      0     # 1",
    "11": "set_agg             2      4      26    ",
    "12": "table_next          3      2      0     ",
    "13": "free                3      0      0     ",
    "14": "push_bool           1      0      0     ",
    "15": "set_get             3      2      0     ",
    "16": "push_nulls          1      0      0     ",
    "17": "set_agg             2      3      26    ",
    "18": "set_sort            2      0      0     ",
    "19": "ret                 2      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare n int := 0;
	declare r int;
	for i in ([1,2,3]) do
		select count(*) into r from test where id = i.i::int;
		n := n + r;
	end;
	select n;
end;
[3]
drop table test;
# test: for .. select (push var)
create table test (id int primary key);
insert into test values (1), (2), (3);
explain begin
	declare n int := 0;
	declare r int;
	declare k int;
	for i in ([1,2,3]) do
		k := i.i::int;
		select 1 into r from test where id = k;
		n := n + r;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          3      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "json                0      0      0     ",
    "04": "json_open           1      0      20    ",
    "05": "json_read           2      1      0     ",
    "06": "push                2      0      0     ",
    "07": "call                2      -      1     # public.int()",
    "08": "var_set             2      0      2     ",
    "09": "push_var            2      0      0     ",
    "10": "push_var            2      0      0     ",
    "11": "send_lookup_by      2      1      25    # public.test (select)",
    "12": "recv                3      2      -1    ",
    "13": "var_set             1      0      3     ",
    "14": "free                3      0      0     ",
    "15": "var                 2      0      0     ",
    "16": "var                 3      1      0     ",
    "17": "addii               4      2      3     ",
    "18": "var_set             0      0      4     ",
    "19": "json_next           1      5      0     ",
    "20": "free                0      0      0     ",
    "21": "close               0      0      0     ",
    "22": "var                 0      0      0     ",
    "23": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 2      1      0     ",
    "01": "ref                 3      0      0     ",
    "02": "push                3      0      0     ",
    "03": "table_open_partl    3      5      10    # public.test (primary)",
    "04": "table_readi32       4      3      0     ",
    "05": "ref                 5      0      0     ",
    "06": "equii               6      4      5     ",
    "07": "jntr                10     6      0     ",
    "08": "push_int            -      0      0     # 1",
    "09": "set_add             2      0      0     ",
    "10": "free                3      0      0     ",
    "11": "ret                 2      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare n int := 0;
	declare r int;
	declare k int;
	for i in ([1,2,3]) do
		k := i.i::int;
		select 1 into r from test where id = k;
		n := n + r;
	end;
	select n;
end;
[3]
drop table test;
# test: for .. returning
create table test (id int primary key, data int);
insert into test values (1, 0), (2, 0), (3, 0);
explain begin
	declare n int := 0;
	declare r int := 0;
	for i in ([1,2,3]) do
		update test set data = id where id = i.i::int returning 1 into r;
		n := n + r;
	end;
	select n;
end;
[{
  "main": {
    "00": "push_nulls          2      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "int                 0      -      0     # 0",
    "04": "var_set             1      0      0     ",
    "05": "json                0      0      0     ",
    "06": "json_open           1      0      18    ",
    "07": "json_read           2      1      0     ",
    "08": "push_ref            2      0      0     ",
    "09": "send_all            2      1      25    # public.test (update)",
    "10": "recv                3      2      -1    ",
    "11": "var_set             1      0      3     ",
    "12": "free                3      0      0     ",
    "13": "var                 2      0      0     ",
    "14": "var                 3      1      0     ",
    "15": "addii               4      2      3     ",
    "16": "var_set             0      0      4     ",
    "17": "json_next           1      7      0     ",
    "18": "free                0      0      0     ",
    "19": "close               0      0      0     ",
    "20": "var                 0      0      0     ",
    "21": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 2      1      0     ",
    "01": "table_open_part     3      5      16    # public.test (primary)",
    "02": "table_readi32       4      3      0     ",
    "03": "ref                 5      0      0     ",
    "04": "push                5      0      0     ",
    "05": "call                5      -      1     # public.int()",
    "06": "equii               6      4      5     ",
    "07": "jntr                15     6      0     ",
    "08": "int                 4      -      0     # 1",
    "09": "push                4      0      0     ",
    "10": "table_readi32       4      3      0     ",
    "11": "push                4      0      0     ",
    "12": "update              3      1      0     ",
    "13": "push_int            -      0      0     # 1",
    "14": "set_add             2      0      0     ",
    "15": "table_next          3      2      0     ",
    "16": "free                3      0      0     ",
    "17": "ret                 2      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	declare n int := 0;
	declare r int := 0;
	for i in ([1,2,3]) do
		update test set data = id where id = i.i::int returning 1 into r;
		n := n + r;
	end;
	select n;
end;
[3]
drop table test;
# test: for .. insert
create table test (id int primary key, data int);
explain begin
	declare v int;
	for i in ([0,1,2,3,4,5,6,7,8,9]) do
		v := i::int;
		insert into test values (v, 0);
	end;
	select * from test;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "json                0      0      0     ",
    "02": "json_open           1      0      11    ",
    "03": "json_read           2      1      0     ",
    "04": "push                2      0      0     ",
    "05": "call                2      -      1     # public.int()",
    "06": "var_set             0      0      2     ",
    "07": "push_var            0      0      1     ",
    "08": "set_ptr             3      -      0     ",
    "09": "send_shard          2      3      1     # public.test (insert)",
    "10": "json_next           1      3      0     ",
    "11": "free                0      0      0     ",
    "12": "send_all            0      0      56    # public.test (select, closing)",
    "13": "recv                1      0      -1    ",
    "14": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "insert              -      0      0     # public.test",
    "01": "ret                 -1     0      -     ",
    "02": "set                 0      2      0     ",
    "03": "table_open_part     1      36     10    # public.test (primary)",
    "04": "table_readi32       2      1      0     ",
    "05": "push                2      0      0     ",
    "06": "table_readi32       2      1      1     ",
    "07": "push                2      0      0     ",
    "08": "set_add             0      0      0     ",
    "09": "table_next          1      4      0     ",
    "10": "free                1      0      0     ",
    "11": "ret                 0      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	declare v int;
	for i in ([0,1,2,3,4,5,6,7,8,9]) do
		v := i::int;
		insert into test values (v, 0);
	end;
	select * from test;
end;
[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0]]
explain begin
	declare v int;
	for i in ([0,1,2,3,4,5,6,7,8,9]) do
		v := i::int;
		insert into test values (v, 0) on conflict do update set data = excluded.id;
	end;
	select * from test;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "json                0      0      0     ",
    "02": "json_open           1      0      11    ",
    "03": "json_read           2      1      0     ",
    "04": "push                2      0      0     ",
    "05": "call                2      -      1     # public.int()",
    "06": "var_set             0      0      2     ",
    "07": "push_var            0      0      1     ",
    "08": "set_ptr             3      -      0     ",
    "09": "send_shard          2      3      1     # public.test (insert)",
    "10": "json_next           1      3      0     ",
    "11": "free                0      0      0     ",
    "12": "send_all            0      0      56    # public.test (select, closing)",
    "13": "recv                1      0      -1    ",
    "14": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "table_prepare       2      -      0     # public.test",
    "01": "jmp                 7      0      0     ",
    "02": "int                 3      -      0     # 1",
    "03": "push                3      0      0     ",
    "04": "excluded            3      0      0     ",
    "05": "push                3      0      0     ",
    "06": "update              2      1      0     ",
    "07": "upsert              2      2      -1    ",
    "08": "free                2      0      0     ",
    "09": "ret                 -1     0      -     ",
    "10": "set                 0      2      0     ",
    "11": "table_open_part     1      36     18    # public.test (primary)",
    "12": "table_readi32       2      1      0     ",
    "13": "push                2      0      0     ",
    "14": "table_readi32       2      1      1     ",
    "15": "push                2      0      0     ",
    "16": "set_add             0      0      0     ",
    "17": "table_next          1      12     0     ",
    "18": "free                1      0      0     ",
    "19": "ret                 0      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	declare v int;
	for i in ([0,1,2,3,4,5,6,7,8,9]) do
		v := i::int;
		insert into test values (v, 0) on conflict do update set data = excluded.id;
	end;
	select * from test;
end;
[[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]
truncate test;
begin
	declare v int;
	for i in ([0,1,2,3,0,1,2,3,0,1,2,3,4,5]) do
		v := i::int;
		insert into test values (v, 0) on conflict do update set data = data + 1;
	end;
	select * from test;
end;
[[0, 2], [1, 2], [2, 2], [3, 2], [4, 0], [5, 0]]
drop table test;
# test: for .. insert (serial)
create table test (id serial primary key);
for i in ([0,1,2,3,4,5,6,7,8,9]) do
	insert into test () values (), (), ();
end;
select * from test;
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
;
drop table test;
# test: for utility
for i in ([1,2,3]) do show all; end;
{"msg": "for i in ([1,2,3]) do ❰show❱ ⟵ utility statement cannot be used here"}
# test: cte for
with a as (for i in ([1,2,3]) do end) select 1;
{"msg": "with a as (❰for❱ ⟵ statement cannot be used inside CTE"}
with a as (select 1) for i in ([1,2,3]) do end;
{"msg": "with a as (select 1) ❰for❱ ⟵ statement cannot be used inside CTE"}
# test: for break
explain begin
	declare last int;
	for i in ([0,1,2,3]) do
		last := i::int;
		break;
	end;
	select last;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "json                0      0      0     ",
    "02": "json_open           1      0      9     ",
    "03": "json_read           2      1      0     ",
    "04": "push                2      0      0     ",
    "05": "call                2      -      1     # public.int()",
    "06": "var_set             0      0      2     ",
    "07": "jmp                 9      0      0     ",
    "08": "json_next           1      3      0     ",
    "09": "free                0      0      0     ",
    "10": "var                 0      0      0     ",
    "11": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare last int;
	for i in ([0,1,2,3]) do
		last := i::int;
		break;
	end;
	select last;
end;
[0]
# test: for if break
explain begin
	declare last int := 0;
	for i in ([0,1,2,3]) do
		last := i::int;
		if last = 3 then
			break;
		end;
	end;
	select last;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "json                0      0      0     ",
    "04": "json_open           1      0      15    ",
    "05": "json_read           2      1      0     ",
    "06": "push                2      0      0     ",
    "07": "call                2      -      1     # public.int()",
    "08": "var_set             0      0      2     ",
    "09": "var                 2      0      0     ",
    "10": "int                 3      -      0     # 3",
    "11": "equii               4      2      3     ",
    "12": "jntr                14     4      0     ",
    "13": "jmp                 15     0      0     ",
    "14": "json_next           1      5      0     ",
    "15": "free                0      0      0     ",
    "16": "var                 0      0      0     ",
    "17": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare last int := 0;
	for i in ([0,1,2,3]) do
		last := i::int;
		if last = 3 then
			break;
		end;
	end;
	select last;
end;
[3]
# test: for for if break
explain begin
	declare last int := 0;
	declare loops int := 0;
	for i in ([0,1,2,3]) do
		for j in ([0,1,2,3]) do
			last := j::int;
			if last = 3 then
				break;
			end;
		end;
		loops := loops + 1;
	end;
	select loops, last;
end;
[{
  "main": {
    "00": "push_nulls          2      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "int                 0      -      0     # 0",
    "04": "var_set             1      0      0     ",
    "05": "json                0      0      0     ",
    "06": "json_open           1      0      25    ",
    "07": "json                2      6      0     ",
    "08": "json_open           3      2      19    ",
    "09": "json_read           4      3      0     ",
    "10": "push                4      0      0     ",
    "11": "call                4      -      1     # public.int()",
    "12": "var_set             0      0      4     ",
    "13": "var                 4      0      0     ",
    "14": "int                 5      -      0     # 3",
    "15": "equii               6      4      5     ",
    "16": "jntr                18     6      0     ",
    "17": "jmp                 19     0      0     ",
    "18": "json_next           3      9      0     ",
    "19": "free                2      0      0     ",
    "20": "var                 2      1      0     ",
    "21": "int                 3      -      0     # 1",
    "22": "addii               4      2      3     ",
    "23": "var_set             1      0      4     ",
    "24": "json_next           1      7      0     ",
    "25": "free                0      0      0     ",
    "26": "set                 0      2      0     ",
    "27": "push_var            1      0      0     ",
    "28": "push_var            0      0      0     ",
    "29": "set_add             0      0      0     ",
    "30": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare last int := 0;
	declare loops int := 0;
	for i in ([0,1,2,3]) do
		for j in ([0,1,2,3]) do
			last := j::int;
			if last = 3 then
				break;
			end;
		end;
		loops := loops + 1;
	end;
	select loops, last;
end;
[[4, 3]]
# test: for if continue
explain begin
	declare last int;
	for i in ([0,1,2,3]) do
		if i::int < 2 then
			continue;
		end;
		last := i::int;
		break;
	end;
	select last;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "json                0      0      0     ",
    "02": "json_open           1      0      16    ",
    "03": "json_read           2      1      0     ",
    "04": "push                2      0      0     ",
    "05": "call                2      -      1     # public.int()",
    "06": "int                 3      -      0     # 2",
    "07": "ltii                4      2      3     ",
    "08": "jntr                10     4      0     ",
    "09": "jmp                 15     0      0     ",
    "10": "json_read           2      1      0     ",
    "11": "push                2      0      0     ",
    "12": "call                2      -      1     # public.int()",
    "13": "var_set             0      0      2     ",
    "14": "jmp                 16     0      0     ",
    "15": "json_next           1      3      0     ",
    "16": "free                0      0      0     ",
    "17": "var                 0      0      0     ",
    "18": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare last int;
	for i in ([0,1,2,3]) do
		if i::int < 2 then
			continue;
		end;
		last := i::int;
		break;
	end;
	select last;
end;
[2]
# test: for for if continue
explain begin
	declare last int := 0;
	declare loops int := 0;
	for i in ([0,1,2,3]) do
		for j in ([0,1,2,3]) do
			if j::int < 2 then
				continue;
			end;
			last := j::int;
			break;
		end;
		loops := loops + 1;
	end;
	select loops, last;
end;
[{
  "main": {
    "00": "push_nulls          2      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "int                 0      -      0     # 0",
    "04": "var_set             1      0      0     ",
    "05": "json                0      0      0     ",
    "06": "json_open           1      0      28    ",
    "07": "json                2      6      0     ",
    "08": "json_open           3      2      22    ",
    "09": "json_read           4      3      0     ",
    "10": "push                4      0      0     ",
    "11": "call                4      -      1     # public.int()",
    "12": "int                 5      -      0     # 2",
    "13": "ltii                6      4      5     ",
    "14": "jntr                16     6      0     ",
    "15": "jmp                 21     0      0     ",
    "16": "json_read           4      3      0     ",
    "17": "push                4      0      0     ",
    "18": "call                4      -      1     # public.int()",
    "19": "var_set             0      0      4     ",
    "20": "jmp                 22     0      0     ",
    "21": "json_next           3      9      0     ",
    "22": "free                2      0      0     ",
    "23": "var                 2      1      0     ",
    "24": "int                 3      -      0     # 1",
    "25": "addii               4      2      3     ",
    "26": "var_set             1      0      4     ",
    "27": "json_next           1      7      0     ",
    "28": "free                0      0      0     ",
    "29": "set                 0      2      0     ",
    "30": "push_var            1      0      0     ",
    "31": "push_var            0      0      0     ",
    "32": "set_add             0      0      0     ",
    "33": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare last int := 0;
	declare loops int := 0;
	for i in ([0,1,2,3]) do
		for j in ([0,1,2,3]) do
			if j::int < 2 then
				continue;
			end;
			last := j::int;
			break;
		end;
		loops := loops + 1;
	end;
	select loops, last;
end;
[[4, 2]]
disconnect S0;
close E0;
