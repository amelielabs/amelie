open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: create table statement parsing
create
{"msg": "create ⟵ USER|REPLICA|SCHEMA|TABLE|INDEX|PROCEDURE expected"}
create junk
{"msg": "create ❰junk❱ ⟵ USER|REPLICA|SCHEMA|TABLE|INDEX|PROCEDURE expected"}
create unique
{"msg": "create unique ⟵ INDEX expected"}
create unique table
{"msg": "create unique ❰table❱ ⟵ INDEX expected"}
create table
{"msg": "create table ⟵ name expected"}
create table "junk_name"
{"msg": "create table ❰\"junk_name\"❱ ⟵ name expected"}
create table if
{"msg": "create table if ⟵ NOT expected"}
create table if not
{"msg": "create table if not ⟵ EXISTS expected"}
create table if not exists
{"msg": "create table if not exists ⟵ name expected"}
create table 1234
{"msg": "create table ❰1234❱ ⟵ name expected"}
create table test(
{"msg": "create table test( ⟵ name expected"}
create table test(0
{"msg": "create table test(❰0❱ ⟵ name expected"}
create table test("123"
{"msg": "create table test(❰\"123\"❱ ⟵ name expected"}
create table test(name
{"msg": "create table test(name ⟵ unrecognized data type"}
create table test(name junk_type
{"msg": "create table test(name ❰junk_type❱ ⟵ unrecognized data type"}
create table test(name int
{"msg": "create table test(name int ⟵ ) expected"}
create table test(name int,
{"msg": "create table test(name int, ⟵ name expected"}
create table test(name int,)
{"msg": "create table test(name int,❰)❱ ⟵ name expected"}
create table if not exists 1234
{"msg": "create table if not exists ❰1234❱ ⟵ name expected"}
create table if not exists test(
{"msg": "create table if not exists test( ⟵ name expected"}
create table if not exists test(0
{"msg": "create table if not exists test(❰0❱ ⟵ name expected"}
create table if not exists test("123"
{"msg": "create table if not exists test(❰\"123\"❱ ⟵ name expected"}
create table if not exists test(name
{"msg": "create table if not exists test(name ⟵ unrecognized data type"}
create table if not exists test(name junk_type
{"msg": "create table if not exists test(name ❰junk_type❱ ⟵ unrecognized data type"}
create table if not exists test(name int
{"msg": "create table if not exists test(name int ⟵ ) expected"}
create table test(name int) junk
{"msg": "create table test(name int❰)❱ ⟵ primary key is not defined"}
create table test()
{"msg": "create table test(❰)❱ ⟵ name expected"}
# test: column bool/boolean
create table test(id int primary key, a bool, b boolean)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 1,
  "type_size": 1,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "b",
  "type": 1,
  "type_size": 1,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column int8/i8
create table test(id int primary key, id2 int8, id3 i8)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 1,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id3",
  "type": 2,
  "type_size": 1,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column int16/i16
create table test(id int primary key, id2 int16, id3 i16)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 2,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id3",
  "type": 2,
  "type_size": 2,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column int/integer/int32/i32
create table test(id int primary key, id2 integer, id3 int32, id4 i32)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id3",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id4",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column int64/i64
create table test(id int64 primary key, id2 i64)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "id2",
  "type": 2,
  "type_size": 8,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column float/f32
create table test(id int primary key, a float, b f32)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 3,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "b",
  "type": 3,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column double/f64
create table test(id int primary key, a double, b f64)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 3,
  "type_size": 8,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "b",
  "type": 3,
  "type_size": 8,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column text/string
create table test(id int primary key, a text, b string)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 4,
  "type_size": 0,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "b",
  "type": 4,
  "type_size": 0,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column json
create table test(id int primary key, a json, b json)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 5,
  "type_size": 0,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "b",
  "type": 5,
  "type_size": 0,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column timestamp
create table test(id int primary key, a timestamp)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 7,
  "type_size": 8,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column interval
create table test(id int primary key, a interval)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 8,
  "type_size": 16,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column date
create table test(id int primary key, a date)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 6,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column vector
create table test(id int primary key, a vector)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 9,
  "type_size": 0,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column uuid
create table test(id int primary key, a uuid)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "a",
  "type": 10,
  "type_size": 16,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: column redefined
create table test(id int, id int)
{"msg": "create table test(id int, ❰id❱ ⟵ column is redefined"}
# test: primary key is not defined
create table test(id int)
{"msg": "create table test(id int❰)❱ ⟵ primary key is not defined"}
# test: primary key clause parsing
create table test(primary)
{"msg": "create table test(primary❰)❱ ⟵ KEY expected"}
create table test(primary key(
{"msg": "create table test(primary key( ⟵ name expected"}
create table test(primary key()
{"msg": "create table test(primary key(❰)❱ ⟵ name expected"}
create table test(primary key())
{"msg": "create table test(primary key(❰)❱ ⟵ name expected"}
create table test(primary key(abc))
{"msg": "create table test(primary key(❰abc❱ ⟵ column does not exists"}
create table test(id int, primary key())
{"msg": "create table test(id int, primary key(❰)❱ ⟵ name expected"}
create table test(id int, primary key(id, ))
{"msg": "create table test(id int, primary key(id, ❰)❱ ⟵ name expected"}
create table test(primary key(id), id int)
{"msg": "create table test(primary key(❰id❱ ⟵ column does not exists"}
# test: primary key is not found
create table test(id int, primary key(idd))
{"msg": "create table test(id int, primary key(❰idd❱ ⟵ column does not exists"}
# test: primary key redefined
create table test(id int, primary key(id, id))
create table test(id int primary key, primary key(id))
{"msg": "table 'test': already exists"}
create table if not exists test(id int primary key, primary key(id))
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: primary key redefined #2
create table test(id int primary key primary key)
{"msg": "create table test(id int primary key ❰primary❱ ⟵ PRIMARY KEY defined twice"}
# test: primary key ensure valid type
create table test(id json primary key)
{"msg": "create table test(id json ❰primary❱ ⟵ supported key types are int32, int64, uuid, timestamp or text"}
create table test(id json, primary key(id))
{"msg": "create table test(id json, primary key(❰id❱ ⟵ supported key types are int32, int64, uuid, timestamp or text"}
create table test (id int primary key)
create table test (id int primary key)
{"msg": "table 'test': already exists"}
# test: table create if not exists
create table test (id int primary key)
{"msg": "table 'test': already exists"}
create table if not exists test (id int primary key)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
select system.table('test').columns
[null]
# test: schema default
create table test (id int primary key)
select system.table('test').schema
["public"]
drop table test
# test: schema system
create table system.test (id int primary key)
{"msg": "system schema <system> cannot be used to create objects"}
# test: schema default explicit
create table public.test (id int primary key)
select system.table('test').schema
["public"]
drop table public.test
# test: schema non-exists
create table test.test (id int primary key)
{"msg": "schema 'test': not exists"}
select system.table('test').schema
[null]
# test: schema set
create table test (id int primary key)
create schema test
create table test.test (id int primary key)
select system.table('test').schema
["public"]
drop table test
drop table test.test
drop schema test
# test: unlogged
create unlogged table test (id int primary key)
select system.table('test').unlogged
[true]
drop table test
# test: constraint default
create table test (id int primary key, data int default 1)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": 1,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint default with key
create table test (id int default 1 primary key)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": 1,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint default with key #2
create table test (id int default 1, primary key(id))
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": 1,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint default expr validate
create table test (id int primary key, data int default 1 + 1)
{"msg": "create table test (id int primary key, data int default 1 ❰+❱ ⟵ DEFAULT value must be a const and match the column type"}
# test: constraint default (type not supported)
create table test (id int primary key, data vector default 1)
{"msg": "create table test (id int primary key, data vector default ❰1❱ ⟵ DEFAULT for this column type is not supported"}
create table test (id int primary key, data timestamp default 1)
{"msg": "create table test (id int primary key, data timestamp default ❰1❱ ⟵ DEFAULT for this column type is not supported"}
create table test (id int primary key, data interval default 1)
{"msg": "create table test (id int primary key, data interval default ❰1❱ ⟵ DEFAULT for this column type is not supported"}
create table test (id int primary key, data date default 1)
{"msg": "create table test (id int primary key, data date default ❰1❱ ⟵ DEFAULT for this column type is not supported"}
create table test (id int primary key, data uuid default '')
{"msg": "create table test (id int primary key, data uuid default ❰''❱ ⟵ DEFAULT for this column type is not supported"}
# test: constraint default (type validate)
create table test (id int primary key, data int default 'string')
{"msg": "create table test (id int primary key, data int default ❰'string'❱ ⟵ DEFAULT value must be a const and match the column type"}
create table test (id int primary key, data int default 3.4)
{"msg": "create table test (id int primary key, data int default ❰3.4❱ ⟵ DEFAULT value must be a const and match the column type"}
create table test (id int primary key, data string default 1)
{"msg": "create table test (id int primary key, data string default ❰1❱ ⟵ DEFAULT value must be a const and match the column type"}
# test: constraint default (json)
create table test (id int primary key, data json default {"id": 48, "data": [1,2,3]})
drop table test
# test: constraint not null with key
create table test (id int not null primary key)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint not null forced for keys
create table test (id int primary key, data int)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint not null forced for keys #2
create table test (id int, data int, primary key(id))
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint not null
create table test (id int primary key, data int not)
{"msg": "create table test (id int primary key, data int not❰)❱ ⟵ NULL expected"}
create table test (id int primary key, data int not null)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
insert into test values(1, 1)
insert into test values(2, null)
{"msg": "insert into test values(2, ❰null❱ ⟵ column 'data' value cannot be NULL"}
insert into test values(null, null)
{"msg": "insert into test values(❰null❱ ⟵ column 'id' value cannot be NULL"}
drop table test
# test: constraint not null default
create table test (id int primary key, data int not null default 123)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": 123,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
insert into test values(1, 1)
insert into test values(2, null)
{"msg": "insert into test values(2, ❰null❱ ⟵ column 'data' value cannot be NULL"}
insert into test (id) values(3)
select * from test
[[1, 1], [3, 123]]
drop table test
# test: constraint not null default (json)
create table test (id int primary key, data json default {"id": 48, "data": [1,2,3]})
insert into test values(1, [1,2,3])
select * from test
[[1, [1, 2, 3]]]
insert into test values(2, default)
select * from test
[[1, [1, 2, 3]], [2, {
  "id": 48,
  "data": [1, 2, 3]
}]]
insert into test (id) values(3)
select * from test
[[1, [1, 2, 3]], [2, {
  "id": 48,
  "data": [1, 2, 3]
}], [3, {
  "id": 48,
  "data": [1, 2, 3]
}]]
drop table test
# test: constraint serial
create table test (id int primary key, data serial)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 4,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": false,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 8,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": true,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint serial key
create table test (id serial primary key)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": true,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: constraint serial multiple columns
create table test (id serial primary key, data serial)
select system.table('test').columns
[[{
  "name": "id",
  "type": 2,
  "type_size": 8,
  "constraints": {
    "not_null": true,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": true,
    "as_stored": "",
    "as_resolved": ""
  }
}, {
  "name": "data",
  "type": 2,
  "type_size": 8,
  "constraints": {
    "not_null": false,
    "random": false,
    "random_modulo": 9223372036854775807,
    "default": null,
    "as_identity": true,
    "as_stored": "",
    "as_resolved": ""
  }
}]]
drop table test
# test: with parsing
create table test (id int primary key) with
{"msg": "create table test (id int primary key) with ⟵ ( expected"}
create table test (id int primary key) with (
{"msg": "create table test (id int primary key) with ( ⟵ name expected"}
create table test (id int primary key) with (,
{"msg": "create table test (id int primary key) with (❰,❱ ⟵ name expected"}
create table test (id int primary key) with (abc
{"msg": "create table test (id int primary key) with (❰abc❱ ⟵ unrecognized parameter"}
create table test (id int primary key) with (abc = 10)
{"msg": "create table test (id int primary key) with (❰abc❱ ⟵ unrecognized parameter"}
create table test (id int primary key) with (abc = "")
{"msg": "create table test (id int primary key) with (❰abc❱ ⟵ unrecognized parameter"}
# test: with
create table test (id int primary key) with (type = "hash")
disconnect S0
close E0
