open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: create view statement parsing
create view
{"code": 1, "msg": "CREATE VIEW <name> expected"}
create view 123
{"code": 1, "msg": "CREATE VIEW <name> expected"}
create view if
{"code": 1, "msg": "IF <NOT> EXISTS expected"}
create view if not
{"code": 1, "msg": "IF NOT <EXISTS> expected"}
create view if not 123
{"code": 1, "msg": "IF NOT <EXISTS> expected"}
create view if not exists
{"code": 1, "msg": "CREATE VIEW <name> expected"}
create view test abc
{"code": 1, "msg": "CREATE VIEW <AS> expected"}
create view test.test
{"code": 1, "msg": "CREATE VIEW <AS> expected"}
create view test.test.test
{"code": 1, "msg": "CREATE VIEW <name> expected"}
create view test as
{"code": 1, "msg": "CREATE VIEW AS <SELECT> expected"}
create view test as abc
{"code": 1, "msg": "CREATE VIEW AS <SELECT> expected"}
create view test as select
{"code": 1, "msg": "bad expression"}
# test: create view
create view test as select 1
show views
[{
  "schema": "public",
  "name": "test",
  "query": "select 1",
  "def": {
    "column": [],
    "key": [],
    "key_unique": false
  }
}]
select * from system.views()
[{
  "schema": "public",
  "name": "test",
  "query": "select 1",
  "def": {
    "column": [],
    "key": [],
    "key_unique": false
  }
}]
# test: create view if not exists
create view test as select 1
{"code": 1, "msg": "view 'test': already exists"}
create view if not exists public.test as select 1
drop view test
# test: create view schema not exists
create view test.test as select 1
{"code": 1, "msg": "schema 'test': not exists"}
# test: create view schema system
create view system.test as select 1
{"code": 1, "msg": "system schema <system> cannot be used to create objects"}
# test: create view schema
create schema test
create view test.test as select 1
select * from system.views()
[{
  "schema": "test",
  "name": "test",
  "query": "select 1",
  "def": {
    "column": [],
    "key": [],
    "key_unique": false
  }
}]
drop view test
{"code": 1, "msg": "view 'test': not exists"}
drop view test.test
drop schema test
# test: create view with no arguments
create view test (
{"code": 1, "msg": "CREATE VIEW (<name> expected"}
create view test ()
{"code": 1, "msg": "CREATE VIEW <AS> expected"}
create view test () as select 1
drop view test
# test: create view with arguments
create view test (a
{"code": 1, "msg": "CREATE VIEW (<)> expected"}
create view test (a,
{"code": 1, "msg": "CREATE VIEW (<name> expected"}
create view test (a,)
{"code": 1, "msg": "CREATE VIEW (<name> expected"}
create view test (a, b) as select 1, 2
drop view test
# test: create view match select columns
create view test (a) as select 1, 2
{"code": 1, "msg": "number of view columns does not match select"}
# test: create view with conflicting table
create table test (id int primary key)
create view test as select 1
{"code": 1, "msg": "table <test> with the same name exists"}
drop table test
# test: create view table
create table test (id int primary key)
insert into test values (1)
insert into test values (2)
insert into test values (3)
create view test_view (id) as select * from test
select * from system.views()
[{
  "schema": "public",
  "name": "test_view",
  "query": "select * from test",
  "def": {
    "column": [{
      "name": "id",
      "type": -1,
      "constraint": {
        "not_null": false,
        "generated": 0,
        "modulo": 9223372036854775807,
        "default": null
      }
    }],
    "key": [],
    "key_unique": false
  }
}]
select id from test_view
[1, 2, 3]
select * from test_view
[[1], [2], [3]]
explain select id from test_view
"
bytecode [coordinator]
--------
 0            send_all        0      0      0
 1                recv        0      0      0
 2                bool        0      0      0
 3                push        0      0      0
 4          merge_recv        0     -1     -1
 5                 set        1      0      0
 6    cursor_open_expr        1      0      8
 7                 jmp       11      0      0
 8          cursor_idx        2      1      0
 9             set_add        1      2      0
10         cursor_next        1      8      0
11        cursor_close        1      0      0
12             cte_set        0      1      0
13                body        0      0      0
14                 ret        0      0      0


bytecode [node]
--------
 0                 set        0      0      0
 1             int_min        1      0      0
 2                push        1      0      0
 3         cursor_open        0      0      5      # public.test (primary)
 4                 jmp        8      0      0
 5         cursor_read        1      0      0
 6             set_add        0      1      0
 7         cursor_next        0      5      0
 8        cursor_close        0      0      0
 9              result        0      0      0
10                 ret        0      0      0

"
drop view test_view
drop table test
# test: drop view statement parsing
drop view
{"code": 1, "msg": "DROP VIEW <name> expected"}
drop view 123
{"code": 1, "msg": "DROP VIEW <name> expected"}
drop view if
{"code": 1, "msg": "IF <EXISTS> expected"}
drop view if exists
{"code": 1, "msg": "DROP VIEW <name> expected"}
drop view test abc
{"code": 1, "msg": "unknown command: <abc>"}
# test: drop view
create view test () as select 1
drop view test
select * from system.views()
[]
# test: drop view if exists
drop view if exists test
# test: alter view statement parsing
alter
{"code": 1, "msg": "ALTER <USER|SCHEMA|TABLE|VIEW> expected"}
alter view
{"code": 1, "msg": "ALTER VIEW <name> expected"}
alter view 123
{"code": 1, "msg": "ALTER VIEW <name> expected"}
alter view if
{"code": 1, "msg": "IF <EXISTS> expected"}
alter view if ex
{"code": 1, "msg": "IF <EXISTS> expected"}
alter view if exists
{"code": 1, "msg": "ALTER VIEW <name> expected"}
alter view if exists 123
{"code": 1, "msg": "ALTER VIEW <name> expected"}
# test: alter view if exists
alter view test rename test2
{"code": 1, "msg": "view 'test': not exists"}
alter view if exists test rename test2
# test: alter rename
create view test as select 1
alter view test rename
{"code": 1, "msg": "ALTER VIEW RENAME <name> expected"}
alter view test rename to
{"code": 1, "msg": "ALTER VIEW RENAME <name> expected"}
alter view test rename asf junk
{"code": 1, "msg": "unknown command: <junk>"}
alter view test rename to abc
select * from system.views()
[{
  "schema": "public",
  "name": "abc",
  "query": "select 1",
  "def": {
    "column": [],
    "key": [],
    "key_unique": false
  }
}]
# test: alter rename view exists
create view test as select 1
alter view abc rename to test
{"code": 1, "msg": "view 'test': already exists"}
drop view test
# test: alter rename conflicting table exists
create table test (id int primary key)
alter view abc rename to test
{"code": 1, "msg": "table <test> with the same name exists"}
drop table test
# test: alter rename schema not exists
alter view abc rename to test.test
{"code": 1, "msg": "schema 'test': not exists"}
# test: alter rename schema system
alter view abc rename to system.test
{"code": 1, "msg": "system schema <system> cannot be used to create objects"}
# test: alter rename schema
alter view abc rename to public.test
select * from system.views()
[{
  "schema": "public",
  "name": "test",
  "query": "select 1",
  "def": {
    "column": [],
    "key": [],
    "key_unique": false
  }
}]
create schema test
alter view public.test rename to test.test
select * from system.views()
[{
  "schema": "test",
  "name": "test",
  "query": "select 1",
  "def": {
    "column": [],
    "key": [],
    "key_unique": false
  }
}]
disconnect S0
close E0
