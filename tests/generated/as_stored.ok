open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }];
connect E0 S0 127.0.0.1:3485;
# test: as (expr) stored parsing
create table test (id int primary key, data int always;
{"msg": "create table test (id int primary key, data int ❰always❱ ⟵ ) expected"}
create table test (id int primary key, data int generated;
{"msg": "create table test (id int primary key, data int generated❰;❱ ⟵ ALWAYS expected"}
create table test (id int primary key, data int generated 1;
{"msg": "create table test (id int primary key, data int generated ❰1❱ ⟵ ALWAYS expected"}
create table test (id int primary key, data int generated always;
{"msg": "create table test (id int primary key, data int generated always❰;❱ ⟵ AS expected"}
create table test (id int primary key, data int generated always 1;
{"msg": "create table test (id int primary key, data int generated always ❰1❱ ⟵ AS expected"}
create table test (id int primary key, data int generated always as;
{"msg": "create table test (id int primary key, data int generated always as❰;❱ ⟵ ( expected"}
create table test (id int primary key, data int as;
{"msg": "create table test (id int primary key, data int as❰;❱ ⟵ ( expected"}
create table test (id int primary key, data int as (;
{"msg": "create table test (id int primary key, data int as (❰;❱ ⟵ bad expression"}
create table test (id int primary key, data int as ();
{"msg": "create table test (id int primary key, data int as (❰)❱ ⟵ bad expression"}
create table test (id int primary key, data int as (1);
{"msg": "create table test (id int primary key, data int as (1)❰;❱ ⟵ STORED or RESOLVED expected"}
create table test (id int primary key, data int as (1) 1;
{"msg": "create table test (id int primary key, data int as (1) ❰1❱ ⟵ STORED or RESOLVED expected"}
create table test (id int primary key, data int as (1) stored;
{"msg": "create table test (id int primary key, data int as (1) stored❰;❱ ⟵ ) expected"}
# test: insert (expr)
create table test (id int primary key, data int as (1 + 1) stored);
select system.table('test').columns[1];
[{
  "name": "data",
  "type": 2,
  "type_size": 4,
  "constraints": [["as_stored", "1 + 1"], ["default", null]]
}]
explain insert into test values (0, null);
[{
  "main": {
    "00": "set_ptr             1      -      0     ",
    "01": "dup                 2      1      0     ",
    "02": "store_open          3      2      11    ",
    "03": "int                 4      -      0     # 1",
    "04": "push                4      0      0     ",
    "05": "int                 4      -      0     # 1",
    "06": "int                 5      -      0     # 1",
    "07": "addii               6      4      5     ",
    "08": "push                6      0      0     ",
    "09": "update_store        3      1      0     ",
    "10": "store_next          3      3      0     ",
    "11": "free                3      0      0     ",
    "12": "free                2      0      0     ",
    "13": "send_shard          0      1      0     # public.test (last)",
    "14": "ret                 -1     0      -     "
  },
  "pushdown": {
    "00": "insert              -      0      0     # public.test",
    "01": "ret                 -1     0      -     "
  },
  "access": [["public.test", "rw"]]
}]
insert into test values (0, null);
insert into test values (1, null), (2, 42), (3, 43);
select * from test;
[[0, 2], [1, 2], [2, 2], [3, 2]]
# test: insert column list (expr)
insert into test (id) values (5), (6);
select * from test;
[[0, 2], [1, 2], [2, 2], [3, 2], [5, 2], [6, 2]]
drop table test;
# test: insert (expr, reuse column)
create table test (id int primary key, data int default 0 as (data + 1) stored not null);
insert into test values (0, null);
{"msg": "column 'data' cannot be NULL"}
insert into test values (0, 42);
select * from test;
[[0, 43]]
# test: insert column list default (expr, reuse column)
insert into test values (1);
{"msg": "insert into test values (1❰)❱ ⟵ 'int' expected for column 'data'"}
insert into test (id) values (1), (2);
select * from test;
[[0, 43], [1, 1], [2, 1]]
# test: insert column list (expr, reuse column)
insert into test (id, data) values (3, 777), (4, 777);
insert into test (id, data) values (5, null);
{"msg": "column 'data' cannot be NULL"}
select * from test;
[[0, 43], [1, 1], [2, 1], [3, 778], [4, 778]]
drop table test;
# test: insert (expr, use other column)
create table test (id int primary key, data int as (id * 2) stored);
insert into test values (2, 0), (4, 0);
select * from test;
[[2, 4], [4, 8]]
drop table test;
# test: insert (expr, use other generated column)
create table test (id int primary key, data int as (777) stored, data2 int as (data) stored);
insert into test values (1, 0, 0), (2, 0, 0);
# test: insert default (expr, use other generated column)
insert into test (id) values (3), (4);
select * from test;
[[1, 777, 0], [2, 777, 0], [3, 777, null], [4, 777, null]]
drop table test;
# test: insert (expr, type mismatch)
create table test (id int primary key, data int as ("string") stored);
insert into test values (0, 0);
{"msg": "❰insert❱ ⟵ column 'test.data' generated expression type 'string' does not match column type 'int'"}
select * from test;
[]
drop table test;
# test: insert returning * (expr)
create table test (id int primary key, data int as (1 + 1) stored);
insert into test values (0, null) returning *;
[[0, 2]]
insert into test values (1, null) returning *;
[[1, 2]]
drop table test;
# test: upsert (expr)
create table test (id int primary key, data int default 0 as (data + 1) stored not null);
insert into test values (0, 0);
explain insert into test (id) values (0) on conflict do update set data = data + 1;
[{
  "main": {
    "00": "set_ptr             1      -      0     ",
    "01": "dup                 2      1      0     ",
    "02": "store_open          3      2      11    ",
    "03": "int                 4      -      0     # 1",
    "04": "push                4      0      0     ",
    "05": "store_read          4      3      1     ",
    "06": "int                 5      -      0     # 1",
    "07": "addii               6      4      5     ",
    "08": "push                6      0      0     ",
    "09": "update_store        3      1      0     ",
    "10": "store_next          3      3      0     ",
    "11": "free                3      0      0     ",
    "12": "free                2      0      0     ",
    "13": "send_shard          0      1      0     # public.test (last)",
    "14": "ret                 -1     0      -     "
  },
  "pushdown": {
    "00": "table_prepare       0      -      0     # public.test",
    "01": "jmp                 9      0      0     ",
    "02": "int                 1      -      0     # 1",
    "03": "push                1      0      0     ",
    "04": "table_readi32       1      0      1     ",
    "05": "int                 2      -      0     # 1",
    "06": "addii               3      1      2     ",
    "07": "push                3      0      0     ",
    "08": "update              0      1      0     ",
    "09": "upsert              0      2      -1    ",
    "10": "free                0      0      0     ",
    "11": "ret                 -1     0      -     "
  },
  "access": [["public.test", "rw"]]
}]
insert into test (id) values (0) on conflict do update set data = data + 1;
select * from test;
[[0, 2]]
# test: upsert returning * (expr)
insert into test (id) values (0) on conflict do update set data = data + 1 returning *;
[[0, 3]]
select * from test;
[[0, 3]]
drop table test;
# test: insert generated key (null)
create table test (id int primary key as (777) stored);
insert into test values (null);
# test: insert generated key (expr)
insert into test values (0);
{"msg": "index 'primary': unique key constraint violation"}
insert into test values (0);
{"msg": "index 'primary': unique key constraint violation"}
select * from test;
[777]
drop table test;
# test: insert (subquery)
create table test (id int primary key as (select 123) stored);
{"msg": "create table test (id int primary key as (❰select❱ ⟵ unexpected subquery"}
drop table test;
{"msg": "table 'test': not exists"}
# test: insert select
create table test (id int primary key, data int as (1 + 1) stored);
insert into test select 0, 0;
select * from test;
[[0, 2]]
# test: insert select from table
create table src (id int primary key, data int);
insert into src values (1, 0), (2, 0);
explain insert into test select * from src;
[{
  "main": {
    "00": "send_all            0      0      19    # public.src",
    "01": "recv                1      0      0     ",
    "02": "union_set           1      0      -1    ",
    "03": "dup                 2      1      0     ",
    "04": "dup                 3      2      0     ",
    "05": "store_open          4      3      14    ",
    "06": "int                 5      -      0     # 1",
    "07": "push                5      0      0     ",
    "08": "int                 5      -      0     # 1",
    "09": "int                 6      -      0     # 1",
    "10": "addii               7      5      6     ",
    "11": "push                7      0      0     ",
    "12": "update_store        4      1      0     ",
    "13": "store_next          4      6      0     ",
    "14": "free                4      0      0     ",
    "15": "free                3      0      0     ",
    "16": "send_shard          0      2      0     # public.test (last)",
    "17": "ret                 -1     0      -     "
  },
  "pushdown": {
    "00": "set                 0      2      0     ",
    "01": "table_open_part     1      0      8     # public.src (primary)",
    "02": "table_readi32       2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "table_readi32       2      1      1     ",
    "05": "push                2      0      0     ",
    "06": "set_add             0      0      0     ",
    "07": "table_next          1      2      0     ",
    "08": "free                1      0      0     ",
    "09": "ret                 0      0      -     ",
    "10": "insert              -      0      0     # public.test",
    "11": "ret                 -1     0      -     "
  },
  "access": [["public.test", "rw"], ["public.src", "ro"]]
}]
insert into test select * from src returning *;
[[1, 2], [2, 2]]
select * from test;
[[0, 2], [1, 2], [2, 2]]
drop table src;
drop table test;
disconnect S0;
close E0;
