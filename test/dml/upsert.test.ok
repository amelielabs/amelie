env_open E0
connect E0 S0
connect: on_connect
# test: on conflict parsing
create table test (id int primary key, data int)
insert into test values(1, 0) 123
query: on_error
{"code": 1, "msg": "unexpected clause at the end of command"}
insert into test values(1, 0) ON
query: on_error
{"code": 1, "msg": "INSERT VALUES ON <CONFLICT> expected"}
insert into test values(1, 0) ON 123
query: on_error
{"code": 1, "msg": "INSERT VALUES ON <CONFLICT> expected"}
insert into test values(1, 0) on conflict
query: on_error
{"code": 1, "msg": "INSERT VALUES ON CONFLICT <DO> expected"}
insert into test values(1, 0) on conflict 123
query: on_error
{"code": 1, "msg": "INSERT VALUES ON CONFLICT <DO> expected"}
insert into test values(1, 0) on conflict do
query: on_error
{"code": 1, "msg": "INSERT VALUES ON CONFLICT DO <REPLACE | NOTHING | UPDATE> expected"}
insert into test values(1, 0) on conflict do 123
query: on_error
{"code": 1, "msg": "INSERT VALUES ON CONFLICT DO <REPLACE | NOTHING | UPDATE> expected"}
insert into test values(1, 0) on conflict do update
query: on_error
{"code": 1, "msg": "UPDATE <SET> expected"}
insert into test values(1, 0) on conflict do update set
query: on_error
{"code": 1, "msg": "UPDATE name SET <path> expected"}
insert into test values(1, 0) on conflict do update set 123
query: on_error
{"code": 1, "msg": "UPDATE name SET <path> expected"}
insert into test values(1, 0) on conflict do update set path
query: on_error
{"code": 1, "msg": "UPDATE name SET path <=> expected"}
insert into test values(1, 0) on conflict do update set path =
query: on_error
{"code": 1, "msg": "bad expression"}
# test: on conflict do replace
insert into test values(1, 0)
insert into test values(1, 0)
query: on_error
{"code": 1, "msg": "unique key constraint violation"}
insert into test values(1, null) on conflict do replace
insert into test values(1, null) on conflict do replace
select * from test
[1, null]
drop table test
disconnect S0
env_close E0
