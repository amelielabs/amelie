env_open E0
connect E0 S0
connect: on_connect
# test: insert statement parsing
insert
query: on_error
{"code": 1, "msg": "INSERT <INTO> expected"}
insert junk
query: on_error
{"code": 1, "msg": "INSERT <INTO> expected"}
insert into
query: on_error
{"code": 1, "msg": "INSERT INTO <name> expected"}
insert into "name"
query: on_error
{"code": 1, "msg": "INSERT INTO <name> expected"}
insert into 1
query: on_error
{"code": 1, "msg": "INSERT INTO <name> expected"}
insert into name
query: on_error
{"code": 1, "msg": "table 'name': not exists"}
create table test (id int primary key)
insert into test
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values
query: on_error
{"code": 1, "msg": "expected '('"}
insert into test values(
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values(,
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values(123
query: on_error
{"code": 1, "msg": "expected ')'"}
insert into test values(123,
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
# test: insert type validate
insert into test values ("123")
query: on_error
{"code": 1, "msg": "column <id>: does not match data type"}
insert into test values (123, 123)
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
select * from test
# test: insert
insert into test values (123)
# test: primary unique key constraint violation
insert into test values (123)
query: on_error
{"code": 1, "msg": "unique key constraint violation"}
# test: replace
replace into test values (123)
# test: insert schema
drop table test
create schema test
create table test.test (id int primary key)
insert into test values (123)
query: on_error
{"code": 1, "msg": "table 'test': not exists"}
insert into test.test values (123)
select * from test
query: on_error
{"code": 1, "msg": "FROM <test> table or view is not found"}
select * from test.test
[123]
drop table test.test
# test: insert compound key
create table test (id int, id2 int, primary key (id, id2))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "", "asc": true}, {"column": 1, "type": 2, "path": "", "asc": true}]
insert into test values (123)
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values (1, 2, 3)
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
insert into test values (1, 2)
select * from test
[1, 2]
drop table test
# test: insert nested key
create table test (obj object, primary key (obj.id int))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "id", "asc": true}]
insert into test values (123)
query: on_error
{"code": 1, "msg": "column <obj>: does not match data type"}
insert into test values ( {"id": 48} )
select * from test
[{"id": 48}]
select obj.id from test
48
drop table test
# test: insert nested key #2
create table test (obj object, primary key (obj.data.id int))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "data.id", "asc": true}]
insert into test values (123)
query: on_error
{"code": 1, "msg": "column <obj>: does not match data type"}
insert into test values ( {"id": 48} )
query: on_error
{"code": 1, "msg": "column obj: key path <data.id> is not found"}
insert into test values ( {"data": []} )
query: on_error
{"code": 1, "msg": "expected data type 'map', but got 'array'"}
insert into test values ( {"data": {}} )
query: on_error
{"code": 1, "msg": "column obj: key path <data.id> is not found"}
insert into test values ( {"data": {"id": "48"} } )
query: on_error
{"code": 1, "msg": "column obj: key path <data.id> does not match data type"}
insert into test values ( {"data": {"id": 48} } )
select * from test
[{"data": {"id": 48}}]
drop table test
# test: insert nested key compound
create table test (obj object, primary key (obj.data.id int, obj.id int))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "data.id", "asc": true}, {"column": 0, "type": 2, "path": "id", "asc": true}]
insert into test values ( {"data": {"id": 48} } )
query: on_error
{"code": 1, "msg": "column obj: key path <id> is not found"}
insert into test values ( {"data": {"id": 48}, "id": 1 } )
select * from test
[{"data": {"id": 48}, "id": 1}]
drop table test
# test: insert one column expr
create table test (id string primary key)
insert into test values ("hello")
insert into test ("world")
query: on_error
{"code": 1, "msg": "INSERT INTO name (<column name> expected"}
insert into test values ("world")
insert into test "again"
select * from test
["again"]
["hello"]
["world"]
drop table test
# test: insert one column expr #2
create table test (id string primary key, data int)
insert into test "again"
query: on_error
{"code": 1, "msg": "INSERT INTO <VALUES> expected"}
insert into test "again", 2
query: on_error
{"code": 1, "msg": "INSERT INTO <VALUES> expected"}
insert into test ("again", 2)
query: on_error
{"code": 1, "msg": "INSERT INTO name (<column name> expected"}
insert into test values ("again", 2)
select * from test
["again", 2]
drop table test
# test: insert one column expr #3
create table test (id int primary key)
insert into test 1,2,3
select * from test
[1]
[2]
[3]
drop table test
# test: insert one column expr #4
create table test (obj object, primary key(obj.id int))
insert into test values ({"id": 48})
insert into test ({"id": 49})
query: on_error
{"code": 1, "msg": "INSERT INTO name (<column name> expected"}
insert into test {"id": 49}
insert into test {"id": 1}
insert into test {"id": 2}
insert into test {"id": 3}
select * from test
[{"id": 1}]
[{"id": 2}]
[{"id": 3}]
[{"id": 48}]
[{"id": 49}]
select obj.id from test where obj.id >= 3
3
48
49
drop table test
# test: insert list
create table test (id int primary key, data int)
insert into test (id, data) values ()
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test (id, data) values (123)
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
insert into test (id, data) values (123, 123, 123)
query: on_error
{"code": 1, "msg": "expected ')'"}
insert into test (id, data) values (123, 123)
select * from test
[123, 123]
drop table test
# test: insert list column order
create table test (id int primary key, data int)
insert into test (data, id) values (123, 123)
query: on_error
{"code": 1, "msg": "column list must be in order"}
insert into test (data, id, data) values (123, 123)
query: on_error
{"code": 1, "msg": "column list must be in order"}
select * from test
drop table test
# test: insert list column reuse
create table test (id int primary key, data int)
insert into test (id, id) values (123, 123)
query: on_error
{"code": 1, "msg": "column list must be in order"}
insert into test (id, data) values (123, 123)
select * from test
[123, 123]
drop table test
# test: insert list null
create table test (id int primary key, data int)
insert into test (id) values (1)
insert into test (id, data) values (2, null)
insert into test (id, data) values (null, null)
query: on_error
{"code": 1, "msg": "column <id> value cannot be NULL"}
insert into test values (3, null)
insert into test values (null, null)
query: on_error
{"code": 1, "msg": "column <id> value cannot be NULL"}
select * from test
[1, null]
[2, null]
[3, null]
drop table test
# test: insert list null #2
create table test (data int, id int primary key)
insert into test (id) values (1)
select * from test
[null, 1]
drop table test
# test: insert list not null
create table test (id int primary key, data int not null)
insert into test (id) values (1)
query: on_error
{"code": 1, "msg": "column <data> value cannot be NULL"}
insert into test (id, data) values (2, null)
query: on_error
{"code": 1, "msg": "column <data> value cannot be NULL"}
insert into test values (3, null)
query: on_error
{"code": 1, "msg": "column <data> value cannot be NULL"}
insert into test values (null, null)
query: on_error
{"code": 1, "msg": "column <id> value cannot be NULL"}
insert into test (id, data) values (2, 2)
select * from test
[2, 2]
drop table test
# test: insert list not null key
create table test (id int primary key, data int)
insert into test (data) values (123)
query: on_error
{"code": 1, "msg": "column <id> value cannot be NULL"}
insert into test values (null, 123)
query: on_error
{"code": 1, "msg": "column <id> value cannot be NULL"}
select * from test
drop table test
# test: insert list default
create table test (id int primary key, data int default 123)
insert into test (id) values (1)
select * from test
[1, 123]
drop table test
# test: insert list default #2
create table test (id int primary key, data int default 123)
insert into test (id) values (1), (2), (3)
select * from test
[1, 123]
[2, 123]
[3, 123]
drop table test
# test: insert list default key
create table test (id int default 123 primary key, data int)
insert into test (data) values (1)
select * from test
[123, 1]
insert into test (data) values (1)
query: on_error
{"code": 1, "msg": "unique key constraint violation"}
drop table test
# test: insert list default key #2
create table test (id int default 123 primary key)
insert into test () values ()
select * from test
[123]
insert into test () values ()
query: on_error
{"code": 1, "msg": "unique key constraint violation"}
drop table test
# test: insert serial
create table test (id int generated serial primary key)
insert into test () values ()
insert into test () values ()
insert into test () values ()
select * from test
[0]
[1]
[2]
drop table test
# test: insert serial #2
create table test (id int generated serial primary key, data int)
insert into test (data) values (123)
insert into test () values ()
select * from test
[0, 123]
[1, null]
drop table test
# test: insert serial alias
create table test (id int primary key serial)
insert into test () values ()
insert into test () values ()
insert into test () values ()
select * from test
[0]
[1]
[2]
drop table test
# test: insert serial directly
create table test (id int generated serial primary key, data int)
insert into test (data) values (123)
insert into test (id, data) values (1, 123)
insert into test () values ()
select * from test
[0, 123]
[1, 123]
[2, null]
drop table test
# test: insert serial null
create table test (id int generated serial primary key, data int)
insert into test (id, data) values (null, 123)
query: on_error
{"code": 1, "msg": "column <id> value cannot be NULL"}
select * from test
drop table test
# test: insert serial multiple column
create table test (id int generated serial primary key, data int generated serial)
insert into test () values ()
insert into test () values ()
insert into test () values ()
select * from test
[0, 0]
[1, 1]
[2, 2]
insert into test (data) values (0)
insert into test (data) values (0)
insert into test () values ()
select * from test
[0, 0]
[1, 1]
[2, 2]
[3, 0]
[4, 0]
[5, 5]
drop table test
disconnect S0
env_close E0
