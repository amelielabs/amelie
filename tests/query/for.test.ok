open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: for parsing
for
{"msg": "for ⟵ name expected"}
for 1
{"msg": "for ❰1❱ ⟵ name expected"}
for it
{"msg": "for it ⟵ IN expected"}
for it 1
{"msg": "for it ❰1❱ ⟵ IN expected"}
for it in
{"msg": "for it in ⟵ target name expected"}
for it in 1
{"msg": "for it in ❰1❱ ⟵ target name expected"}
for it in ;
{"msg": "for it in ❰;❱ ⟵ target name expected"}
for it in [1,2,3]
{"msg": "for it in ❰[❱ ⟵ target name expected"}
for it in ([1,2,3]
{"msg": "for it in ([1,2,3] ⟵ ) expected"}
for it in (select [1,2,3]
{"msg": "for it in (select [1,2,3] ⟵ ) expected"}
for it in (select [1,2,3])
{"msg": "for it in (select [1,2,3]) ⟵ DO expected"}
for it in (select [1,2,3]) do
{"msg": "for it in (select [1,2,3]) do ⟵ END expected"}
# test: for
explain for it in (select [1,2,3]) do end
[{
  "bytecode": {
    "frontend": {
      "00": "json                0      0      0     ",
      "01": "dup                 1      0      0     ",
      "02": "json_open           2      1      4     ",
      "03": "json_next           2      3      0     ",
      "04": "free                2      0      0     ",
      "05": "free                1      0      0     ",
      "06": "ret                 0      0      0     "
    }
  },
  "access": []
}]
for it in (select [1,2,3]) do end
declare n int := 0; for it in (select [1,2,3]) do n := n + 1; end; select n
[3]
# test: for if
declare n int := 0; for it in (select [1,2,3,4] as it) do if it::int % 2 = 0 then n := n + 1; end; end; select n
[2]
# test: for for
declare n int := 0; for i in (select [1,2,3]) do for j in (select [1,2,3]) do n := n + 1; end; end; select n
[9]
explain declare n int := 0; for i in (select [1,2,3] as i) do for j in (select [1,2,3] as j) do n := n + i.i::int + j.j::int; end; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "json                1      0      0     ",
      "04": "dup                 2      1      0     ",
      "05": "json_open           3      2      24    ",
      "06": "json                4      5      0     ",
      "07": "dup                 5      4      0     ",
      "08": "json_open           6      5      21    ",
      "09": "dup                 7      0      0     ",
      "10": "json_read           8      3      0     ",
      "11": "push                8      0      0     ",
      "12": "call                8      -      1     # public.int()",
      "13": "json_read           9      6      0     ",
      "14": "push                9      0      0     ",
      "15": "call                9      -      1     # public.int()",
      "16": "addii               10     8      9     ",
      "17": "addii               8      7      10    ",
      "18": "assign              0      8      0     ",
      "19": "free                8      0      0     ",
      "20": "json_next           6      9      0     ",
      "21": "free                6      0      0     ",
      "22": "free                5      0      0     ",
      "23": "json_next           3      6      0     ",
      "24": "free                3      0      0     ",
      "25": "free                2      0      0     ",
      "26": "dup                 2      0      0     ",
      "27": "content             2      -      -     ",
      "28": "ret                 0      0      0     "
    }
  },
  "access": []
}]
declare n int := 0; for i in (select [1,2,3] as i) do for j in (select [1,2,3] as j) do n := n + i.i::int + j.j::int; end; end; select n
[36]
# test: for for for
declare n int := 0; for i in (select [1,2,3]) do for j in (select [1,2,3]) do for k in (select [1,2,3]) do n := n + 1; end; end; end; select n
[27]
declare n int := 0; for i in (select [1,2,3] as i) do for j in (select [1,2,3] as j) do for k in (select [1,2,3] as k) do n := n + i.i::int + j.j::int + k.k::int; end; end; end; select n
[162]
# test: for in select
create table test (id int primary key)
insert into test values (1), (2), (3)
explain declare n int := 0; for i in (select * from test) do n := n + 1; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "union               1      0      0     ",
      "04": "send_all            0      -      1     # public.test",
      "05": "union_recv          1      0      0     ",
      "06": "union_set           1      0      -1    ",
      "07": "dup                 2      1      0     ",
      "08": "store_open          3      2      15    ",
      "09": "dup                 4      0      0     ",
      "10": "int                 5      -      0     # 1",
      "11": "addii               6      4      5     ",
      "12": "assign              0      6      0     ",
      "13": "free                6      0      0     ",
      "14": "store_next          3      9      0     ",
      "15": "free                3      0      0     ",
      "16": "free                2      0      0     ",
      "17": "dup                 2      0      0     ",
      "18": "content             2      -      -     ",
      "19": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 1      1      0     ",
      "01": "table_open_part     2      0      6     # public.test (primary)",
      "02": "table_readi32       3      2      0     ",
      "03": "push                3      0      0     ",
      "04": "set_add             1      0      0     ",
      "05": "table_next          2      2      0     ",
      "06": "free                2      0      0     ",
      "07": "result              1      0      0     ",
      "08": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare n int := 0; for i in (select * from test) do n := n + 1; end; select n
[3]
declare n int := 0; for i in (select * from test) do n := n + i.id; end; select n
[6]
drop table test
# test: for in select for int select
create table test (id int primary key)
insert into test values (1), (2), (3)
explain declare n int; n := 0; for i in (select * from test) do  for j in (select * from test) do n := n + 1; end; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "union               1      0      0     ",
      "04": "send_all            0      -      1     # public.test",
      "05": "union_recv          1      0      0     ",
      "06": "union_set           1      0      -1    ",
      "07": "dup                 2      1      0     ",
      "08": "store_open          3      2      24    ",
      "09": "union               4      0      0     ",
      "10": "send_all            9      -      4     # public.test",
      "11": "union_recv          4      0      0     ",
      "12": "union_set           4      0      -1    ",
      "13": "dup                 5      4      0     ",
      "14": "store_open          6      5      21    ",
      "15": "dup                 7      0      0     ",
      "16": "int                 8      -      0     # 1",
      "17": "addii               9      7      8     ",
      "18": "assign              0      9      0     ",
      "19": "free                9      0      0     ",
      "20": "store_next          6      15     0     ",
      "21": "free                6      0      0     ",
      "22": "free                5      0      0     ",
      "23": "store_next          3      9      0     ",
      "24": "free                3      0      0     ",
      "25": "free                2      0      0     ",
      "26": "dup                 2      0      0     ",
      "27": "content             2      -      -     ",
      "28": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 1      1      0     ",
      "01": "table_open_part     2      0      6     # public.test (primary)",
      "02": "table_readi32       3      2      0     ",
      "03": "push                3      0      0     ",
      "04": "set_add             1      0      0     ",
      "05": "table_next          2      2      0     ",
      "06": "free                2      0      0     ",
      "07": "result              1      0      0     ",
      "08": "ret                 0      0      0     ",
      "09": "set                 4      1      0     ",
      "10": "table_open_part     5      20     15    # public.test (primary)",
      "11": "table_readi32       6      5      0     ",
      "12": "push                6      0      0     ",
      "13": "set_add             4      0      0     ",
      "14": "table_next          5      11     0     ",
      "15": "free                5      0      0     ",
      "16": "result              4      0      0     ",
      "17": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare n int := 0; for i in (select * from test) do for j in (select * from test) do n := n + 1; end; end; select n
[9]
declare n int := 0; for i in (select * from test) do for j in (select * from test) do n := n + i.id + j.id; end; end; select n
[36]
drop table test
# test: for (select from (select from))
create table test (id int primary key)
insert into test values (1), (2), (3)
explain declare n int := 0; for i in (select * from (select * from test) x) do n := n + 1; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "union               1      0      0     ",
      "04": "send_all            0      -      1     # public.test",
      "05": "union_recv          1      0      0     ",
      "06": "union_set           1      0      -1    ",
      "07": "set                 2      1      0     ",
      "08": "dup                 3      1      0     ",
      "09": "store_open          4      3      14    ",
      "10": "store_read          5      4      0     ",
      "11": "push                5      0      0     ",
      "12": "set_add             2      0      0     ",
      "13": "store_next          4      10     0     ",
      "14": "free                4      0      0     ",
      "15": "free                3      0      0     ",
      "16": "dup                 3      2      0     ",
      "17": "store_open          4      3      24    ",
      "18": "dup                 5      0      0     ",
      "19": "int                 6      -      0     # 1",
      "20": "addii               7      5      6     ",
      "21": "assign              0      7      0     ",
      "22": "free                7      0      0     ",
      "23": "store_next          4      18     0     ",
      "24": "free                4      0      0     ",
      "25": "free                3      0      0     ",
      "26": "dup                 3      0      0     ",
      "27": "content             3      -      -     ",
      "28": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 1      1      0     ",
      "01": "table_open_part     2      0      6     # public.test (primary)",
      "02": "table_readi32       3      2      0     ",
      "03": "push                3      0      0     ",
      "04": "set_add             1      0      0     ",
      "05": "table_next          2      2      0     ",
      "06": "free                2      0      0     ",
      "07": "result              1      0      0     ",
      "08": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare n int := 0; for i in (select * from (select * from test) x) do n := n + 1; end; select n
[3]
drop table test
# test: for table
create table test (id int primary key)
insert into test values (1), (2), (3)
for i in test do end
{"msg": "for i in test ❰do❱ ⟵ tables are not supported here"}
drop table test
# test: for var
declare list json := []; declare x json := [1,2,3]; for it in x do list := list::append(it); end; select list
[[1, 2, 3]]
declare list json := []; declare x json := [1,2,3]; for it in (x) do list := list::append(it); end; select list
[[1, 2, 3]]
declare list json := []; declare x json := [1,2,3]; for it in (select x as it) do list := list::append(it); end; select list
[[1, 2, 3]]
declare x int := 77; declare last int; for it in x do last := it; end; select last
[77]
declare x int := 77; declare last int; for it in (x) do last := it; end; select last
[77]
declare x int := 77; declare last int; for it in (select x as it) do last := it; end; select last
[77]
# test: for var (table)
create table test (id int primary key)
insert into test values (1), (2), (3)
# test: select from var (table)
declare x table (a int, b int); select id, id * 10 into x from test; for it in x do end
declare list json := []; declare x table (a int, b int); select id, id * 10 into x from test; for it in x do list := list::append(it.a)::append(it.b); end; select list
[[1, 10, 2, 20, 3, 30]]
drop table test
# test: for .. select
create table test (id int primary key)
insert into test values (1), (2), (3)
explain declare total int; declare n int; total := 0; for i in (select [1,2,3]) do select count(id) into n from test; total := total + n; end; select total;
[{
  "bytecode": {
    "frontend": {
      "00": "int                 2      -      0     # 0",
      "01": "assign              0      2      0     ",
      "02": "free                2      0      0     ",
      "03": "json                2      0      0     ",
      "04": "dup                 3      2      0     ",
      "05": "json_open           4      3      27    ",
      "06": "union               5      0      0     ",
      "07": "send_all            0      -      5     # public.test",
      "08": "union_recv          5      0      0     ",
      "09": "union_set           5      1      -1    ",
      "10": "union_set_aggs      5      26     0     ",
      "11": "set                 6      1      0     ",
      "12": "store_open          7      5      17    ",
      "13": "count               8      7      0     ",
      "14": "push                8      0      0     ",
      "15": "set_add             6      0      0     ",
      "16": "store_next          7      13     0     ",
      "17": "free                7      0      0     ",
      "18": "free                5      0      0     ",
      "19": "assign              1      6      0     ",
      "20": "free                6      0      0     ",
      "21": "dup                 5      0      0     ",
      "22": "dup                 6      1      0     ",
      "23": "addii               7      5      6     ",
      "24": "assign              0      7      0     ",
      "25": "free                7      0      0     ",
      "26": "json_next           4      6      0     ",
      "27": "free                4      0      0     ",
      "28": "free                3      0      0     ",
      "29": "close               0      0      0     ",
      "30": "dup                 3      0      0     ",
      "31": "content             3      -      -     ",
      "32": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         5      1      1     ",
      "01": "table_open_part     6      6      9     # public.test (primary)",
      "02": "bool                7      1      0     ",
      "03": "push                7      0      0     ",
      "04": "set_get             7      5      0     ",
      "05": "table_readi32       8      6      0     ",
      "06": "push                8      0      0     ",
      "07": "set_agg             5      7      26    ",
      "08": "table_next          6      2      0     ",
      "09": "free                6      0      0     ",
      "10": "bool                6      1      0     ",
      "11": "push                6      0      0     ",
      "12": "set_get             6      5      0     ",
      "13": "null                7      0      0     ",
      "14": "push                7      0      0     ",
      "15": "set_agg             5      6      26    ",
      "16": "set_sort            5      0      0     ",
      "17": "result              5      0      0     ",
      "18": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare total int; declare n int; total := 0; for i in (select [1,2,3]) do select count(id) into n from test; total := total + n; end; select total;
[9]
drop table test
# test: for .. select (push target)
create table test (id int primary key)
insert into test values (1), (2), (3)
explain declare n int := 0; declare r int; for i in ([1,2,3]) do select 1 into r from test where id = i.i::int; n := n + r; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 2      -      0     # 0",
      "01": "assign              0      2      0     ",
      "02": "free                2      0      0     ",
      "03": "json                2      0      0     ",
      "04": "json_open           3      2      19    ",
      "05": "json_read           4      3      0     ",
      "06": "push                4      0      0     ",
      "07": "union               4      0      0     ",
      "08": "send_all            0      -      4     # public.test",
      "09": "union_recv          4      0      0     ",
      "10": "union_set           4      0      -1    ",
      "11": "assign              1      4      0     ",
      "12": "free                4      0      0     ",
      "13": "dup                 4      0      0     ",
      "14": "dup                 5      1      0     ",
      "15": "addii               6      4      5     ",
      "16": "assign              0      6      0     ",
      "17": "free                6      0      0     ",
      "18": "json_next           3      5      0     ",
      "19": "free                3      0      0     ",
      "20": "free                2      0      0     ",
      "21": "close               0      0      0     ",
      "22": "dup                 2      0      0     ",
      "23": "content             2      -      -     ",
      "24": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 4      1      0     ",
      "01": "table_open_part     5      5      12    # public.test (primary)",
      "02": "table_readi32       6      5      0     ",
      "03": "ref                 7      0      0     ",
      "04": "push                7      0      0     ",
      "05": "call                7      -      1     # public.int()",
      "06": "equii               8      6      7     ",
      "07": "jntr                11     8      0     ",
      "08": "int                 6      -      0     # 1",
      "09": "push                6      0      0     ",
      "10": "set_add             4      0      0     ",
      "11": "table_next          5      2      0     ",
      "12": "free                5      0      0     ",
      "13": "result              4      0      0     ",
      "14": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare n int := 0; declare r int; for i in ([1,2,3]) do select 1 into r from test where id = i.i::int; n := n + r; end; select n
[3]
drop table test
# test: for .. select (push target agg)
create table test (id int primary key)
insert into test values (1), (2), (3)
explain declare n int := 0; declare r int; for i in ([1,2,3]) do select count(*) into r from test where id = i.i::int; n := n + r; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 2      -      0     # 0",
      "01": "assign              0      2      0     ",
      "02": "free                2      0      0     ",
      "03": "json                2      0      0     ",
      "04": "json_open           3      2      28    ",
      "05": "json_read           4      3      0     ",
      "06": "push                4      0      0     ",
      "07": "union               4      0      0     ",
      "08": "send_all            0      -      4     # public.test",
      "09": "union_recv          4      0      0     ",
      "10": "union_set           4      1      -1    ",
      "11": "union_set_aggs      4      26     0     ",
      "12": "set                 5      1      0     ",
      "13": "store_open          6      4      18    ",
      "14": "count               7      6      0     ",
      "15": "push                7      0      0     ",
      "16": "set_add             5      0      0     ",
      "17": "store_next          6      14     0     ",
      "18": "free                6      0      0     ",
      "19": "free                4      0      0     ",
      "20": "assign              1      5      0     ",
      "21": "free                5      0      0     ",
      "22": "dup                 4      0      0     ",
      "23": "dup                 5      1      0     ",
      "24": "addii               6      4      5     ",
      "25": "assign              0      6      0     ",
      "26": "free                6      0      0     ",
      "27": "json_next           3      5      0     ",
      "28": "free                3      0      0     ",
      "29": "free                2      0      0     ",
      "30": "close               0      0      0     ",
      "31": "dup                 2      0      0     ",
      "32": "content             2      -      -     ",
      "33": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set_ordered         4      1      1     ",
      "01": "table_open_part     5      6      15    # public.test (primary)",
      "02": "table_readi32       6      5      0     ",
      "03": "ref                 7      0      0     ",
      "04": "push                7      0      0     ",
      "05": "call                7      -      1     # public.int()",
      "06": "equii               8      6      7     ",
      "07": "jntr                14     8      0     ",
      "08": "bool                6      1      0     ",
      "09": "push                6      0      0     ",
      "10": "set_get             6      4      0     ",
      "11": "int                 7      -      0     # 1",
      "12": "push                7      0      0     ",
      "13": "set_agg             4      6      26    ",
      "14": "table_next          5      2      0     ",
      "15": "free                5      0      0     ",
      "16": "bool                5      1      0     ",
      "17": "push                5      0      0     ",
      "18": "set_get             5      4      0     ",
      "19": "null                6      0      0     ",
      "20": "push                6      0      0     ",
      "21": "set_agg             4      5      26    ",
      "22": "set_sort            4      0      0     ",
      "23": "result              4      0      0     ",
      "24": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare n int := 0; declare r int; for i in ([1,2,3]) do select count(*) into r from test where id = i.i::int; n := n + r; end; select n
[3]
drop table test
# test: for .. select (push var)
create table test (id int primary key)
insert into test values (1), (2), (3)
explain declare n int := 0; declare r int; declare k int; for i in ([1,2,3]) do k := i.i::int; select 1 into r from test where id = k; n := n + r; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 3      -      0     # 0",
      "01": "assign              0      3      0     ",
      "02": "free                3      0      0     ",
      "03": "json                3      0      0     ",
      "04": "json_open           4      3      25    ",
      "05": "json_read           5      4      0     ",
      "06": "push                5      0      0     ",
      "07": "call                5      -      1     # public.int()",
      "08": "assign              2      5      0     ",
      "09": "free                5      0      0     ",
      "10": "push_dup            2      0      0     ",
      "11": "union               5      0      0     ",
      "12": "dup                 6      2      0     ",
      "13": "push                6      0      0     ",
      "14": "send_lookup_by      0      -      -     # public.test",
      "15": "union_recv          5      0      0     ",
      "16": "union_set           5      0      -1    ",
      "17": "assign              1      5      0     ",
      "18": "free                5      0      0     ",
      "19": "dup                 5      0      0     ",
      "20": "dup                 6      1      0     ",
      "21": "addii               7      5      6     ",
      "22": "assign              0      7      0     ",
      "23": "free                7      0      0     ",
      "24": "json_next           4      5      0     ",
      "25": "free                4      0      0     ",
      "26": "free                3      0      0     ",
      "27": "close               0      0      0     ",
      "28": "dup                 3      0      0     ",
      "29": "content             3      -      -     ",
      "30": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 5      1      0     ",
      "01": "ref                 6      0      0     ",
      "02": "push                6      0      0     ",
      "03": "table_open_partl    6      5      11    # public.test (primary)",
      "04": "table_readi32       7      6      0     ",
      "05": "ref                 8      0      0     ",
      "06": "equii               9      7      8     ",
      "07": "jntr                11     9      0     ",
      "08": "int                 7      -      0     # 1",
      "09": "push                7      0      0     ",
      "10": "set_add             5      0      0     ",
      "11": "free                6      0      0     ",
      "12": "result              5      0      0     ",
      "13": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare n int := 0; declare r int; declare k int; for i in ([1,2,3]) do k := i.i::int; select 1 into r from test where id = k; n := n + r; end; select n
[3]
drop table test
# test: for .. returning
create table test (id int primary key, data int)
insert into test values (1, 0), (2, 0), (3, 0)
explain declare n int := 0; declare r int := 0; for i in ([1,2,3]) do update test set data = id where id = i.i::int returning 1 into r; n := n + r; end; select n
[{
  "bytecode": {
    "frontend": {
      "00": "int                 2      -      0     # 0",
      "01": "assign              0      2      0     ",
      "02": "free                2      0      0     ",
      "03": "int                 2      -      0     # 0",
      "04": "assign              1      2      0     ",
      "05": "free                2      0      0     ",
      "06": "json                2      0      0     ",
      "07": "json_open           3      2      21    ",
      "08": "json_read           4      3      0     ",
      "09": "push                4      0      0     ",
      "10": "union               4      0      0     ",
      "11": "send_all            0      -      4     # public.test",
      "12": "union_recv          4      0      0     ",
      "13": "assign              1      4      0     ",
      "14": "free                4      0      0     ",
      "15": "dup                 4      0      0     ",
      "16": "dup                 5      1      0     ",
      "17": "addii               6      4      5     ",
      "18": "assign              0      6      0     ",
      "19": "free                6      0      0     ",
      "20": "json_next           3      8      0     ",
      "21": "free                3      0      0     ",
      "22": "free                2      0      0     ",
      "23": "close               0      0      0     ",
      "24": "dup                 2      0      0     ",
      "25": "content             2      -      -     ",
      "26": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 4      1      0     ",
      "01": "table_open_part     5      5      17    # public.test (primary)",
      "02": "table_readi32       6      5      0     ",
      "03": "ref                 7      0      0     ",
      "04": "push                7      0      0     ",
      "05": "call                7      -      1     # public.int()",
      "06": "equii               8      6      7     ",
      "07": "jntr                16     8      0     ",
      "08": "int                 6      -      0     # 1",
      "09": "push                6      0      0     ",
      "10": "table_readi32       6      5      0     ",
      "11": "push                6      0      0     ",
      "12": "update              5      1      0     ",
      "13": "int                 6      -      0     # 1",
      "14": "push                6      0      0     ",
      "15": "set_add             4      0      0     ",
      "16": "table_next          5      2      0     ",
      "17": "free                5      0      0     ",
      "18": "result              4      0      0     ",
      "19": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
declare n int := 0; declare r int := 0; for i in ([1,2,3]) do update test set data = id where id = i.i::int returning 1 into r; n := n + r; end; select n
[3]
drop table test
# test: for .. insert
create table test (id int primary key, data int)
explain declare v int; for i in ([0,1,2,3,4,5,6,7,8,9]) do v := i::int; insert into test values (v, 0); end; select * from test
[{
  "bytecode": {
    "frontend": {
      "00": "json                1      0      0     ",
      "01": "json_open           2      1      12    ",
      "02": "json_read           3      2      0     ",
      "03": "push                3      0      0     ",
      "04": "call                3      -      1     # public.int()",
      "05": "assign              0      3      0     ",
      "06": "free                3      0      0     ",
      "07": "dup                 3      0      0     ",
      "08": "push                3      0      0     ",
      "09": "set_ptr             3      -      0     ",
      "10": "send_shard          0      -      3     # public.test",
      "11": "json_next           2      2      0     ",
      "12": "free                2      0      0     ",
      "13": "free                1      0      0     ",
      "14": "union               1      0      0     ",
      "15": "send_all            2      -      1     # public.test (last)",
      "16": "union_recv          1      0      0     ",
      "17": "union_set           1      0      -1    ",
      "18": "content             1      -      -     ",
      "19": "ret                 0      0      0     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.test",
      "01": "ret                 0      0      0     ",
      "02": "set                 1      2      0     ",
      "03": "table_open_part     2      12     10    # public.test (primary)",
      "04": "table_readi32       3      2      0     ",
      "05": "push                3      0      0     ",
      "06": "table_readi32       3      2      1     ",
      "07": "push                3      0      0     ",
      "08": "set_add             1      0      0     ",
      "09": "table_next          2      4      0     ",
      "10": "free                2      0      0     ",
      "11": "result              1      0      0     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
declare v int; for i in ([0,1,2,3,4,5,6,7,8,9]) do v := i::int; insert into test values (v, 0); end; select * from test
[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0]]
explain declare v int; for i in ([0,1,2,3,4,5,6,7,8,9]) do v := i::int; insert into test values (v, 0) on conflict do update set data = excluded.id; end; select * from test
[{
  "bytecode": {
    "frontend": {
      "00": "json                1      0      0     ",
      "01": "json_open           2      1      12    ",
      "02": "json_read           3      2      0     ",
      "03": "push                3      0      0     ",
      "04": "call                3      -      1     # public.int()",
      "05": "assign              0      3      0     ",
      "06": "free                3      0      0     ",
      "07": "dup                 3      0      0     ",
      "08": "push                3      0      0     ",
      "09": "set_ptr             3      -      0     ",
      "10": "send_shard          0      -      3     # public.test",
      "11": "json_next           2      2      0     ",
      "12": "free                2      0      0     ",
      "13": "free                1      0      0     ",
      "14": "union               1      0      0     ",
      "15": "send_all            10     -      1     # public.test (last)",
      "16": "union_recv          1      0      0     ",
      "17": "union_set           1      0      -1    ",
      "18": "content             1      -      -     ",
      "19": "ret                 0      0      0     "
    },
    "backend": {
      "00": "table_prepare       3      -      0     # public.test",
      "01": "jmp                 7      0      0     ",
      "02": "int                 4      -      0     # 1",
      "03": "push                4      0      0     ",
      "04": "excluded            4      0      0     ",
      "05": "push                4      0      0     ",
      "06": "update              3      1      0     ",
      "07": "upsert              3      2      -1    ",
      "08": "free                3      0      0     ",
      "09": "ret                 0      0      0     ",
      "10": "set                 1      2      0     ",
      "11": "table_open_part     2      12     18    # public.test (primary)",
      "12": "table_readi32       3      2      0     ",
      "13": "push                3      0      0     ",
      "14": "table_readi32       3      2      1     ",
      "15": "push                3      0      0     ",
      "16": "set_add             1      0      0     ",
      "17": "table_next          2      12     0     ",
      "18": "free                2      0      0     ",
      "19": "result              1      0      0     ",
      "20": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
declare v int; for i in ([0,1,2,3,4,5,6,7,8,9]) do v := i::int; insert into test values (v, 0) on conflict do update set data = excluded.id; end; select * from test
[[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]
truncate test
declare v int; for i in ([0,1,2,3,0,1,2,3,0,1,2,3,4,5]) do v := i::int; insert into test values (v, 0) on conflict do update set data = data + 1; end; select * from test
[[0, 2], [1, 2], [2, 2], [3, 2], [4, 0], [5, 0]]
drop table test
# test: for utility
for i in ([1,2,3]) do show all; end
{"msg": "for i in ([1,2,3]) do ❰show❱ ⟵ utility statement cannot be used here"}
# test: cte for
with a as (for i in ([1,2,3]) do end) select 1
{"msg": "with a as (❰for❱ ⟵ statement cannot be used inside CTE"}
with a as (select 1) for i in ([1,2,3]) do end
{"msg": "with a as (select 1) ❰for❱ ⟵ statement cannot be used inside CTE"}
disconnect S0
close E0
