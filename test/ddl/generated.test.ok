open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: as () parsing
create table test (id int primary key, AS
{"msg": "(<name> expected"}
create table test (id int primary key, data int AS
{"msg": " AS <(> expected"}
create table test (id int primary key, data int AS (
{"msg": "bad expression"}
create table test (id int primary key, data int AS (
{"msg": "bad expression"}
create table test (id int primary key, data int AS ()
{"msg": "bad expression"}
create table test (id int primary key, data int AS ()
{"msg": "bad expression"}
create table test (id int primary key, data int AS ())
{"msg": "bad expression"}
# test: virtual column type
create table test (id int primary key, data int AS (0))
{"msg": "AS () column <data> must be of type ANY"}
create table test (id int primary key, data any AS (0))
# test: virtual column insert
insert into test values (0, 1)
{"msg": "expected ')'"}
insert into test (id, data) values (0, 1)
{"msg": "<data> virtual columns cannot be updated"}
# test: virtual column upsert
insert into test values (0)
insert into test (id, data) values (0) on conflict do update set data = 1
{"msg": "<data> virtual columns cannot be updated"}
# test: virtual column update
update test set data = 1
{"msg": "virtual columns cannot be updated"}
# test: virtual column delete
delete from test where id = data
# test: virtual column join
insert into test values (0)
select test.* from test join [1,2,0] x on (test.data = x.*)
[[0]]
drop table test
# test: virtual column subquery
create table test (id int primary key, data any AS ( select 1 ))
insert into test values (0)
select data from test
{"msg": "unexpected subquery"}
drop table test
# test: virtual column recursive
create table test (id int primary key, data any AS ( data ))
insert into test values (0)
select data from test
{"msg": "virtual columns cannot be nested"}
drop table test
disconnect S0
close E0
