open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }];
connect E0 S0 127.0.0.1:3485;
# test: if parsing
if end;
{"msg": "if ❰end❱ ⟵ bad expression"}
if 1 end;
{"msg": "if 1 ❰end❱ ⟵ THEN expected"}
if 1 do end;
{"msg": "if 1 ❰do❱ ⟵ THEN expected"}
# test: if
explain if 1 then select 123; end;
[{
  "main": {
    "00": "int                 0      -      0     # 1",
    "01": "jntr                4      0      0     ",
    "02": "int                 0      -      0     # 123",
    "03": "free                0      0      0     ",
    "04": "ret                 -1     0      -     "
  },
  "access": []
}]
if 1 then select 123; end;
# test: if empty
explain if 1 then end;
[{
  "main": {
    "00": "int                 0      -      0     # 1",
    "01": "jntr                2      0      0     ",
    "02": "ret                 -1     0      -     "
  },
  "access": []
}]
if 1 then end;
# test: if else
explain if 1 then
	select 123;
else
	select 321;
end;
[{
  "main": {
    "00": "int                 0      -      0     # 1",
    "01": "jntr                5      0      0     ",
    "02": "int                 0      -      0     # 123",
    "03": "free                0      0      0     ",
    "04": "jmp                 7      0      0     ",
    "05": "int                 0      -      0     # 321",
    "06": "free                0      0      0     ",
    "07": "ret                 -1     0      -     "
  },
  "access": []
}]
if 1 then
	select 123;
else
	select 321;
end;
# test: if else else
if 1 then
	select 123;
else
	select 321;
else
	select 432;
end;
{"msg": "if 1 then\n\tselect 123;\nelse\n\tselect 321;\n❰else❱ ⟵ END expected"}
# test: if elsif
explain if 1 then
	select 123;
elsif 2 then
	select 321;
end;
[{
  "main": {
    "00": "int                 0      -      0     # 1",
    "01": "jntr                5      0      0     ",
    "02": "int                 0      -      0     # 123",
    "03": "free                0      0      0     ",
    "04": "jmp                 9      0      0     ",
    "05": "int                 0      -      0     # 2",
    "06": "jntr                9      0      0     ",
    "07": "int                 0      -      0     # 321",
    "08": "free                0      0      0     ",
    "09": "ret                 -1     0      -     "
  },
  "access": []
}]
if 1 then
	select 123;
elsif 2 then
	select 321;
end;
# test: if elsif elsif
explain if 1 then
	select 123;
elsif 2 then
	select 321;
elsif 3 then
	select 821;
end;
[{
  "main": {
    "00": "int                 0      -      0     # 1",
    "01": "jntr                5      0      0     ",
    "02": "int                 0      -      0     # 123",
    "03": "free                0      0      0     ",
    "04": "jmp                 14     0      0     ",
    "05": "int                 0      -      0     # 2",
    "06": "jntr                10     0      0     ",
    "07": "int                 0      -      0     # 321",
    "08": "free                0      0      0     ",
    "09": "jmp                 14     0      0     ",
    "10": "int                 0      -      0     # 3",
    "11": "jntr                14     0      0     ",
    "12": "int                 0      -      0     # 821",
    "13": "free                0      0      0     ",
    "14": "ret                 -1     0      -     "
  },
  "access": []
}]
if 1 then
	select 123;
elsif 2 then
	select 321;
elsif 3 then
	select 821;
end;
# test: if elsif else
if 1 then
	select 123;
elsif 2 then
	select 321;
else
end;
if 1 then
	select 123;
elsif 2 then
	select 321;
else
	1;
end;
{"msg": "if 1 then\n\tselect 123;\nelsif 2 then\n\tselect 321;\nelse\n\t❰1❱ ⟵ unexpected statement"}
explain if 1 then
	select 123;
elsif 2 then
	select 321;
else
	select 821;
end;
[{
  "main": {
    "00": "int                 0      -      0     # 1",
    "01": "jntr                5      0      0     ",
    "02": "int                 0      -      0     # 123",
    "03": "free                0      0      0     ",
    "04": "jmp                 12     0      0     ",
    "05": "int                 0      -      0     # 2",
    "06": "jntr                10     0      0     ",
    "07": "int                 0      -      0     # 321",
    "08": "free                0      0      0     ",
    "09": "jmp                 12     0      0     ",
    "10": "int                 0      -      0     # 821",
    "11": "free                0      0      0     ",
    "12": "ret                 -1     0      -     "
  },
  "access": []
}]
if 1 then
	select 123;
elsif 2 then
	select 321;
else
	select 821;
end;
# test: if elsif elsif else
explain if 1 then
	select 123;
elsif 2 then
	select 321;
elsif 3 then
	select 821;
else
	select 0;
end;
[{
  "main": {
    "00": "int                 0      -      0     # 1",
    "01": "jntr                5      0      0     ",
    "02": "int                 0      -      0     # 123",
    "03": "free                0      0      0     ",
    "04": "jmp                 17     0      0     ",
    "05": "int                 0      -      0     # 2",
    "06": "jntr                10     0      0     ",
    "07": "int                 0      -      0     # 321",
    "08": "free                0      0      0     ",
    "09": "jmp                 17     0      0     ",
    "10": "int                 0      -      0     # 3",
    "11": "jntr                15     0      0     ",
    "12": "int                 0      -      0     # 821",
    "13": "free                0      0      0     ",
    "14": "jmp                 17     0      0     ",
    "15": "int                 0      -      0     # 0",
    "16": "free                0      0      0     ",
    "17": "ret                 -1     0      -     "
  },
  "access": []
}]
if 1 then
	select 123;
elsif 2 then
	select 321;
elsif 3 then
	select 821;
else
	select 0;
end;
# test: if if
explain begin;
	declare x int := 0;
	if 1 then
		if 2 then
			x:= 2;
		end;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "int                 0      -      0     # 1",
    "05": "jntr                11     0      0     ",
    "06": "int                 0      -      0     # 2",
    "07": "jntr                11     0      0     ",
    "08": "int                 0      -      0     # 2",
    "09": "var_set             0      0      0     ",
    "10": "free                0      0      0     ",
    "11": "var                 0      0      0     ",
    "12": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare x int := 0;
	if 1 then
		if 2 then
			x:= 2;
		end;
	end;
	select x;
end;
[2]
# test: if if else
explain begin
	declare x int := 0;
	if 1 then
		if 0 then
			x:= 2;
		else
			x := 3;
		end;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "int                 0      -      0     # 1",
    "05": "jntr                15     0      0     ",
    "06": "int                 0      -      0     # 0",
    "07": "jntr                12     0      0     ",
    "08": "int                 0      -      0     # 2",
    "09": "var_set             0      0      0     ",
    "10": "free                0      0      0     ",
    "11": "jmp                 15     0      0     ",
    "12": "int                 0      -      0     # 3",
    "13": "var_set             0      0      0     ",
    "14": "free                0      0      0     ",
    "15": "var                 0      0      0     ",
    "16": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare x int := 0;
	if 1 then
		if 0 then
			x:= 2;
		else
			x := 3;
		end;
	end;
	select x;
end;
[3]
# test: if if else else
explain begin
	declare x int := 0;
	if 1 then
		if 0 then
			x:= 2;
		else
			x := 3;
		end;
	else
		x:= 4;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "int                 0      -      0     # 1",
    "05": "jntr                16     0      0     ",
    "06": "int                 0      -      0     # 0",
    "07": "jntr                12     0      0     ",
    "08": "int                 0      -      0     # 2",
    "09": "var_set             0      0      0     ",
    "10": "free                0      0      0     ",
    "11": "jmp                 15     0      0     ",
    "12": "int                 0      -      0     # 3",
    "13": "var_set             0      0      0     ",
    "14": "free                0      0      0     ",
    "15": "jmp                 19     0      0     ",
    "16": "int                 0      -      0     # 4",
    "17": "var_set             0      0      0     ",
    "18": "free                0      0      0     ",
    "19": "var                 0      0      0     ",
    "20": "ret                 0      0      -     "
  },
  "access": []
}]
begin
	declare x int := 0;
	if 1 then
		if 0 then
			x:= 2;
		else
			x := 3;
		end;
	else
		x:= 4;
	end;
	select x;
end;
[3]
begin
	declare x int := 0;
	if 0 then
		if 0 then
			x:= 2;
		else
			x := 3;
		end;
	else
		x:= 4;
	end;
	select x;
end;
[4]
begin
	declare x int := 0;
	if 0 then
		if 0 then
			x:= 2;
		end;
	else
		x:= 4;
	end;
	select x;
end;
[4]
# test: if insert
create table test (id int primary key);
explain begin
	if true then
		insert into test values (1);
		insert into test values (2);
	end;
end;
[{
  "main": {
    "00": "bool                0      1      0     ",
    "01": "jntr                6      0      0     ",
    "02": "set_ptr             1      -      0     ",
    "03": "send_shard          0      1      0     # public.test (insert)",
    "04": "set_ptr             1      -      0     ",
    "05": "send_shard          0      1      0     # public.test (insert)",
    "06": "close               0      0      0     ",
    "07": "ret                 -1     0      -     "
  },
  "pushdown": {
    "00": "insert              -      0      0     # public.test",
    "01": "ret                 -1     0      -     ",
    "02": "insert              -      0      0     # public.test",
    "03": "ret                 -1     0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	if true then
		insert into test values (1);
		insert into test values (2);
	end;
end;
drop table test;
# test: if insert if insert select
create table test (id int primary key);
explain begin
	if true then
		insert into test values (1);
	end;
	if false then
		insert into test values (2);
	end;
	select * from test;
end;
[{
  "main": {
    "00": "bool                0      1      0     ",
    "01": "jntr                4      0      0     ",
    "02": "set_ptr             1      -      0     ",
    "03": "send_shard          0      1      0     # public.test (insert)",
    "04": "bool                0      0      0     ",
    "05": "jntr                8      0      0     ",
    "06": "set_ptr             1      -      0     ",
    "07": "send_shard          0      1      0     # public.test (insert)",
    "08": "send_all            0      0      68    # public.test (select, closing)",
    "09": "recv                1      0      -1    ",
    "10": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "insert              -      0      0     # public.test",
    "01": "ret                 -1     0      -     ",
    "02": "insert              -      0      0     # public.test",
    "03": "ret                 -1     0      -     ",
    "04": "set                 0      1      0     ",
    "05": "table_open_part     1      48     10    # public.test (primary)",
    "06": "table_readi32       2      1      0     ",
    "07": "push                2      0      0     ",
    "08": "set_add             0      0      0     ",
    "09": "table_next          1      6      0     ",
    "10": "free                1      0      0     ",
    "11": "ret                 0      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	if true then
		insert into test values (1);
	end;
	if false then
		insert into test values (2);
	end;
	select * from test;
end;
[1]
delete from test;
begin
	if false then
		insert into test values (1);
	end;
	if true then
		insert into test values (2);
	end;
	select * from test;
end;
[2]
drop table test;
# test: if insert else insert
create table test (id int primary key);
explain begin
	if true then
		insert into test values (1);
	else
		insert into test values (2);
	end;
	select * from test;
end;
[{
  "main": {
    "00": "bool                0      1      0     ",
    "01": "jntr                5      0      0     ",
    "02": "set_ptr             1      -      0     ",
    "03": "send_shard          0      1      0     # public.test (insert)",
    "04": "jmp                 7      0      0     ",
    "05": "set_ptr             1      -      0     ",
    "06": "send_shard          0      1      0     # public.test (insert)",
    "07": "send_all            0      0      68    # public.test (select, closing)",
    "08": "recv                1      0      -1    ",
    "09": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "insert              -      0      0     # public.test",
    "01": "ret                 -1     0      -     ",
    "02": "insert              -      0      0     # public.test",
    "03": "ret                 -1     0      -     ",
    "04": "set                 0      1      0     ",
    "05": "table_open_part     1      48     10    # public.test (primary)",
    "06": "table_readi32       2      1      0     ",
    "07": "push                2      0      0     ",
    "08": "set_add             0      0      0     ",
    "09": "table_next          1      6      0     ",
    "10": "free                1      0      0     ",
    "11": "ret                 0      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	if true then
		insert into test values (1);
	else
		insert into test values (2);
	end;
	select * from test;
end;
[1]
begin
	if false then
		insert into test values (1);
	else
		insert into test values (2);
	end;
	select * from test;
end;
[1, 2]
drop table test;
# test: if insert elsif insert else insert
create table test (id int primary key);
explain begin
	declare x int := 0;
	if x = 0 then
		insert into test values (0);
	elsif x = 1 then
		insert into test values (1);
	else
		insert into test values (2);
	end;
	select * from test;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "var                 0      0      0     ",
    "05": "int                 1      -      0     # 0",
    "06": "equii               2      0      1     ",
    "07": "jntr                11     2      0     ",
    "08": "set_ptr             1      -      0     ",
    "09": "send_shard          0      1      0     # public.test (insert)",
    "10": "jmp                 20     0      0     ",
    "11": "var                 0      0      0     ",
    "12": "int                 1      -      0     # 1",
    "13": "equii               2      0      1     ",
    "14": "jntr                18     2      0     ",
    "15": "set_ptr             1      -      0     ",
    "16": "send_shard          0      1      0     # public.test (insert)",
    "17": "jmp                 20     0      0     ",
    "18": "set_ptr             1      -      0     ",
    "19": "send_shard          0      1      0     # public.test (insert)",
    "20": "send_all            0      0      92    # public.test (select, closing)",
    "21": "recv                1      0      -1    ",
    "22": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "insert              -      0      0     # public.test",
    "01": "ret                 -1     0      -     ",
    "02": "insert              -      0      0     # public.test",
    "03": "ret                 -1     0      -     ",
    "04": "insert              -      0      0     # public.test",
    "05": "ret                 -1     0      -     ",
    "06": "set                 0      1      0     ",
    "07": "table_open_part     1      72     12    # public.test (primary)",
    "08": "table_readi32       2      1      0     ",
    "09": "push                2      0      0     ",
    "10": "set_add             0      0      0     ",
    "11": "table_next          1      8      0     ",
    "12": "free                1      0      0     ",
    "13": "ret                 0      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	declare x int := 0;
	if x = 0 then
		insert into test values (0);
	elsif x = 1 then
		insert into test values (1);
	else
		insert into test values (2);
	end;
	select * from test;
end;
[0]
begin
	declare x int := 1;
	if x = 0 then
		insert into test values (0);
	elsif x = 1 then
		insert into test values (1);
	else
		insert into test values (2);
	end;
	select * from test;
end;
[0, 1]
begin
	declare x int := 2;
	if x = 0 then
		insert into test values (0);
	elsif x = 1 then
		insert into test values (1);
	else
		insert into test values (2);
	end;
	select * from test;
end;
[0, 1, 2]
drop table test;
# test: if insert returning
create table test (id int primary key);
explain begin
	declare x int := 0;
	if true then
		insert into test values (123) returning * into x;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      1      0     ",
    "05": "jntr                11     0      0     ",
    "06": "set_ptr             1      -      0     ",
    "07": "send_shard          0      1      0     # public.test (insert)",
    "08": "recv                1      0      -1    ",
    "09": "var_set             0      0      1     ",
    "10": "free                1      0      0     ",
    "11": "close               0      0      0     ",
    "12": "var                 0      0      0     ",
    "13": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 0      1      0     ",
    "01": "table_prepare       1      -      0     # public.test",
    "02": "jmp                 9      0      0     ",
    "03": "string              2      0      0     # unique key constraint violation",
    "04": "push                2      0      0     ",
    "05": "call                2      -      1     # public.error()",
    "06": "table_readi32       2      1      0     ",
    "07": "push                2      0      0     ",
    "08": "set_add             0      0      0     ",
    "09": "upsert              1      3      6     ",
    "10": "free                1      0      0     ",
    "11": "ret                 0      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	declare x int := 0;
	if true then;
		insert into test values (123) returning * into x;
	end;
	select x;
end;
[123]
drop table test;
# test: if insert var
create table test (id int primary key);
explain begin
	declare x int := 0;
	if true then
		insert into test values (x);
	end;
	select * from test;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      1      0     ",
    "05": "jntr                9      0      0     ",
    "06": "push_var            0      0      1     ",
    "07": "set_ptr             1      -      0     ",
    "08": "send_shard          0      1      1     # public.test (insert)",
    "09": "send_all            0      0      44    # public.test (select, closing)",
    "10": "recv                1      0      -1    ",
    "11": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "insert              -      0      0     # public.test",
    "01": "ret                 -1     0      -     ",
    "02": "set                 0      1      0     ",
    "03": "table_open_part     1      24     8     # public.test (primary)",
    "04": "table_readi32       2      1      0     ",
    "05": "push                2      0      0     ",
    "06": "set_add             0      0      0     ",
    "07": "table_next          1      4      0     ",
    "08": "free                1      0      0     ",
    "09": "ret                 0      0      -     "
  },
  "access": [["public.test", "rw"]]
}]
begin
	declare x int := 0;
	if true then
		insert into test values (x);
	end;
	select * from test;
end;
[0]
drop table test;
# test: if select
create table test (id int primary key);
insert into test values (123);
explain begin
	declare x int := 0;
	if true then
		select * into x from test;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      1      0     ",
    "05": "jntr                10     0      0     ",
    "06": "send_all            0      0      20    # public.test (select)",
    "07": "recv                1      0      -1    ",
    "08": "var_set             0      0      1     ",
    "09": "free                1      0      0     ",
    "10": "close               0      0      0     ",
    "11": "var                 0      0      0     ",
    "12": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 0      1      0     ",
    "01": "table_open_part     1      0      6     # public.test (primary)",
    "02": "table_readi32       2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_add             0      0      0     ",
    "05": "table_next          1      2      0     ",
    "06": "free                1      0      0     ",
    "07": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare x int := 0;
	if true then
		select * into x from test;
	end;
	select x;
end;
[123]
explain begin
	declare x int := 0;
	if true then
		select count(*) into x from test;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      1      0     ",
    "05": "jntr                18     0      0     ",
    "06": "send_all            0      0      25    # public.test (select)",
    "07": "recv_aggs           1      0      21    ",
    "08": "set                 2      1      0     ",
    "09": "store_open          3      1      14    ",
    "10": "count               4      3      0     ",
    "11": "push                4      0      0     ",
    "12": "set_add             2      0      0     ",
    "13": "store_next          3      10     0     ",
    "14": "free                3      0      0     ",
    "15": "free                1      0      0     ",
    "16": "var_set             0      0      2     ",
    "17": "free                2      0      0     ",
    "18": "close               0      0      0     ",
    "19": "var                 0      0      0     ",
    "20": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set_ordered         0      1      1     ",
    "01": "table_open_part     1      1      9     # public.test (primary)",
    "02": "bool                2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_get             2      0      0     ",
    "05": "int                 3      -      0     # 1",
    "06": "push                3      0      0     ",
    "07": "set_agg             0      2      21    ",
    "08": "table_next          1      2      0     ",
    "09": "free                1      0      0     ",
    "10": "bool                1      1      0     ",
    "11": "push                1      0      0     ",
    "12": "set_get             1      0      0     ",
    "13": "null                2      0      0     ",
    "14": "push                2      0      0     ",
    "15": "set_agg             0      1      21    ",
    "16": "set_sort            0      0      0     ",
    "17": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare x int := 0;
	if true then
		select count(*) into x from test;
	end;
	select x;
end;
[1]
explain begin
	declare x int := 0;
	if false then
	else
		select count(*) into x from test;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      0      0     ",
    "05": "jntr                7      0      0     ",
    "06": "jmp                 19     0      0     ",
    "07": "send_all            0      0      25    # public.test (select)",
    "08": "recv_aggs           1      0      21    ",
    "09": "set                 2      1      0     ",
    "10": "store_open          3      1      15    ",
    "11": "count               4      3      0     ",
    "12": "push                4      0      0     ",
    "13": "set_add             2      0      0     ",
    "14": "store_next          3      11     0     ",
    "15": "free                3      0      0     ",
    "16": "free                1      0      0     ",
    "17": "var_set             0      0      2     ",
    "18": "free                2      0      0     ",
    "19": "close               0      0      0     ",
    "20": "var                 0      0      0     ",
    "21": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set_ordered         0      1      1     ",
    "01": "table_open_part     1      1      9     # public.test (primary)",
    "02": "bool                2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_get             2      0      0     ",
    "05": "int                 3      -      0     # 1",
    "06": "push                3      0      0     ",
    "07": "set_agg             0      2      21    ",
    "08": "table_next          1      2      0     ",
    "09": "free                1      0      0     ",
    "10": "bool                1      1      0     ",
    "11": "push                1      0      0     ",
    "12": "set_get             1      0      0     ",
    "13": "null                2      0      0     ",
    "14": "push                2      0      0     ",
    "15": "set_agg             0      1      21    ",
    "16": "set_sort            0      0      0     ",
    "17": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare x int := 0;
	if false then
	else
		select count(*) into x from test;
	end;
	select x;
end;
[1]
explain begin
	declare x int := 0;
	if false then
	else
		select count(*) into x from test;
	end;
	select 1;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      0      0     ",
    "05": "jntr                7      0      0     ",
    "06": "jmp                 19     0      0     ",
    "07": "send_all            0      0      25    # public.test (select)",
    "08": "recv_aggs           1      0      21    ",
    "09": "set                 2      1      0     ",
    "10": "store_open          3      1      15    ",
    "11": "count               4      3      0     ",
    "12": "push                4      0      0     ",
    "13": "set_add             2      0      0     ",
    "14": "store_next          3      11     0     ",
    "15": "free                3      0      0     ",
    "16": "free                1      0      0     ",
    "17": "var_set             0      0      2     ",
    "18": "free                2      0      0     ",
    "19": "close               0      0      0     ",
    "20": "int                 0      -      0     # 1",
    "21": "var                 1      0      0     ",
    "22": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "set_ordered         0      1      1     ",
    "01": "table_open_part     1      1      9     # public.test (primary)",
    "02": "bool                2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_get             2      0      0     ",
    "05": "int                 3      -      0     # 1",
    "06": "push                3      0      0     ",
    "07": "set_agg             0      2      21    ",
    "08": "table_next          1      2      0     ",
    "09": "free                1      0      0     ",
    "10": "bool                1      1      0     ",
    "11": "push                1      0      0     ",
    "12": "set_get             1      0      0     ",
    "13": "null                2      0      0     ",
    "14": "push                2      0      0     ",
    "15": "set_agg             0      1      21    ",
    "16": "set_sort            0      0      0     ",
    "17": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare x int := 0;
	if false then
	else
		select count(*) into x from test;
	end;
	select 1;
	select x;
end;
[1]
explain begin
	declare x int := 0;
	if false then
	else
		select count(*) into x from test;
	end;
	select * from test;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      0      0     ",
    "05": "jntr                7      0      0     ",
    "06": "jmp                 19     0      0     ",
    "07": "send_all            0      0      25    # public.test (select)",
    "08": "recv_aggs           1      0      21    ",
    "09": "set                 2      1      0     ",
    "10": "store_open          3      1      15    ",
    "11": "count               4      3      0     ",
    "12": "push                4      0      0     ",
    "13": "set_add             2      0      0     ",
    "14": "store_next          3      11     0     ",
    "15": "free                3      0      0     ",
    "16": "free                1      0      0     ",
    "17": "var_set             0      0      2     ",
    "18": "free                2      0      0     ",
    "19": "send_all            0      0      69    # public.test (select, closing)",
    "20": "var                 1      0      0     ",
    "21": "ret                 1      0      -     "
  },
  "pushdown": {
    "00": "set_ordered         0      1      1     ",
    "01": "table_open_part     1      1      9     # public.test (primary)",
    "02": "bool                2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_get             2      0      0     ",
    "05": "int                 3      -      0     # 1",
    "06": "push                3      0      0     ",
    "07": "set_agg             0      2      21    ",
    "08": "table_next          1      2      0     ",
    "09": "free                1      0      0     ",
    "10": "bool                1      1      0     ",
    "11": "push                1      0      0     ",
    "12": "set_get             1      0      0     ",
    "13": "null                2      0      0     ",
    "14": "push                2      0      0     ",
    "15": "set_agg             0      1      21    ",
    "16": "set_sort            0      0      0     ",
    "17": "ret                 0      0      -     ",
    "18": "set                 0      1      0     ",
    "19": "table_open_part     1      49     24    # public.test (primary)",
    "20": "table_readi32       2      1      0     ",
    "21": "push                2      0      0     ",
    "22": "set_add             0      0      0     ",
    "23": "table_next          1      20     0     ",
    "24": "free                1      0      0     ",
    "25": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare x int := 0;
	if false then
	else
		select count(*) into x from test;
	end;
	select * from test;
	select x;
end;
[1]
explain begin
	declare x int := 0;
	if true then
		if false then
			select * into x from test;
		end;
	end;
	select x;
end;
[{
  "main": {
    "00": "push_nulls          1      0      0     ",
    "01": "int                 0      -      0     # 0",
    "02": "var_set             0      0      0     ",
    "03": "free                0      0      0     ",
    "04": "bool                0      1      0     ",
    "05": "jntr                12     0      0     ",
    "06": "bool                0      0      0     ",
    "07": "jntr                12     0      0     ",
    "08": "send_all            0      0      20    # public.test (select)",
    "09": "recv                1      0      -1    ",
    "10": "var_set             0      0      1     ",
    "11": "free                1      0      0     ",
    "12": "close               0      0      0     ",
    "13": "var                 0      0      0     ",
    "14": "ret                 0      0      -     "
  },
  "pushdown": {
    "00": "set                 0      1      0     ",
    "01": "table_open_part     1      0      6     # public.test (primary)",
    "02": "table_readi32       2      1      0     ",
    "03": "push                2      0      0     ",
    "04": "set_add             0      0      0     ",
    "05": "table_next          1      2      0     ",
    "06": "free                1      0      0     ",
    "07": "ret                 0      0      -     "
  },
  "access": [["public.test", "ro"]]
}]
begin
	declare x int := 0;
	if true then
		if false then
			select * into x from test;
		end;
	end;
	select x;
end;
[0]
drop table test;
# test: if utility
if true then show all; end;
{"msg": "if true then ❰show❱ ⟵ utility statement cannot be used here"}
# test: cte if
with a as (if true then end) select 1;
{"msg": "with a as (❰if❱ ⟵ statement cannot be used inside CTE"}
with a as (select 1) if true then end;
{"msg": "with a as (select 1) ❰if❱ ⟵ statement cannot be used inside CTE"}
disconnect S0;
close E0;
