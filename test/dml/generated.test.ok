open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: generated column parsing
create table test (id int primary key, data int always
{"msg": "CREATE TABLE name (name type <,)> expected"}
create table test (id int primary key, data int generated
{"msg": "GENERATED <ALWAYS> expected"}
create table test (id int primary key, data int generated 1
{"msg": "GENERATED <ALWAYS> expected"}
create table test (id int primary key, data int generated always
{"msg": "GENERATED ALWAYS <AS> expected"}
create table test (id int primary key, data int generated always 1
{"msg": "GENERATED ALWAYS <AS> expected"}
create table test (id int primary key, data int generated always as
{"msg": "AS <(> expected"}
create table test (id int primary key, data int as
{"msg": "AS <(> expected"}
create table test (id int primary key, data int as (
{"msg": "bad expression"}
create table test (id int primary key, data int as ()
{"msg": "bad expression"}
create table test (id int primary key, data int as (1)
{"msg": "CREATE TABLE name (name type <,)> expected"}
create table test (id int primary key, data int as (1) 1
{"msg": "CREATE TABLE name (name type <,)> expected"}
create table test (id int primary key, data int as (1) stored
{"msg": "CREATE TABLE name (name type <,)> expected"}
# test: insert (expr)
create table test (id int primary key, data int as (1 + 1) stored)
select system.tables()['public.test'].columns[1]
[{
  "name": "data",
  "type": "int",
  "constraint": {
    "not_null": false,
    "generated": 3,
    "modulo": 9223372036854775807,
    "aggregate": 0,
    "as": "1 + 1",
    "default": null
  }
}]
explain insert into test values (0, null)
[{
  "bytecode": {
    "coordinator": {
      "00": "data                0      0      0     ",
      "01": "cursor_open_expr    1      0      3     ",
      "02": "jmp                 8      0      0     ",
      "03": "int                 1      -      0     # 1",
      "04": "int                 2      -      0     # 1",
      "05": "add                 3      1      2     ",
      "06": "push                3      0      0     ",
      "07": "cursor_next         1      3      0     ",
      "08": "cursor_close        1      0      0     ",
      "09": "int                 0      -      0     # 1",
      "10": "push                0      0      0     ",
      "11": "send_generated      0      0      -     # public.test",
      "12": "recv                0      0      0     ",
      "13": "null                0      0      0     ",
      "14": "cte_set             0      0      0     ",
      "15": "ret                 0      0      0     "
    },
    "node": {
      "00": "insert              -      0      0     # public.test",
      "01": "ret                 0      0      0     "
    }
  }
}]
insert into test values (0, null)
insert into test values (1, null), (2, 42), (3, 43)
select * from test
[[0, 2], [1, 2], [2, 2], [3, 2]]
# test: insert column list (expr)
insert into test (id) values (5), (6)
select * from test
[[0, 2], [1, 2], [2, 2], [3, 2], [5, 2], [6, 2]]
drop table test
# test: insert (expr, reuse column)
create table test (id int primary key, data int default 0 as (data + 1) stored not null)
insert into test values (0, null)
{"msg": "column <data> value cannot be NULL"}
insert into test values (0, 42)
select * from test
[[0, 43]]
# test: insert column list default (expr, reuse column)
insert into test values (1)
{"msg": "unexpected token"}
insert into test (id) values (1), (2)
select * from test
[[0, 43], [1, 1], [2, 1]]
# test: insert column list (expr, reuse column)
insert into test (id, data) values (3, 777), (4, 777)
insert into test (id, data) values (5, null)
{"msg": "column <data> value cannot be NULL"}
select * from test
[[0, 43], [1, 1], [2, 1], [3, 778], [4, 778]]
drop table test
# test: insert (expr, use other column)
create table test (id int primary key, data int as (id * 2) stored)
insert into test values (2, 0), (4, 0)
select * from test
[[2, 4], [4, 8]]
drop table test
# test: insert (expr, use other generated column)
create table test (id int primary key, data int as (777) stored, data2 int as (data))
insert into test values (1, 0, 0), (2, 0, 0)
# test: insert default (expr, use other generated column)
insert into test (id) values (3), (4)
select * from test
[[1, 777, 0], [2, 777, 0], [3, 777, null], [4, 777, null]]
drop table test
# test: insert (expr, type mismatch)
create table test (id int primary key, data int as ("string") stored)
insert into test values (0, 0)
{"msg": "column data: does not match data type int"}
select * from test
[]
drop table test
# test: insert returning * (expr)
create table test (id int primary key, data int as (1 + 1) stored)
insert into test values (0, null) returning *
[[0, 2]]
insert into test values (1, null) returning *
[[1, 2]]
drop table test
# test: upsert (expr)
create table test (id int primary key, data int default 0 as (data + 1) stored not null)
insert into test values (0, 0)
explain insert into test (id) values (0) on conflict do update set data = data + 1
[{
  "bytecode": {
    "coordinator": {
      "00": "data                0      0      0     ",
      "01": "cursor_open_expr    1      0      3     ",
      "02": "jmp                 8      0      0     ",
      "03": "cursor_idx          1      1      1     ",
      "04": "int                 2      -      0     # 1",
      "05": "add                 3      1      2     ",
      "06": "push                3      0      0     ",
      "07": "cursor_next         1      3      0     ",
      "08": "cursor_close        1      0      0     ",
      "09": "int                 0      -      0     # 1",
      "10": "push                0      0      0     ",
      "11": "send_generated      0      0      -     # public.test",
      "12": "recv                0      0      0     ",
      "13": "null                0      0      0     ",
      "14": "cte_set             0      0      0     ",
      "15": "ret                 0      0      0     "
    },
    "node": {
      "00": "cursor_prepare      0      -      0     # public.test",
      "01": "jmp                 13     0      0     ",
      "02": "cursor_read         0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "null                0      0      0     ",
      "05": "push                0      0      0     ",
      "06": "cursor_idx          0      0      1     ",
      "07": "int                 1      -      0     # 1",
      "08": "add                 2      0      1     ",
      "09": "push                2      0      0     ",
      "10": "assign              0      3      1     ",
      "11": "push                0      0      0     ",
      "12": "update              0      0      0     ",
      "13": "upsert              0      2      -1    ",
      "14": "cursor_close        0      0      0     ",
      "15": "ret                 0      0      0     "
    }
  }
}]
insert into test (id) values (0) on conflict do update set data = data + 1
select * from test
[[0, 2]]
# test: upsert returning * (expr)
insert into test (id) values (0) on conflict do update set data = data + 1 returning *
[[0, 3]]
select * from test
[[0, 3]]
drop table test
# test: insert generated key (expr)
create table test (id int primary key as (777) stored)
insert into test values (null)
{"msg": "column <id> value cannot be NULL"}
insert into test values (0)
select * from test
[[777]]
drop table test
# test: insert generated key (obj path)
create table test (id int primary key as (obj.id) stored, obj object)
insert into test values (0, {"id": 48})
select * from test
[[48, {
  "id": 48
}]]
drop table test
# test: insert (subquery)
create table test (id int primary key as (select 123) stored)
insert into test values (0)
{"msg": "unexpected subquery"}
drop table test
disconnect S0
close E0
