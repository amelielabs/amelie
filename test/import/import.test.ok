open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
# test: POST / (text/plain)
connect E0 S0 localhost:3485
import text/plain select 1
[1]
# test: POST / (application/sql)
import application/sql select 1
[1]
# test: POST / (application/json) unsupported
import application/json [1]
{"msg": "unsupported URI path"}
disconnect S0
# test: POST /invalid
connect E0 S0 http://localhost:3485/abc
import text/plain select 1
{"msg": "unsupported API operation"}
disconnect S0
# test: POST /schema/table (text/plain)
connect E0 S0 http://localhost:3485/abc/cba/abc
import text/plain select 1
{"msg": "unsupported API operation"}
disconnect S0
# test: POST /schema/table (text/plain) not exists
connect E0 S0 http://localhost:3485/public/test
import text/plain select 1
{"msg": "unsupported API operation"}
disconnect S0
connect E0 S0 http://localhost:3485
create table test (id int primary key, a int, b int)
create table test2 (id int primary key, a int as (id * 2) stored)
create table test3 (id int primary key, a int as (a + 1) resolved)
create table test4 (id int primary key serial, a int default 777)
create table test5 (id int primary key serial, data json not null)
create table test6 (id int primary key as (data.id::int) stored, data json not null)
disconnect S0
# test: POST /schema/table (text/plain) unsupported
connect E0 S0 http://localhost:3485/public/test
import text/plain select 1
{"msg": "unsupported API operation"}
disconnect S0
# test: POST /schema/table (text/csv)
connect E0 S0 http://localhost:3485/public/test
import text/csv 0,0,0
import text/csv 1,0,0
import text/csv 2,0,0
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0]]
disconnect Sx
# test: POST /schema/table (text/csv) column list
connect E0 S0 http://localhost:3485/public/test?columns=id
import text/csv 3
import text/csv 4
import text/csv 5
disconnect S0
connect E0 S0 http://localhost:3485/public/test?columns=id,a
import text/csv 6,0
disconnect S0
connect E0 S0 http://localhost:3485/public/test?columns=id,a,b
import text/csv 7,0,0
disconnect S0
# test: POST /schema/table (text/csv) column list (duplicate)
connect E0 S0 http://localhost:3485/public/test?columns=id,a,a
import text/csv 8,0,0
{"msg": "column list must be ordered"}
disconnect S0
# test: POST /schema/table (text/csv) column list (unordered)
connect E0 S0 http://localhost:3485/public/test?columns=id,b,a
import text/csv 8,0,0
{"msg": "column list must be ordered"}
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, null, null], [4, null, null], [5, null, null], [6, 0, null], [7, 0, 0]]
disconnect Sx
# test: POST /schema/table (text/csv) (empty column list)
connect E0 S0 http://localhost:3485/public/test4?columns=
import text/csv 
import text/csv     
disconnect S0
# test: POST /schema/table (text/csv) (generated columns)
connect E0 S0 http://localhost:3485/public/test2
import text/csv 0,null
import text/csv 1,null
import text/csv 2,null
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test2
[[0, 0], [1, 2], [2, 4]]
disconnect Sx
# test: POST /schema/table (text/csv) (resolved columns)
connect E0 S0 http://localhost:3485/public/test3
import text/csv 0,0
import text/csv 0,0
import text/csv 0,0
import text/csv 1,0
import text/csv 1,0
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test3
[[0, 2], [1, 1]]
disconnect Sx
# test: POST /schema/table (application/jsonl) (array)
connect E0 S0 http://localhost:3485/public/test
import application/jsonl [9,0,0] [10, null, 123] [11, null, null]
import application/jsonl [12,
{"msg": "[12,\n ⟵ 'int' expected for column 'a'"}
import application/jsonl [12,0,
{"msg": "[12,0,\n ⟵ 'int' expected for column 'b'"}
import application/jsonl [12,0]
{"msg": "[12,0❰]❱ ⟵ , expected"}
import application/jsonl [12,]
{"msg": "[12,❰]❱ ⟵ 'int' expected for column 'a'"}
import application/jsonl [12,null]
{"msg": "[12,null❰]❱ ⟵ , expected"}
import application/jsonl [12,null,]
{"msg": "[12,null,❰]❱ ⟵ 'int' expected for column 'b'"}
import application/jsonl [12,null,'string']
{"msg": "[12,null,❰'string'❱ ⟵ 'int' expected for column 'b'"}
import application/jsonl [[12,null,0]]
{"msg": "[❰[❱ ⟵ 'int' expected for column 'id'"}
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, null, null], [4, null, null], [5, null, null], [6, 0, null], [7, 0, 0], [9, 0, 0], [10, null, 123], [11, null, null]]
disconnect Sx
# test: POST /schema/table (application/jsonl) (array, column list)
connect E0 S0 http://localhost:3485/public/test?columns=id
import application/jsonl [13]
disconnect S0
connect E0 S0 http://localhost:3485/public/test?columns=id,a
import application/jsonl [14,null]
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, null, null], [4, null, null], [5, null, null], [6, 0, null], [7, 0, 0], [9, 0, 0], [10, null, 123], [11, null, null], [13, null, null], [14, null, null]]
disconnect Sx
# test: POST /schema/table (application/jsonl) (array, empty column list)
connect E0 S0 http://localhost:3485/public/test4?columns=
import application/jsonl []
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test4
[[0, 777]]
disconnect Sx
# test: POST /schema/table (application/json) (array)
connect E0 S0 http://localhost:3485/public/test
import application/json [[15,0,0]]
import application/json [[16,0,0]
{"msg": "[[16,0,0]\n ⟵ ] expected"}
import application/json [[16,0,0],
{"msg": "[[16,0,0],\n ⟵ json object or array expected"}
import application/json [[16,0,0],]
{"msg": "[[16,0,0],❰]❱ ⟵ json object or array expected"}
import application/json [[16,0,0], [16,0,7]]
{"msg": "index 'primary': unique key constraint violation"}
import application/json [[16,0,0], [17,0,7]] junk
{"msg": "[[16,0,0], [17,0,7]] ❰junk❱ ⟵ eof expected"}
import application/json 
import application/json []
{"msg": "[❰]❱ ⟵ json object or array expected"}
import application/json {}
{"msg": "❰{❱ ⟵ [ expected"}
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, null, null], [4, null, null], [5, null, null], [6, 0, null], [7, 0, 0], [9, 0, 0], [10, null, 123], [11, null, null], [13, null, null], [14, null, null], [15, 0, 0]]
disconnect Sx
# test: POST /schema/table (application/json) (array, column list)
connect E0 S0 http://localhost:3485/public/test?columns=id
import application/json [[18,0]
{"msg": "[[18❰,❱ ⟵ ] expected"}
import application/json [[18,
{"msg": "[[18❰,❱ ⟵ ] expected"}
import application/json [[]
{"msg": "[[❰]❱ ⟵ 'int' expected for column 'id'"}
import application/json [[18], [19]]
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, null, null], [4, null, null], [5, null, null], [6, 0, null], [7, 0, 0], [9, 0, 0], [10, null, 123], [11, null, null], [13, null, null], [14, null, null], [15, 0, 0], [18, null, null], [19, null, null]]
disconnect Sx
# test: POST /schema/table (application/json) (array, empty column list)
connect E0 S0 http://localhost:3485/public/test4?columns=
import application/json [[], [], []]
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test4
[[0, 777], [1, 777], [2, 777], [3, 777]]
disconnect Sx
# test: POST /schema/table (application/jsonl) (obj, empty column list)
connect E0 S0 http://localhost:3485/public/test4?columns=
import application/jsonl {}
disconnect S0
connect E0 Sx http://localhost:3485/
select * from test4
[[0, 777], [1, 777], [2, 777], [3, 777], [4, 777]]
disconnect Sx
# test: POST /schema/table (application/jsonl) (obj, one column)
connect E0 S0 http://localhost:3485/public/test5?columns=data
import application/jsonl {"id": 1} {"id": 2} {"id": 3}
disconnect S0
connect E0 Sx http://localhost:3485/
select * format 'json' from test5
[[0, {"id": 1}], [1, {"id": 2}], [2, {"id": 3}]]
disconnect Sx
# test: POST /schema/table (application/jsonl) (obj, column list)
connect E0 S0 http://localhost:3485/public/test5?columns=id,data
import application/jsonl {"id": 1} {"id": 2} {"id": 3}
{"msg": "❰{❱ ⟵ JSON column list must have zero or one value"}
disconnect S0
# test: POST /schema/table (application/jsonl) (obj)
connect E0 S0 http://localhost:3485/public/test
import application/jsonl {"id": 20}
import application/jsonl {"id": 20, "a"
{"msg": "{\"id\": 20, \"a\"\n ⟵ : expected"}
import application/jsonl {"id": 20,
{"msg": "{\"id\": 20,\n ⟵ } expected"}
import application/jsonl {"id": 20, 1
{"msg": "{\"id\": 20, ❰1❱ ⟵ } expected"}
import application/jsonl {"id": 20, "a"
{"msg": "{\"id\": 20, \"a\"\n ⟵ : expected"}
import application/jsonl {"id": 20, "a":
{"msg": "{\"id\": 20, \"a\":\n ⟵ 'int' expected for column 'a'"}
import application/jsonl {"id": 20, "a": 0
{"msg": "{\"id\": 20, \"a\": 0\n ⟵ } expected"}
import application/jsonl {"id": 20, "a": 0,
{"msg": "{\"id\": 20, \"a\": 0,\n ⟵ } expected"}
import application/jsonl {"id": 20, "a": 0, "b"
{"msg": "{\"id\": 20, \"a\": 0, \"b\"\n ⟵ : expected"}
import application/jsonl {"id": 20, "a": 0, "b": 0}
{"msg": "index 'primary': unique key constraint violation"}
import application/jsonl {"id": 21, "a": 0, "b": 0}
import application/jsonl {"id": 22, "b": 0}
import application/jsonl {"id": 23}
import application/jsonl {"id": 22, "b": 0, "b": 1}
{"msg": "{\"id\": 22, \"b\": 0, ❰\"b\"❱ ⟵ column value is redefined"}
import application/jsonl {"id": 24} {"id": 25} {"id": 26}
disconnect S0
connect E0 Sx http://localhost:3485/
select * format 'json' from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, null, null], [4, null, null], [5, null, null], [6, 0, null], [7, 0, 0], [9, 0, 0], [10, null, 123], [11, null, null], [13, null, null], [14, null, null], [15, 0, 0], [18, null, null], [19, null, null], [20, null, null], [21, 0, 0], [22, null, 0], [23, null, null], [24, null, null], [25, null, null], [26, null, null]]
disconnect Sx
# test: POST /schema/table (application/json) (obj)
connect E0 S0 http://localhost:3485/public/test
import application/json [{"id": 27}, {"id": 28}]
disconnect S0
connect E0 Sx http://localhost:3485/
select * format 'json' from test
[[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, null, null], [4, null, null], [5, null, null], [6, 0, null], [7, 0, 0], [9, 0, 0], [10, null, 123], [11, null, null], [13, null, null], [14, null, null], [15, 0, 0], [18, null, null], [19, null, null], [20, null, null], [21, 0, 0], [22, null, 0], [23, null, null], [24, null, null], [25, null, null], [26, null, null], [27, null, null], [28, null, null]]
disconnect Sx
# test: POST /schema/table (application/json) (obj, one column)
connect E0 S0 http://localhost:3485/public/test5?columns=data
import application/json [{"id": 4}, {"id": 5}]
disconnect S0
connect E0 Sx http://localhost:3485/
select * format 'json' from test5
[[0, {"id": 1}], [1, {"id": 2}], [2, {"id": 3}], [3, {"id": 4}], [4, {"id": 5}]]
disconnect Sx
# test: POST /schema/table (application/json) (obj, one column, generated)
connect E0 S0 http://localhost:3485/public/test6?columns=data
import application/json [{"id": 1}, {"id": 2, "data": [1,2,3]}]
disconnect S0
connect E0 Sx http://localhost:3485/
select * format 'json' from test6
[[1, {"id": 1}], [2, {"id": 2, "data": [1, 2, 3]}]]
disconnect Sx
close E0
