#

open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "backends": 3, "repl_reconnect_ms": 10
connect E0 S0 127.0.0.1:3480

# test: primary by default
show repl

# test: backup replica
backup E1 "uri": "127.0.0.1:3480"
close E1

open E1 "uuid": "00000000-0000-0000-0000-000000000001", "listen": [{ "host": "127.0.0.1", "port": 3481 }]
connect E1 S1 127.0.0.1:3481
switch S1

show uuid
show repl

# test: start replica
start repl

# test: subscribe (using self id)
subscribe "00000000-0000-0000-0000-000000000001"

# test: subscribe
subscribe "00000000-0000-0000-0000-000000000000"
show repl
select system.state().read_only

# test: create replica
switch S0
show replicas

create replica "00000000-0000-0000-0000-000000000001" uri "127.0.0.1:3481"
show replicas

# test: start primary
start repl

# test: wait for primary connect
watch system.replica('00000000-0000-0000-0000-000000000001').connected::bool = true

# test: write
create table test (id int primary key)
insert into test values (1),(2),(3)

select system.state().lsn

# test: wait replica sync
watch system.replica('00000000-0000-0000-0000-000000000001').lsn = system.state().lsn

# test: stop replica
disconnect S1
close E1

# test: write (replica off)
insert into test values (4)
insert into test values (5)
insert into test values (6)

select system.state().lsn

# test: replica lag
show replicas

# test: replica disconnected
switch S0
watch system.replica('00000000-0000-0000-0000-000000000001').connected::bool = false

# test: restart replica
open E1 "uuid": "00000000-0000-0000-0000-000000000001", "listen": [{ "host": "127.0.0.1", "port": 3481 }]
connect E1 S1 127.0.0.1:3481

# test: wait for primary reconnect
switch S0
watch system.replica('00000000-0000-0000-0000-000000000001').connected::bool = true

# test: wait replica sync
watch system.replica('00000000-0000-0000-0000-000000000001').lsn = system.state().lsn
show replicas

# test: restart primary
disconnect S0
close E0

open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "backends": 3, "repl_reconnect_ms": 10
connect E0 S0 127.0.0.1:3480

# test: wait for primary reconnect
switch S0
watch system.replica('00000000-0000-0000-0000-000000000001').connected::bool = true

# test: write
insert into test values (7)
insert into test values (8)
insert into test values (9)

# test: wait replica sync
watch system.replica('00000000-0000-0000-0000-000000000001').lsn = system.state().lsn
show replicas

# test: ensure replica is read-only
switch S1

select system.state().read_only
select system.state().lsn
insert into test values (10)
select system.state().lsn

select system.state().psn
create table test2 (id int primary key)
select system.state().lsn
select system.state().psn

# test: replica read
select * from test
show repl
select system.state().lsn

# test: failover (unsubscribe, switch to primary)
show repl
unsubscribe
show repl

# test: drop replica
switch S0
drop replica "00000000-0000-0000-0000-000000000001"
show replicas

# test: subscribe to new primary
switch S0
subscribe "00000000-0000-0000-0000-000000000001"
show repl

# test: create replica
switch S1
create replica "00000000-0000-0000-0000-000000000000" uri "127.0.0.1:3480"

# test: wait for primary connect
watch system.replica('00000000-0000-0000-0000-000000000000').connected::bool = true
watch system.replica('00000000-0000-0000-0000-000000000000').lsn = system.state().lsn

# test: write
insert into test values (10)
insert into test values (11)
insert into test values (12)

# test: wait replica sync
watch system.replica('00000000-0000-0000-0000-000000000000').lsn = system.state().lsn
show replicas
select * from test

disconnect S1
close E1

disconnect S0
close E0
