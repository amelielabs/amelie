#

open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485

# test: create table statement parsing
create
create junk
create unique
create unique table
create table
create table "junk_name"
create table if
create table if not
create table if not exists
create table 1234
create table test(
create table test(0
create table test("123"
create table test(name
create table test(name junk_type
create table test(name int
create table test(name int,
create table test(name int,)
create table if not exists 1234
create table if not exists test(
create table if not exists test(0
create table if not exists test("123"
create table if not exists test(name
create table if not exists test(name junk_type
create table if not exists test(name int
create table test(name int) junk
create table test()

# test: column bool/boolean
create table test(id int primary key, a bool, b boolean)
select system.table('test').columns
drop table test

# test: column int8/i8
create table test(id int primary key, id2 int8, id3 i8)
select system.table('test').columns
drop table test

# test: column int16/i16
create table test(id int primary key, id2 int16, id3 i16)
select system.table('test').columns
drop table test

# test: column int/integer/int32/i32
create table test(id int primary key, id2 integer, id3 int32, id4 i32)
select system.table('test').columns
drop table test

# test: column int64/i64
create table test(id int64 primary key, id2 i64)
select system.table('test').columns
drop table test

# test: column float/f32
create table test(id int primary key, a float, b f32)
select system.table('test').columns
drop table test

# test: column double/f64
create table test(id int primary key, a double, b f64)
select system.table('test').columns
drop table test

# test: column text/string
create table test(id int primary key, a text, b string)
select system.table('test').columns
drop table test

# test: column json
create table test(id int primary key, a json, b json)
select system.table('test').columns
drop table test

# test: column timestamp
create table test(id int primary key, a timestamp)
select system.table('test').columns
drop table test

# test: column interval
create table test(id int primary key, a interval)
select system.table('test').columns
drop table test

# test: column date
create table test(id int primary key, a date)
select system.table('test').columns
drop table test

# test: column vector
create table test(id int primary key, a vector)
select system.table('test').columns
drop table test

# test: column uuid
create table test(id int primary key, a uuid)
select system.table('test').columns
drop table test

# test: column redefined
create table test(id int, id int)

# test: primary key is not defined
create table test(id int)

# test: primary key clause parsing
create table test(primary)
create table test(primary key(
create table test(primary key()
create table test(primary key())
create table test(primary key(abc))
create table test(id int, primary key())
create table test(id int, primary key(id, ))
create table test(primary key(id), id int)

# test: primary key is not found
create table test(id int, primary key(idd))

# test: primary key redefined
create table test(id int, primary key(id, id))
create table test(id int primary key, primary key(id))
create table if not exists test(id int primary key, primary key(id))
select system.table('test').columns
drop table test

# test: primary key redefined #2
create table test(id int primary key primary key)

# test: primary key ensure valid type
create table test(id json primary key)
create table test(id json, primary key(id))

## test: table already exists
create table test (id int primary key)
create table test (id int primary key)

# test: table create if not exists
create table test (id int primary key)
create table if not exists test (id int primary key)
select system.table('test').columns
drop table test
select system.table('test').columns

# test: schema default
create table test (id int primary key)
select system.table('test').schema
drop table test

# test: schema system
create table system.test (id int primary key)

# test: schema default explicit
create table public.test (id int primary key)
select system.table('test').schema
drop table public.test

# test: schema non-exists
create table test.test (id int primary key)
select system.table('test').schema

# test: schema set
create table test (id int primary key)
create schema test
create table test.test (id int primary key)
select system.table('test').schema
drop table test
drop table test.test
drop schema test

# test: unlogged
create unlogged table test (id int primary key)
select system.table('test').unlogged
drop table test

# test: constraint default
create table test (id int primary key, data int default 1)
select system.table('test').columns
drop table test

# test: constraint default with key
create table test (id int default 1 primary key)
select system.table('test').columns
drop table test

# test: constraint default with key #2
create table test (id int default 1, primary key(id))
select system.table('test').columns
drop table test

# test: constraint default expr validate
create table test (id int primary key, data int default 1 + 1)

# test: constraint default (type not supported)
create table test (id int primary key, data vector default 1)
create table test (id int primary key, data timestamp default 1)
create table test (id int primary key, data interval default 1)
create table test (id int primary key, data date default 1)
create table test (id int primary key, data uuid default '')

# test: constraint default (type validate)
create table test (id int primary key, data int default 'string')
create table test (id int primary key, data int default 3.4)
create table test (id int primary key, data string default 1)

# test: constraint default (json)
create table test (id int primary key, data json default {"id": 48, "data": [1,2,3]})
drop table test

# test: constraint not null with key
create table test (id int not null primary key)
select system.table('test').columns
drop table test

# test: constraint not null forced for keys
create table test (id int primary key, data int)
select system.table('test').columns
drop table test

# test: constraint not null forced for keys #2
create table test (id int, data int, primary key(id))
select system.table('test').columns
drop table test

# test: constraint not null
create table test (id int primary key, data int not)
create table test (id int primary key, data int not null)
select system.table('test').columns
insert into test values(1, 1)
insert into test values(2, null)
insert into test values(null, null)
drop table test

# test: constraint not null default
create table test (id int primary key, data int not null default 123)
select system.table('test').columns
insert into test values(1, 1)
insert into test values(2, null)
insert into test (id) values(3)
select * from test
drop table test

# test: constraint not null default (json)
create table test (id int primary key, data json default {"id": 48, "data": [1,2,3]})
insert into test values(1, [1,2,3])
select * from test
insert into test values(2, default)
select * from test
insert into test (id) values(3)
select * from test
drop table test

# test: constraint serial
create table test (id int primary key, data serial)
select system.table('test').columns
drop table test

# test: constraint serial key
create table test (id serial primary key)
select system.table('test').columns
drop table test

# test: constraint serial multiple columns
create table test (id serial primary key, data serial)
select system.table('test').columns
drop table test

# test: with parsing
create table test (id int primary key) with
create table test (id int primary key) with (
create table test (id int primary key) with (,
create table test (id int primary key) with (abc
create table test (id int primary key) with (abc = 10)
create table test (id int primary key) with (abc = "")

# test: with
create table test (id int primary key) with (type = "hash")

disconnect S0
close E0
