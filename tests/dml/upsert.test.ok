open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: on conflict parsing
create table test (id int primary key, data int)
insert into test values(1, 0) 123
{"msg": "insert into test values(1, 0) ❰123❱ ⟵ ; expected"}
insert into test values(1, 0) ON
{"msg": "insert into test values(1, 0) ON ⟵ CONFLICT expected"}
insert into test values(1, 0) ON 123
{"msg": "insert into test values(1, 0) ON ❰123❱ ⟵ CONFLICT expected"}
insert into test values(1, 0) on conflict
{"msg": "insert into test values(1, 0) on conflict ⟵ DO expected"}
insert into test values(1, 0) on conflict 123
{"msg": "insert into test values(1, 0) on conflict ❰123❱ ⟵ DO expected"}
insert into test values(1, 0) on conflict do
{"msg": "insert into test values(1, 0) on conflict do ⟵ 'NOTHING | ERROR | UPDATE | RESOLVE' expected"}
insert into test values(1, 0) on conflict do 123
{"msg": "insert into test values(1, 0) on conflict do ❰123❱ ⟵ 'NOTHING | ERROR | UPDATE | RESOLVE' expected"}
insert into test values(1, 0) on conflict do update
{"msg": "insert into test values(1, 0) on conflict do update ⟵ SET expected"}
insert into test values(1, 0) on conflict do update set
{"msg": "insert into test values(1, 0) on conflict do update set ⟵ column name expected"}
insert into test values(1, 0) on conflict do update set 123
{"msg": "insert into test values(1, 0) on conflict do update set ❰123❱ ⟵ column name expected"}
insert into test values(1, 0) on conflict do update set path
{"msg": "insert into test values(1, 0) on conflict do update set path ⟵ = expected"}
insert into test values(1, 0) on conflict do update set path =
{"msg": "insert into test values(1, 0) on conflict do update set path = ⟵ bad expression"}
drop table test
# test: on conflict do nothing
create table test (id int primary key, data int)
insert into test values(1, 0) on conflict do nothing
insert into test values(1, 0) on conflict do nothing
insert into test values(1, 0) on conflict do nothing
explain insert into test values(1, 0), (2, 0), (1, 0) on conflict do nothing
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 2      0      0     ",
      "02": "upsert              0      2      -1    ",
      "03": "free                0      0      0     ",
      "04": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values(1, 0), (2, 0), (1, 0) on conflict do nothing
select * from test
[[1, 0], [2, 0]]
drop table test
# test: on conflict do error
create table test (id int primary key, data int)
insert into test values(1, 0) on conflict do error
insert into test values(1, 0) on conflict do error
{"msg": "unique key constraint violation"}
drop table test
# test: on conflict do resolve (without resolved columns)
create table test (id int primary key, data int)
explain insert into test values(1, 0) on conflict do nothing
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 2      0      0     ",
      "02": "upsert              0      2      -1    ",
      "03": "free                0      0      0     ",
      "04": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
explain insert into test values(1, 0) on conflict do resolve
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 5      0      0     ",
      "02": "string              1      0      0     # unique key constraint violation",
      "03": "push                1      0      0     ",
      "04": "call                1      -      1     # public.error()",
      "05": "upsert              0      2      -1    ",
      "06": "free                0      0      0     ",
      "07": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values(1, 0) on conflict do resolve
insert into test values(1, 0) on conflict do resolve
{"msg": "unique key constraint violation"}
select * from test
[[1, 0]]
drop table test
# test: upsert insert
create table test (id int primary key, data int)
explain insert into test values(1, 0) on conflict do update set data = data + 1
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 9      0      0     ",
      "02": "int                 1      -      0     # 1",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "int                 2      -      0     # 1",
      "06": "addii               3      1      2     ",
      "07": "push                3      0      0     ",
      "08": "update              0      1      0     ",
      "09": "upsert              0      2      -1    ",
      "10": "free                0      0      0     ",
      "11": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values(1, 0) on conflict do update set data = data + 1
select * from test
[[1, 0]]
drop table test
# test: upsert
create table test (id int primary key, data int)
insert into test values(1, 0) on conflict do update set data = data + 1
select * from test
[[1, 0]]
insert into test values(1, 0) on conflict do update set data = data + 1
select * from test
[[1, 1]]
insert into test values(1, 0) on conflict do update set data = data + 1
select * from test
[[1, 2]]
drop table test
# test: upsert batch
create table test (id int primary key, data int)
explain insert into test values (1, 0), (1, 0), (1, 0) on conflict do update set data = data + 1
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 9      0      0     ",
      "02": "int                 1      -      0     # 1",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "int                 2      -      0     # 1",
      "06": "addii               3      1      2     ",
      "07": "push                3      0      0     ",
      "08": "update              0      1      0     ",
      "09": "upsert              0      2      -1    ",
      "10": "free                0      0      0     ",
      "11": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values (1, 0), (1, 0), (1, 0) on conflict do update set data = data + 1
insert into test values (1, 0), (1, 0), (1, 0) on conflict do update set data = data + 1
insert into test values (1, 0), (1, 0), (1, 0) on conflict do update set data = data + 1
select * from test
[[1, 8]]
drop table test
# test: upsert where
create table test (id int primary key, data int)
insert into test values (1, 0) on conflict do update set data = data + 1
insert into test values (1, 0) on conflict do update set data = data + 1
insert into test values (1, 0) on conflict do update set data = data + 1
select * from test
[[1, 2]]
explain insert into test values (1, 0) on conflict do update set data = data + 1 where true
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 11     0      0     ",
      "02": "bool                1      1      0     ",
      "03": "jntr                11     1      0     ",
      "04": "int                 1      -      0     # 1",
      "05": "push                1      0      0     ",
      "06": "table_readi32       1      0      1     ",
      "07": "int                 2      -      0     # 1",
      "08": "addii               3      1      2     ",
      "09": "push                3      0      0     ",
      "10": "update              0      1      0     ",
      "11": "upsert              0      2      -1    ",
      "12": "free                0      0      0     ",
      "13": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values (1, 0) on conflict do update set data = data + 1 where true
select * from test
[[1, 3]]
insert into test values (1, 0) on conflict do update set data = data + 1 where data < 3
select * from test
[[1, 3]]
insert into test values (1, 0) on conflict do update set data = data + 1 where data <= 3
select * from test
[[1, 4]]
drop table test
# test: upsert excluded
create table test (id int primary key, data int)
insert into test values (1, 0)
insert into test values (1, 123) on conflict do update set data = data + excluded.data
explain insert into test values (1, 123) on conflict do update set data = data + excluded.data
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 9      0      0     ",
      "02": "int                 1      -      0     # 1",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "excluded            2      1      0     ",
      "06": "addii               3      1      2     ",
      "07": "push                3      0      0     ",
      "08": "update              0      1      0     ",
      "09": "upsert              0      2      -1    ",
      "10": "free                0      0      0     ",
      "11": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
select * from test
[[1, 123]]
drop table test
# test: upsert excluded (json)
create table test (id int primary key, data int, data2 json)
insert into test values (1, 0, null)
insert into test values (1, null, {"id": 48}) on conflict do update set data = data + excluded.data2.id::int
explain insert into test values (1, null, {"id": 48}) on conflict do update set data = data + excluded.data2.id::int
[{
  "bytecode": {
    "frontend": {
      "00": "set_ptr             0      -      0     ",
      "01": "send_shard          0      -      0     # public.test (last)",
      "02": "ret                 -1     -1     -     "
    },
    "backend": {
      "00": "table_prepare       0      -      0     # public.test",
      "01": "jmp                 13     0      0     ",
      "02": "int                 1      -      0     # 1",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "excluded            2      2      0     ",
      "06": "string              3      0      0     # id",
      "07": "dotjs               4      2      3     ",
      "08": "push                4      0      0     ",
      "09": "call                2      -      1     # public.int()",
      "10": "addii               3      1      2     ",
      "11": "push                3      0      0     ",
      "12": "update              0      1      0     ",
      "13": "upsert              0      2      -1    ",
      "14": "free                0      0      0     ",
      "15": "ret                 -1     -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
select * from test
[[1, 48, null]]
drop table test
# test: upsert excluded (no target)
create table test (id int primary key)
select excluded.id from test
[]
insert into test values (1)
select excluded.id from test
{"msg": "unexpected EXCLUDED usage"}
drop table test
# test: upsert null
create table test (id int primary key, data int)
insert into test values (1, 0), (2, 0), (3, null) on conflict do update set data = data + 1
select * from test
[[1, 0], [2, 0], [3, null]]
insert into test values (1, 0), (2, 0), (3, 0) on conflict do update set data = data + 1
select * from test
[[1, 1], [2, 1], [3, null]]
drop table test
# test: upsert generate
create table test (id serial primary key, data int default 0)
insert into test generate 10 on conflict do update set data = data + 1
select * from test
[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0]]
alter table test set identity to 0
insert into test generate 10 on conflict do update set data = data + 1
select * from test
[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1]]
drop table test
# test: upsert var
create table test (id int primary key, data int default 0)
declare v int := 10; insert into test values (v, 0) on conflict do update set data = data + 1;
select * from test
[[10, 0]]
declare v int := 10; insert into test values (v, 0) on conflict do update set data = data + 1;
select * from test
[[10, 1]]
declare v int := 10; insert into test values (v, 0) on conflict do update set data = data + 1;
select * from test
[[10, 2]]
# test: upsert var excluded
declare v int := 10; insert into test values (v, 0) on conflict do update set data = excluded.id + data;
select * from test
[[10, 12]]
drop table test
# test: upsert returning
create table test (id int primary key, data int)
insert into test values (1, 0)
explain insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[{
  "bytecode": {
    "frontend": {
      "00": "union               0      0      0     ",
      "01": "set_ptr             1      -      0     ",
      "02": "send_shard          0      -      1     # public.test (last)",
      "03": "union_recv          0      0      0     ",
      "04": "ret                 0      -1     -     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_prepare       1      -      0     # public.test",
      "02": "jmp                 15     0      0     ",
      "03": "int                 2      -      0     # 1",
      "04": "push                2      0      0     ",
      "05": "table_readi32       2      1      1     ",
      "06": "int                 3      -      0     # 1",
      "07": "addii               4      2      3     ",
      "08": "push                4      0      0     ",
      "09": "update              1      1      0     ",
      "10": "table_readi32       2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "table_readi32       2      1      1     ",
      "13": "push                2      0      0     ",
      "14": "set_add             0      0      0     ",
      "15": "upsert              1      3      10    ",
      "16": "free                1      0      0     ",
      "17": "ret                 0      -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[[1, 1]]
insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[[1, 2]]
insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[[1, 3]]
select * from test
[[1, 3]]
drop table test
# test: upsert returning (do nothing)
create table test (id int primary key, data int)
insert into test values (1, 0)
explain insert into test values(1, 0) on conflict do nothing returning *
[{
  "bytecode": {
    "frontend": {
      "00": "union               0      0      0     ",
      "01": "set_ptr             1      -      0     ",
      "02": "send_shard          0      -      1     # public.test (last)",
      "03": "union_recv          0      0      0     ",
      "04": "ret                 0      -1     -     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_prepare       1      -      0     # public.test",
      "02": "jmp                 8      0      0     ",
      "03": "table_readi32       2      1      0     ",
      "04": "push                2      0      0     ",
      "05": "table_readi32       2      1      1     ",
      "06": "push                2      0      0     ",
      "07": "set_add             0      0      0     ",
      "08": "upsert              1      3      3     ",
      "09": "free                1      0      0     ",
      "10": "ret                 0      -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values(1, 0) on conflict do nothing returning *
[[1, 0]]
insert into test values(1, 0) on conflict do nothing returning *
[[1, 0]]
insert into test values(1, 0) on conflict do nothing returning *
[[1, 0]]
select * from test
[[1, 0]]
drop table test
# test: upsert returning (first row)
create table test (id int primary key, data int)
explain insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[{
  "bytecode": {
    "frontend": {
      "00": "union               0      0      0     ",
      "01": "set_ptr             1      -      0     ",
      "02": "send_shard          0      -      1     # public.test (last)",
      "03": "union_recv          0      0      0     ",
      "04": "ret                 0      -1     -     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_prepare       1      -      0     # public.test",
      "02": "jmp                 15     0      0     ",
      "03": "int                 2      -      0     # 1",
      "04": "push                2      0      0     ",
      "05": "table_readi32       2      1      1     ",
      "06": "int                 3      -      0     # 1",
      "07": "addii               4      2      3     ",
      "08": "push                4      0      0     ",
      "09": "update              1      1      0     ",
      "10": "table_readi32       2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "table_readi32       2      1      1     ",
      "13": "push                2      0      0     ",
      "14": "set_add             0      0      0     ",
      "15": "upsert              1      3      10    ",
      "16": "free                1      0      0     ",
      "17": "ret                 0      -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[[1, 0]]
insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[[1, 1]]
insert into test values(1, 0) on conflict do update set data = data + 1 returning *
[[1, 2]]
select * from test
[[1, 2]]
drop table test
# test: upsert returning (do nothing, first row)
create table test (id int primary key, data int)
explain insert into test values(1, 0) on conflict do nothing returning *
[{
  "bytecode": {
    "frontend": {
      "00": "union               0      0      0     ",
      "01": "set_ptr             1      -      0     ",
      "02": "send_shard          0      -      1     # public.test (last)",
      "03": "union_recv          0      0      0     ",
      "04": "ret                 0      -1     -     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_prepare       1      -      0     # public.test",
      "02": "jmp                 8      0      0     ",
      "03": "table_readi32       2      1      0     ",
      "04": "push                2      0      0     ",
      "05": "table_readi32       2      1      1     ",
      "06": "push                2      0      0     ",
      "07": "set_add             0      0      0     ",
      "08": "upsert              1      3      3     ",
      "09": "free                1      0      0     ",
      "10": "ret                 0      -1     -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
insert into test values(1, 0) on conflict do nothing returning *
[[1, 0]]
insert into test values(1, 0) on conflict do nothing returning *
[[1, 0]]
select * from test
[[1, 0]]
drop table test
# test: upsert returning (excluded var)
create table test (id int primary key, data int)
declare v int := 10; insert into test values (v, 0) on conflict do update set data = excluded.id + data returning excluded.id, id, data
[[10, 10, 0]]
select * from test
[[10, 0]]
declare v int := 10; insert into test values (v, 0) on conflict do update set data = excluded.id + data returning excluded.id, id, data
[[10, 10, 10]]
select * from test
[[10, 10]]
declare v int := 10; insert into test values (v, 0) on conflict do update set data = excluded.id + data returning excluded.id, id, data
[[10, 10, 20]]
select * from test
[[10, 20]]
declare v int := 10; insert into test values (v, 0) on conflict do update set data = excluded.id + data returning excluded.id, id, data
[[10, 10, 30]]
select * from test
[[10, 30]]
drop table test
# test: upsert secondary index
create table test (id int primary key, data int, value int)
create index i on test (data)
insert into test values (0, 2, 0)
insert into test values (1, 1, 0)
insert into test values (2, 0, 0)
select * from test
[[0, 2, 0], [1, 1, 0], [2, 0, 0]]
select * from test use index (i)
[[2, 0, 0], [1, 1, 0], [0, 2, 0]]
insert into test values (0, 2, 0) on conflict do update set value = value + 1
select * from test
[[0, 2, 1], [1, 1, 0], [2, 0, 0]]
select * from test use index (i)
[[2, 0, 0], [1, 1, 0], [0, 2, 1]]
insert into test values (3, 2, 0) on conflict do update set value = 10
select * from test
[[0, 2, 1], [1, 1, 0], [2, 0, 0], [3, 2, 0]]
select * from test use index (i)
[[2, 0, 0], [1, 1, 0], [0, 2, 1], [3, 2, 0]]
drop table test
# test: upsert select
create table test (id int primary key, data int)
insert into test select 0, 0
insert into test select 0, 0 on conflict do error
{"msg": "unique key constraint violation"}
insert into test select 0, 0 on conflict do update set data = data + 1
insert into test select 0, 0 on conflict do update set data = data + 1
insert into test select 0, 0 on conflict do update set data = data + 1
insert into test select 0, 0 on conflict do update set data = data + 1
select * from test
[[0, 4]]
# test: upsert select returning
insert into test select 0, 0 on conflict do update set data = data + 1 returning *
[[0, 5]]
# test: upsert select from table
create table src (id int primary key, data int)
insert into src values (0, 0), (1, 0)
explain insert into test select * from src on conflict do update set data = data + 1 returning *
[{
  "bytecode": {
    "frontend": {
      "00": "union               0      0      0     ",
      "01": "send_all            0      -      0     # public.src",
      "02": "union_recv          0      0      0     ",
      "03": "union_set           0      0      -1    ",
      "04": "union               1      0      0     ",
      "05": "dup                 2      0      0     ",
      "06": "send_shard          10     -      2     # public.test (last)",
      "07": "union_recv          1      0      0     ",
      "08": "ret                 1      -1     -     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_open_part     1      0      8     # public.src (primary)",
      "02": "table_readi32       2      1      0     ",
      "03": "push                2      0      0     ",
      "04": "table_readi32       2      1      1     ",
      "05": "push                2      0      0     ",
      "06": "set_add             0      0      0     ",
      "07": "table_next          1      2      0     ",
      "08": "free                1      0      0     ",
      "09": "ret                 0      -1     -     ",
      "10": "set                 1      2      0     ",
      "11": "table_prepare       2      -      0     # public.test",
      "12": "jmp                 25     0      0     ",
      "13": "int                 3      -      0     # 1",
      "14": "push                3      0      0     ",
      "15": "table_readi32       3      2      1     ",
      "16": "int                 4      -      0     # 1",
      "17": "addii               5      3      4     ",
      "18": "push                5      0      0     ",
      "19": "update              2      1      0     ",
      "20": "table_readi32       3      2      0     ",
      "21": "push                3      0      0     ",
      "22": "table_readi32       3      2      1     ",
      "23": "push                3      0      0     ",
      "24": "set_add             1      0      0     ",
      "25": "upsert              2      13     20    ",
      "26": "free                2      0      0     ",
      "27": "ret                 1      -1     -     "
    }
  },
  "access": [["public.test", "rw"], ["public.src", "ro"]]
}]
insert into test select * from src on conflict do update set data = data + 1 returning *
[[0, 6], [1, 0]]
select * from test
[[0, 6], [1, 0]]
drop table src
drop table test
disconnect S0
close E0
