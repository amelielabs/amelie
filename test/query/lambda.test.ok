open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }], "backends": 2
connect E0 S0 localhost:3485
# test: select ->
select ->
{"msg": "bad expression"}
select -> 1
{"msg": "bad expression"}
select 1 ->
{"msg": "bad expression"}
select 1 -> 1
{"msg": "no targets to use with GROUP BY or aggregates"}
# test: select int -> from table
create shared table test (id int primary key, data int)
insert into test values (0, 0)
insert into test values (1, 1)
insert into test values (2, 2)
insert into test values (3, 1)
insert into test values (4, 3)
select 0 -> id
{"msg": "no targets to use with GROUP BY or aggregates"}
select 0 -> id from test
[4]
# test: select int ->, int -> from table
select 0 -> id, 0 -> data from test
[[4, 3]]
explain select 0 -> id, 0 -> data from test
[{
  "bytecode": {
    "coordinator": {
      "00": "send_first          0      0      0     ",
      "01": "recv                0      0      0     ",
      "02": "merge_recv_agg      0      0      20    ",
      "03": "set                 1      2      0     ",
      "04": "store_open          1      0      6     ",
      "05": "jmp                 12     0      0     ",
      "06": "store_read          2      1      0     ",
      "07": "push                2      0      0     ",
      "08": "store_read          2      1      1     ",
      "09": "push                2      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "store_next          1      6      0     ",
      "12": "store_close         1      1      0     ",
      "13": "cte_set             0      1      0     ",
      "14": "content             0      -      -     ",
      "15": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      2      1     ",
      "01": "int                 1      -      0     # 0",
      "02": "int                 2      -      0     # 0",
      "03": "table_open          0      0      5     # public.test (primary)",
      "04": "jmp                 14     0      0     ",
      "05": "bool                3      1      0     ",
      "06": "push                3      0      0     ",
      "07": "set_get             3      0      0     ",
      "08": "table_readi32       4      0      0     ",
      "09": "push                4      0      0     ",
      "10": "table_readi32       4      0      1     ",
      "11": "push                4      0      0     ",
      "12": "set_agg             0      3      20    ",
      "13": "table_next          0      5      0     ",
      "14": "table_close         0      0      0     ",
      "15": "free                1      0      0     ",
      "16": "free                2      0      0     ",
      "17": "bool                1      1      0     ",
      "18": "push                1      0      0     ",
      "19": "set_get             1      0      0     ",
      "20": "null                2      0      0     ",
      "21": "push                2      0      0     ",
      "22": "null                2      0      0     ",
      "23": "push                2      0      0     ",
      "24": "set_agg             0      1      20    ",
      "25": "result              0      0      0     ",
      "26": "ret                 0      0      0     "
    }
  }
}]
# test: select self
select self
{"msg": "unexpected <SELF> usage without lambda context"}
# test: select int -> self from table
select 0 -> self from test
[0]
select 0 -> self + 1 from test
[5]
explain select 0 -> self + 1 from test
[{
  "bytecode": {
    "coordinator": {
      "00": "send_first          0      0      0     ",
      "01": "recv                0      0      0     ",
      "02": "merge_recv_agg      0      0      20    ",
      "03": "set                 1      1      0     ",
      "04": "store_open          1      0      6     ",
      "05": "jmp                 10     0      0     ",
      "06": "store_read          2      1      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             1      0      0     ",
      "09": "store_next          1      6      0     ",
      "10": "store_close         1      1      0     ",
      "11": "cte_set             0      1      0     ",
      "12": "content             0      -      -     ",
      "13": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      1      1     ",
      "01": "int                 1      -      0     # 0",
      "02": "table_open          0      0      4     # public.test (primary)",
      "03": "jmp                 15     0      0     ",
      "04": "bool                2      1      0     ",
      "05": "push                2      0      0     ",
      "06": "set_get             2      0      0     ",
      "07": "int                 3      -      0     # 0",
      "08": "push                3      0      0     ",
      "09": "self                3      0      2     ",
      "10": "int                 4      -      0     # 1",
      "11": "addii               5      3      4     ",
      "12": "push                5      0      0     ",
      "13": "set_agg             0      2      20    ",
      "14": "table_next          0      4      0     ",
      "15": "table_close         0      0      0     ",
      "16": "free                1      0      0     ",
      "17": "bool                1      1      0     ",
      "18": "push                1      0      0     ",
      "19": "set_get             1      0      0     ",
      "20": "null                2      0      0     ",
      "21": "push                2      0      0     ",
      "22": "set_agg             0      1      20    ",
      "23": "result              0      0      0     ",
      "24": "ret                 0      0      0     "
    }
  }
}]
select 0 -> (self + 1) + self from test
[31]
# test: select string -> self from table
select '' -> self || id::string from test
["01234"]
select '' -> self::concat(id::string) from test
["01234"]
# test: select [] -> self from table
select [] -> self::append(id) from test
[[0, 1, 2, 3, 4]]
select [] -> append(self, id) from test
[[0, 1, 2, 3, 4]]
select [] -> self::append(id::string) from test
[["0", "1", "2", "3", "4"]]
# test: select {} -> self from table
select {} -> self::set('key_' || id::string, data) from test
[{
  "key_0": 0,
  "key_1": 1,
  "key_2": 2,
  "key_3": 1,
  "key_4": 3
}]
# test: select int -> from table group by
select * from test
[[0, 0], [1, 1], [2, 2], [3, 1], [4, 3]]
select data, 0 -> self + 1 from test group by data
[[0, 1], [1, 2], [2, 1], [3, 1]]
# test: select column -> from table (unsupported)
select id -> self + 1 from test
{"msg": "<id> column not found"}
# test: select expr -> from table
select (select 1 + 2) -> self + 1 from test
[8]
select 1 + 2 -> self + 1 from test;
[8]
select null::int -> 1 from test;
[1]
select null::int -> 1 from test where id > 10;
[null]
# test: select subquery -> from table
select (select data from test t where id = 3) -> self + 1 from test
[6]
# test: select (select column -> from table) from table
select id, (select o.id -> self + 1 from test) from test as o
[[0, 5], [1, 6], [2, 7], [3, 8], [4, 9]]
select (select o.id -> self + 1 from test) from test as o
[5, 6, 7, 8, 9]
# test: select -> / ->
select (0.0 -> self + id) / (0 -> self + 1) from test;
[2]
drop table test
# test: select int -> self from distributed table (unsupported)
create table test (id int primary key, data int)
insert into test values (0, 0)
insert into test values (1, 1)
insert into test values (2, 2)
insert into test values (3, 1)
insert into test values (4, 3)
select 0 -> self + 1 from test
{"msg": "distributed operation with lambda is not supported"}
drop table test
disconnect S0
close E0
