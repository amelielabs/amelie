open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: create table statement parsing
create
{"code": 1, "msg": "CREATE <USER|REPLICA|NODE|SCHEMA|TABLE|INDEX|VIEW> expected"}
create junk
{"code": 1, "msg": "CREATE <USER|REPLICA|NODE|SCHEMA|TABLE|INDEX|VIEW> expected"}
create unique
{"code": 1, "msg": "CREATE UNIQUE <INDEX> expected"}
create unique table
{"code": 1, "msg": "CREATE UNIQUE <INDEX> expected"}
create table
{"code": 1, "msg": "CREATE TABLE <name> expected"}
create table "junk_name"
{"code": 1, "msg": "CREATE TABLE <name> expected"}
create table if
{"code": 1, "msg": "IF <NOT> EXISTS expected"}
create table if not
{"code": 1, "msg": "IF NOT <EXISTS> expected"}
create table if not exists
{"code": 1, "msg": "CREATE TABLE <name> expected"}
create table 1234
{"code": 1, "msg": "CREATE TABLE <name> expected"}
create table test(
{"code": 1, "msg": "(<name> expected"}
create table test(0
{"code": 1, "msg": "(<name> expected"}
create table test("123"
{"code": 1, "msg": "(<name> expected"}
create table test(name
{"code": 1, "msg": "name <TYPE> expected"}
create table test(name junk_type
{"code": 1, "msg": "name <TYPE> expected"}
create table test(name int
{"code": 1, "msg": "CREATE TABLE name (name type <,)> expected"}
create table test(name int,
{"code": 1, "msg": "(<name> expected"}
create table test(name int,)
{"code": 1, "msg": "(<name> expected"}
create table if not exists 1234
{"code": 1, "msg": "CREATE TABLE <name> expected"}
create table if not exists test(
{"code": 1, "msg": "(<name> expected"}
create table if not exists test(0
{"code": 1, "msg": "(<name> expected"}
create table if not exists test("123"
{"code": 1, "msg": "(<name> expected"}
create table if not exists test(name
{"code": 1, "msg": "name <TYPE> expected"}
create table if not exists test(name junk_type
{"code": 1, "msg": "name <TYPE> expected"}
create table if not exists test(name int
{"code": 1, "msg": "CREATE TABLE name (name type <,)> expected"}
create table test(name int) junk
{"code": 1, "msg": "primary key is not defined"}
create table test()
{"code": 1, "msg": "(<name> expected"}
# test: column int/integer
create table test(id int primary key, id2 integer)
select indexes[0] from system.tables() where name = "test"
[{
  "name": "primary",
  "type": 2,
  "unique": true,
  "primary": true,
  "keys": [{
    "ref": 0,
    "type": 2,
    "path": "",
    "asc": false
  }]
}]
drop table test
# test: column bool/boolean
create table test(id int primary key, a bool, b boolean)
select indexes[0] from system.tables() where name = "test"
[{
  "name": "primary",
  "type": 2,
  "unique": true,
  "primary": true,
  "keys": [{
    "ref": 0,
    "type": 2,
    "path": "",
    "asc": false
  }]
}]
drop table test
# test: column string/text
create table test(id int primary key, a string, b text)
select indexes[0] from system.tables() where name = "test"
[{
  "name": "primary",
  "type": 2,
  "unique": true,
  "primary": true,
  "keys": [{
    "ref": 0,
    "type": 2,
    "path": "",
    "asc": false
  }]
}]
drop table test
# test: column real
create table test(id int primary key, a real)
select indexes[0] from system.tables() where name = "test"
[{
  "name": "primary",
  "type": 2,
  "unique": true,
  "primary": true,
  "keys": [{
    "ref": 0,
    "type": 2,
    "path": "",
    "asc": false
  }]
}]
drop table test
# test: column map/object
create table test(id int primary key, a map, b object)
select indexes[0] from system.tables() where name = "test"
[{
  "name": "primary",
  "type": 2,
  "unique": true,
  "primary": true,
  "keys": [{
    "ref": 0,
    "type": 2,
    "path": "",
    "asc": false
  }]
}]
drop table test
# test: column array
create table test(id int primary key, a array)
select indexes[0] from system.tables() where name = "test"
[{
  "name": "primary",
  "type": 2,
  "unique": true,
  "primary": true,
  "keys": [{
    "ref": 0,
    "type": 2,
    "path": "",
    "asc": false
  }]
}]
drop table test
# test: column redefined
create table test(id int, id int)
{"code": 1, "msg": "<id> column redefined"}
# test: primary key is not defined
create table test(id int)
{"code": 1, "msg": "primary key is not defined"}
# test: primary key clause parsing
create table test(primary)
{"code": 1, "msg": "PRIMARY <KEY> expected"}
create table test(primary key(
{"code": 1, "msg": "KEY (<name> expected"}
create table test(primary key()
{"code": 1, "msg": "KEY (<name> expected"}
create table test(primary key())
{"code": 1, "msg": "KEY (<name> expected"}
create table test(primary key(abc))
{"code": 1, "msg": "<abc> column does not exists"}
create table test(id int, primary key())
{"code": 1, "msg": "KEY (<name> expected"}
create table test(id int, primary key(id, ))
{"code": 1, "msg": "KEY (<name> expected"}
create table test(primary key(id), id int)
{"code": 1, "msg": "<id> column does not exists"}
# test: primary key is not found
create table test(id int, primary key(idd))
{"code": 1, "msg": "<idd> column does not exists"}
# test: primary key redefined
create table test(id int, primary key(id, id))
create table test(id int primary key, primary key(id))
{"code": 1, "msg": "table 'test': already exists"}
create table if not exists test(id int primary key, primary key(id))
select indexes[0].keys from system.tables() where name = "test"
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": true
}, {
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": true
}]]
drop table test
# test: primary key redefined #2
create table test(id int primary key primary key)
{"code": 1, "msg": "PRIMARY KEY defined twice"}
# test: primary key asc/desc
create table test(id int, id2 int, primary key(id asc))
select indexes[0].keys from system.tables() where name = "test"
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": true
}]]
drop table test
create table test(id int, primary key(id desc))
select indexes[0].keys from system.tables() where name = "test"
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
drop table test
# test: primary key ensure valid type
create table test(id map primary key)
{"code": 1, "msg": "<id> column key can be string or int"}
create table test(id map, primary key(id))
{"code": 1, "msg": "<id> column key can be string or int"}
# test: primary key ensure nested key required
create table test(data map, primary key(data.id))
{"code": 1, "msg": "data.id <TYPE> expected"}
# test: primary key ensure valid nested key type
create table test(data map, primary key(data.id map))
{"code": 1, "msg": "<data> column key can be string or int"}
create table test(data map, primary key(data.id integer))
select indexes[0].keys from system.tables() where name = "test"
[[{
  "ref": 0,
  "type": 2,
  "path": "id",
  "asc": true
}]]
drop table test
create table test (id int primary key)
create table test (id int primary key)
{"code": 1, "msg": "table 'test': already exists"}
# test: table create if not exists
create table test (id int primary key)
{"code": 1, "msg": "table 'test': already exists"}
create table if not exists test (id int primary key)
select name from system.tables() where name = "test"
["test"]
drop table test
select name from system.tables() where name = "test"
[]
# test: schema default
create table test (id int primary key)
select *.schema from system.tables() where name = "test"
["public"]
drop table test
# test: schema system
create table system.test (id int primary key)
{"code": 1, "msg": "system schema <system> cannot be used to create objects"}
# test: schema default explicit
create table public.test (id int primary key)
select *.schema from system.tables() where name = "test"
["public"]
drop table public.test
# test: schema non-exists
create table test.test (id int primary key)
{"code": 1, "msg": "schema 'test': not exists"}
select *.schema from system.tables() where name = "test"
[]
# test: schema set
create table test (id int primary key)
create schema test
create table test.test (id int primary key)
select *.schema || "." || *.name from system.tables() where name = "test"
["public.test", "test.test"]
select name from system.tables() where *.schema = "test" and name = "test"
["test"]
drop table test
drop table test.test
drop schema test
# test: table create with conflicting view
create view test as select 1
create table test (id int primary key)
{"code": 1, "msg": "view <test> with the same name exists"}
drop view test
# test: reference
create table test (id int primary key) reference
select *.name, *.reference from system.tables()
[["test", true]]
drop table test
# test: constraint default
create table test (id int primary key, data int default 1)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
drop table test
# test: constraint default with key
create table test (id int default 1 primary key)
drop table test
# test: constraint default with key #2
create table test (id int default 1, primary key(id))
drop table test
# test: constraint default expr validate
create table test (id int primary key, data int default 1 + 1)
{"code": 1, "msg": "only consts allowed as DEFAULT expression"}
# test: constraint not null with key
create table test (id int not null primary key)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
drop table test
# test: constraint not null forced for keys
create table test (id int primary key, data int)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
drop table test
# test: constraint not null forced for keys #2
create table test (id int, data int, primary key(id))
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": true
}]]
drop table test
# test: constraint not null
create table test (id int primary key, data int not)
{"code": 1, "msg": "NOT <NULL> expected"}
create table test (id int primary key, data int not null)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
insert into test values(1, 1)
insert into test values(2, null)
{"code": 1, "msg": "column <data> value cannot be NULL"}
insert into test values(null, null)
{"code": 1, "msg": "column <id> value cannot be NULL"}
drop table test
# test: constraint not null default
create table test (id int primary key, data int not null default 123)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
insert into test values(1, 1)
insert into test values(2, null)
{"code": 1, "msg": "column <data> value cannot be NULL"}
insert into test (id) values(3)
select * from test
[[1, 1], [3, 123]]
drop table test
# test: constraint serial
create table test (id int primary key, data int serial)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
drop table test
# test: constraint serial key
create table test (id int serial primary key)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
drop table test
# test: constraint serial key #2
create table test (id int serial, primary key(id))
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": true
}]]
drop table test
# test: constraint serial key type
create table test (id string serial primary key)
{"code": 1, "msg": "SERIAL column <id> must be integer"}
# test: constraint serial multiple columns
create table test (id int serial primary key, data int serial)
select indexes[0].keys from system.tables()
[[{
  "ref": 0,
  "type": 2,
  "path": "",
  "asc": false
}]]
drop table test
# test: with parsing
create table test (id int primary key) with
{"code": 1, "msg": "WITH <(> expected"}
create table test (id int primary key) with (
{"code": 1, "msg": "WITH (<name> expected"}
create table test (id int primary key) with (,
{"code": 1, "msg": "WITH (<name> expected"}
create table test (id int primary key) with (abc
{"code": 1, "msg": "WITH: <abc> unrecognized parameter"}
create table test (id int primary key) with (abc = 10)
{"code": 1, "msg": "WITH: <abc> unrecognized parameter"}
create table test (id int primary key) with (abc = "")
{"code": 1, "msg": "WITH: <abc> unrecognized parameter"}
# test: with
create table test (id int primary key) with (uuid = "00000000-0000-0000-0000-000000000000")
{"code": 1, "msg": "WITH: <uuid> unrecognized parameter"}
disconnect S0
close E0
