open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: ensure public schema exists
show schemas
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]
select * from system.schemas() where name = "public"
[{
  "name": "public",
  "system": true,
  "create": true
}]
select system from system.schemas() where name = "public"
[true]
# test: ensure system schema exists
show schemas
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]
select * from system.schemas() where name = "system"
[{
  "name": "system",
  "system": true,
  "create": false
}]
select system from system.schemas() where name = "system"
[true]
# test: create schema statement parsing
create
{"code": 1, "msg": "CREATE <USER|REPLICA|NODE|SCHEMA|TABLE|INDEX|VIEW> expected"}
create schema
{"code": 1, "msg": "CREATE SCHEMA <name> expected"}
create schema 123
{"code": 1, "msg": "CREATE SCHEMA <name> expected"}
create schema if
{"code": 1, "msg": "IF <NOT> EXISTS expected"}
create schema if not
{"code": 1, "msg": "IF NOT <EXISTS> expected"}
create schema if not 123
{"code": 1, "msg": "IF NOT <EXISTS> expected"}
create schema if not exists
{"code": 1, "msg": "CREATE SCHEMA <name> expected"}
create schema test abc
{"code": 1, "msg": "unexpected token at the end of statement"}
# test: create schema
create schema test
[]
show schemas
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test",
  "system": false,
  "create": true
}]
select system.schemas()
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test",
  "system": false,
  "create": true
}]
# test: create schema if not exists
create schema test
{"code": 1, "msg": "schema 'test': already exists"}
create schema if not exists test
[]
show schemas
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test",
  "system": false,
  "create": true
}]
# test: drop schema statement parsing
drop schema
{"code": 1, "msg": "DROP SCHEMA <name> expected"}
drop schema 123
{"code": 1, "msg": "DROP SCHEMA <name> expected"}
drop schema if
{"code": 1, "msg": "IF <EXISTS> expected"}
drop schema if exists
{"code": 1, "msg": "DROP SCHEMA <name> expected"}
drop schema test abc
{"code": 1, "msg": "unexpected token at the end of statement"}
# test: drop schema
drop schema test
[]
show schemas
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]
# test: drop schema if exists
drop schema test
{"code": 1, "msg": "schema 'test': not exists"}
drop schema if exists test
[]
show schemas
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]
# test: drop system schema
drop schema public
{"code": 1, "msg": "schema 'public': system schema cannot be dropped"}
show schemas
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]
# test: drop schema with dependency
create schema test
[]
create table test.test(id int primary key)
[]
drop schema test
{"code": 1, "msg": "table 'test' depends on schema 'test"}
drop table test.test
[]
drop schema test
[]
# test: alter schema statment parsing
alter schema
{"code": 1, "msg": "ALTER SCHEMA <name> expected"}
alter schema 123
{"code": 1, "msg": "ALTER SCHEMA <name> expected"}
alter schema test
{"code": 1, "msg": "ALTER SCHEMA <RENAME> expected"}
alter schema test rename
{"code": 1, "msg": "ALTER SCHEMA RENAME <name> expected"}
alter schema test rename to
{"code": 1, "msg": "ALTER SCHEMA RENAME <name> expected"}
alter schema test rename "hello"
{"code": 1, "msg": "ALTER SCHEMA RENAME <name> expected"}
# test: alter schema rename
create schema test
[]
select system.schemas()
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test",
  "system": false,
  "create": true
}]
alter schema test rename test2
[]
select system.schemas()
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test2",
  "system": false,
  "create": true
}]
select system.schemas()
[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}, {
  "name": "test2",
  "system": false,
  "create": true
}]
# test: alter schema system
alter schema public rename _public
{"code": 1, "msg": "schema 'public': system schema cannot be altered"}
disconnect S0
close E0
