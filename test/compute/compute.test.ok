open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "nodes": 0
connect E0 S0 localhost:3480
# test: bootstrap (no nodes)
show compute
[]
# test: ddl (without nodes)
create table test (id int primary key)
{"msg": "system has no nodes"}
create shared table test (id int primary key)
{"msg": "system has no nodes"}
select * from test
{"msg": "select * from ❰test❱ ⟵ relation not found"}
# test: alter compute add statement parsing
alter compute
{"msg": "alter compute ⟵ ADD or DROP expected"}
alter compute 1
{"msg": "alter compute ❰1❱ ⟵ ADD or DROP expected"}
alter compute pool
{"msg": "alter compute pool ⟵ ADD or DROP expected"}
# test: alter compute add
alter compute add ""
{"msg": "failed to parse uuid"}
alter compute add node ""
{"msg": "failed to parse uuid"}
alter compute add "00000000-0000-0000-0000-000000000000"
show nodes
[1]
show compute
[{
  "id": "00000000-0000-0000-0000-000000000000"
}]
# test: alter compute add (already exists)
alter compute add node "00000000-0000-0000-0000-000000000000"
{"msg": "node '00000000-0000-0000-0000-000000000000': already exists"}
show nodes
[1]
# test: ddl/dml (with one node)
create table test1 (id int primary key)
create shared table test2 (id int primary key)
show tables
[{
  "schema": "public",
  "name": "test1",
  "shared": false,
  "unlogged": false
}, {
  "schema": "public",
  "name": "test2",
  "shared": true,
  "unlogged": false
}]
insert into test1 values (1), (2), (3); insert into test2 values (4),(5),(6)
select * from test1
[1, 2, 3]
select * from test2
[4, 5, 6]
# test: restart
disconnect S0
close E0
open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "nodes": 0
connect E0 S0 localhost:3480
show compute
[{
  "id": "00000000-0000-0000-0000-000000000000"
}]
select * from test1
[1, 2, 3]
select * from test2
[4, 5, 6]
# test: alter compute drop node statement parsing
alter compute drop
{"msg": "alter compute drop ⟵ id is expected for the DROP command"}
alter compute drop 1
{"msg": "alter compute drop ❰1❱ ⟵ id is expected for the DROP command"}
alter compute drop node
{"msg": "alter compute drop node ⟵ id is expected for the DROP command"}
alter compute drop node 1
{"msg": "alter compute drop node ❰1❱ ⟵ id is expected for the DROP command"}
alter compute drop node ""
{"msg": "node '': not exists"}
# test: alter compute drop node (with dependency)
alter compute drop node "00000000-0000-0000-0000-000000000000"
{"msg": "node '00000000-0000-0000-0000-000000000000': has dependencies"}
# test: drop node without dependency
alter compute add "00000000-0000-0000-0000-000000000001"
alter compute add "00000000-0000-0000-0000-000000000002"
show compute
[{
  "id": "00000000-0000-0000-0000-000000000000"
}, {
  "id": "00000000-0000-0000-0000-000000000001"
}, {
  "id": "00000000-0000-0000-0000-000000000002"
}]
alter compute drop node "00000000-0000-0000-0000-000000000001"
show compute
[{
  "id": "00000000-0000-0000-0000-000000000000"
}, {
  "id": "00000000-0000-0000-0000-000000000002"
}]
alter compute drop node "00000000-0000-0000-0000-000000000001"
{"msg": "node '00000000-0000-0000-0000-000000000001': not exists"}
# test: ddl (two nodes partitioning)
create table test3 (id int primary key)
show tables
[{
  "schema": "public",
  "name": "test1",
  "shared": false,
  "unlogged": false
}, {
  "schema": "public",
  "name": "test2",
  "shared": true,
  "unlogged": false
}, {
  "schema": "public",
  "name": "test3",
  "shared": false,
  "unlogged": false
}]
# test: alter compute drop node (after table drop)
alter compute drop node "00000000-0000-0000-0000-000000000002"
{"msg": "node '00000000-0000-0000-0000-000000000002': has dependencies"}
drop table test3
alter compute drop node "00000000-0000-0000-0000-000000000002"
show compute
[{
  "id": "00000000-0000-0000-0000-000000000000"
}]
# test: create table/create node/select
create table test4(id int primary key)
insert into test4 values (1), (2), (3)
alter compute add "00000000-0000-0000-0000-000000000003"
alter compute add "00000000-0000-0000-0000-000000000004"
select * from test4
[1, 2, 3]
drop table test4
# test: create table/create node/add column
show compute
[{
  "id": "00000000-0000-0000-0000-000000000000"
}, {
  "id": "00000000-0000-0000-0000-000000000003"
}, {
  "id": "00000000-0000-0000-0000-000000000004"
}]
create table test(id int primary key)
show tables
[{
  "schema": "public",
  "name": "test1",
  "shared": false,
  "unlogged": false
}, {
  "schema": "public",
  "name": "test2",
  "shared": true,
  "unlogged": false
}, {
  "schema": "public",
  "name": "test",
  "shared": false,
  "unlogged": false
}]
insert into test values (1), (2), (3)
alter compute add "00000000-0000-0000-0000-000000000005"
alter compute add "00000000-0000-0000-0000-000000000006"
show compute
[{
  "id": "00000000-0000-0000-0000-000000000000"
}, {
  "id": "00000000-0000-0000-0000-000000000003"
}, {
  "id": "00000000-0000-0000-0000-000000000004"
}, {
  "id": "00000000-0000-0000-0000-000000000005"
}, {
  "id": "00000000-0000-0000-0000-000000000006"
}]
alter table test add column data int
show tables
[{
  "schema": "public",
  "name": "test1",
  "shared": false,
  "unlogged": false
}, {
  "schema": "public",
  "name": "test2",
  "shared": true,
  "unlogged": false
}, {
  "schema": "public",
  "name": "test",
  "shared": false,
  "unlogged": false
}]
select * from test
[[1, null], [2, null], [3, null]]
drop table test
disconnect S0
close E0
