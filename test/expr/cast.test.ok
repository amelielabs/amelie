open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: cast parsing
select cast
{"msg": "select cast ⟵ ( expected"}
select cast (
{"msg": "select cast ( ⟵ bad expression"}
select cast ( 1
{"msg": "select cast ( 1 ⟵ AS expected"}
select cast ()
{"msg": "select cast (❰)❱ ⟵ bad expression"}
select cast (1 as
{"msg": "select cast (1 as ⟵ type name expected"}
select cast (1 as 1
{"msg": "select cast (1 as ❰1❱ ⟵ type name expected"}
# test: cast (bool as bool)
select cast (true as bool)::type
["bool"]
select cast (true as bool)
[true]
select cast (false as bool)
[false]
# test: cast (bool as int)
select cast (true as int)::type
["int"]
select cast (true as int)
[1]
select cast (false as int)
[0]
# test: cast (bool as double)
select cast (true as double)::type
["double"]
select cast (true as double)
[1]
select cast (false as double)
[0]
# test: cast (bool as string)
select cast (true as string)::type
["string"]
select cast (true as string)
["true"]
select cast (false as string)
["false"]
# test: cast (bool as json)
select cast (true as json)::type
["json"]
select cast (true as json)
[true]
select cast (false as json)
[false]
# test: cast (bool as date)
select cast (true as date)
{"msg": "date(❰bool❱ ⟵ unsupported argument type"}
# test: cast (bool as timestamp)
select cast (true as timestamp)
{"msg": "timestamp(❰bool❱ ⟵ unsupported argument type"}
# test: cast (bool as interval)
select cast (true as interval)
{"msg": "interval(❰bool❱ ⟵ unsupported argument type"}
# test: cast (bool as vector)
select cast (true as vector)
{"msg": "vector(❰bool❱ ⟵ unsupported argument type"}
# test: cast (bool as uuid)
select cast (true as uuid)
{"msg": "uuid(❰bool❱ ⟵ unsupported argument type"}
# test: cast (int as bool)
select cast (123 as bool)::type
["bool"]
select cast (123 as bool)
[true]
# test: cast (int as int)
select cast (123 as int)::type
["int"]
select cast (123 as int)
[123]
# test: cast (int as double)
select cast (123 as double)::type
["double"]
select cast (123 as double)
[123]
# test: cast (int as string)
select cast (123 as string)::type
["string"]
select cast (123 as string)
["123"]
# test: cast (int as json)
select cast (123 as json)::type
["json"]
select cast (123 as json)
[123]
# test: cast (int as date)
select cast (123 as date)
{"msg": "date overflow"}
# test: cast (int as timestamp)
select cast (123 as timestamp)
["1970-01-01 00:00:00.000123+00"]
# test: cast (int as interval)
select cast (123 as interval)
{"msg": "interval(❰int❱ ⟵ unsupported argument type"}
# test: cast (int as vector)
select cast (123 as vector)
{"msg": "vector(❰int❱ ⟵ unsupported argument type"}
# test: cast (int as uuid)
select cast (123 as uuid)
{"msg": "uuid(❰int❱ ⟵ unsupported argument type"}
# test: cast (double as bool)
select cast (123.321 as bool)::type
["bool"]
select cast (123.321 as bool)
[true]
# test: cast (double as int)
select cast (123.321 as int)::type
["int"]
select cast (123.321 as int)
[123]
# test: cast (double as double)
select cast (123.321 as double)::type
["double"]
select cast (123.321 as double)
[123.321]
# test: cast (double as string)
select cast (123.321 as string)::type
["string"]
select cast (123.321 as string)
["123.321"]
# test: cast (double as json)
select cast (123.321 as json)::type
["json"]
select cast (123.321 as json)
[123.321]
# test: cast (double as date)
select cast (123.321 as date)
{"msg": "date(❰double❱ ⟵ unsupported argument type"}
# test: cast (double as timestamp)
select cast (123.321 as timestamp)
{"msg": "timestamp(❰double❱ ⟵ unsupported argument type"}
# test: cast (double as interval)
select cast (123.321 as interval)
{"msg": "interval(❰double❱ ⟵ unsupported argument type"}
# test: cast (double as vector)
select cast (123.321 as vector)
{"msg": "vector(❰double❱ ⟵ unsupported argument type"}
# test: cast (double as uuid)
select cast (123.321 as uuid)
{"msg": "uuid(❰double❱ ⟵ unsupported argument type"}
# test: cast (string as bool)
select cast ('string' as bool)::type
{"msg": "bool(❰string❱ ⟵ failed to cast string to bool"}
select cast ('string' as bool)
{"msg": "bool(❰string❱ ⟵ failed to cast string to bool"}
select cast ('true' as bool)
[true]
select cast ('false' as bool)
[false]
# test: cast (string as int)
select cast ('string' as int)::type
{"msg": "int(❰string❱ ⟵ failed to cast string"}
select cast ('string' as int)
{"msg": "int(❰string❱ ⟵ failed to cast string"}
select cast ('123' as int)
[123]
# test: cast (string as double)
select cast ('string' as double)::type
{"msg": "double(❰string❱ ⟵ unsupported argument type"}
select cast ('string' as double)
{"msg": "double(❰string❱ ⟵ unsupported argument type"}
select cast ('123.321' as double)
{"msg": "double(❰string❱ ⟵ unsupported argument type"}
# test: cast (string as string)
select cast ('string' as string)::type
["string"]
select cast ('string' as string)
["string"]
# test: cast (string as json)
select cast ('string' as json)::type
["json"]
select cast ('string' as json)
["string"]
# test: cast (string as date)
select cast ('string' as date)
{"msg": "invalid date 'string'"}
select cast ('1970-00-00' as date)
["1969-11-30"]
# test: cast (string as timestamp)
select cast ('string' as timestamp)
{"msg": "invalid timestamp 'string'"}
select cast ('1970-00-00 00:00:00' as timestamp)
{"msg": "invalid timestamp '1970-00-00 00:00:00'"}
# test: cast (string as interval)
select cast ('string' as interval)
{"msg": "invalid interval 'string'"}
select cast ('1 days 5 hours' as interval)
["1 day 5 hours"]
# test: cast (string as vector)
select cast ('string' as vector)
{"msg": "vector(❰string❱ ⟵ unsupported argument type"}
select cast ('[1,2,3]' as vector)
{"msg": "vector(❰string❱ ⟵ unsupported argument type"}
# test: cast (string as uuid)
select cast ('string' as uuid)
{"msg": "failed to parse uuid"}
select cast ('00000000-0000-0000-0000-000000000000' as uuid)
["00000000-0000-0000-0000-000000000000"]
# test: cast (json as bool)
select cast (true::json as bool)::type
["bool"]
select cast (true::json as bool)
[true]
# test: cast (json as int)
select cast (123::json as int)::type
["int"]
select cast (123::json as int)
[123]
# test: cast (json as double)
select cast (123.321::json as double)::type
["double"]
select cast (123.321::json as double)
[123.321]
# test: cast (json as string)
select cast ('str'::json as string)::type
["string"]
select cast ('str'::json as string)
["str"]
# test: cast (json as json)
select cast ([1,2,3] as json)::type
["json"]
select cast ([1,2,3] as json)
[[1, 2, 3]]
# test: cast (json as date)
select cast ('0001-01-01'::json as date)
["0001-01-01"]
# test: cast (json as timestamp)
select cast ('1970-01-01 00:00:00'::json as timestamp)
["1970-01-01 00:00:00+00"]
# test: cast (json as interval)
select cast ('1 days 5 hours'::json as interval)
["1 day 5 hours"]
# test: cast (json as vector)
select cast ([1,2,3] as vector)
[[1, 2, 3]]
# test: cast (json as uuid)
select cast ('00000000-0000-0000-0000-000000000000'::json as uuid)
["00000000-0000-0000-0000-000000000000"]
# test: cast (date as bool)
select cast (date '1970-01-01' as bool)::type
{"msg": "bool(❰date❱ ⟵ unsupported argument type"}
select cast (date '1970-01-01' as bool)
{"msg": "bool(❰date❱ ⟵ unsupported argument type"}
# test: cast (date as int)
select cast (date '1970-01-01' as int)::type
["int"]
select cast (date '1970-01-01' as int)
[2440588]
# test: cast (date as double)
select cast (date '1970-01-01' as double)::type
["double"]
select cast (date '1970-01-01' as double)
[2.44059e+06]
# test: cast (date as string)
select cast (date '1970-01-01' as string)::type
["string"]
select cast (date '1970-01-01' as string)
["1970-01-01"]
# test: cast (date as json)
select cast (date '1970-01-01' as json)::type
["json"]
select cast (date '1970-01-01' as json)
["1970-01-01"]
# test: cast (date as date)
select cast (date '1970-01-01' as date)
["1970-01-01"]
# test: cast (date as timestamp)
select cast (date '1970-01-01' as timestamp)
["1970-01-01 00:00:00+00"]
# test: cast (date as interval)
select cast (date '1970-01-01' as interval)
{"msg": "interval(❰date❱ ⟵ unsupported argument type"}
# test: cast (date as vector)
select cast (date '1970-01-01' as vector)
{"msg": "vector(❰date❱ ⟵ unsupported argument type"}
# test: cast (date as uuid)
select cast (date '1970-01-01' as uuid)
{"msg": "uuid(❰date❱ ⟵ unsupported argument type"}
# test: cast (timestamp as bool)
select cast (timestamp '1970-01-01 00:00:00.99' as bool)::type
{"msg": "bool(❰timestamp❱ ⟵ unsupported argument type"}
select cast (timestamp '1970-01-01 00:00:00.99' as bool)
{"msg": "bool(❰timestamp❱ ⟵ unsupported argument type"}
# test: cast (timestamp as int)
select cast (timestamp '1970-01-01 00:00:00.99' as int)::type
["int"]
select cast (timestamp '1970-01-01 00:00:00.99' as int)
[990000]
# test: cast (timestamp as double)
select cast (timestamp '1970-01-01 00:00:00.99' as double)::type
["double"]
select cast (timestamp '1970-01-01 00:00:00.99' as double)
[990000]
# test: cast (timestamp as string)
select cast (timestamp '1970-01-01 00:00:00.99' as string)::type
["string"]
select cast (timestamp '1970-01-01 00:00:00.99' as string)
["1970-01-01 00:00:00.990+00"]
# test: cast (timestamp as json)
select cast (timestamp '1970-01-01 00:00:00.99' as json)::type
["json"]
select cast (timestamp '1970-01-01 00:00:00.99' as json)
["1970-01-01 00:00:00.990+00"]
# test: cast (timestamp as date)
select cast (timestamp '1970-01-01 00:00:00.99' as date)
["1970-01-01"]
# test: cast (timestamp as timestamp)
select cast (timestamp '1970-01-01 00:00:00.99' as timestamp)
["1970-01-01 00:00:00.990+00"]
# test: cast (timestamp as interval)
select cast (timestamp '1970-01-01 00:00:00.99' as interval)
{"msg": "interval(❰timestamp❱ ⟵ unsupported argument type"}
# test: cast (timestamp as vector)
select cast (timestamp '1970-01-01 00:00:00.99' as vector)
{"msg": "vector(❰timestamp❱ ⟵ unsupported argument type"}
# test: cast (timestamp as uuid)
select cast (timestamp '1970-01-01 00:00:00.99' as uuid)
{"msg": "uuid(❰timestamp❱ ⟵ unsupported argument type"}
# test: cast (interval as bool)
select cast (interval '5 days 5 hours' as bool)::type
["bool"]
select cast (interval '5 days 5 hours' as bool)
[true]
# test: cast (interval as int)
select cast (interval '5 days 5 hours' as int)::type
{"msg": "int(❰interval❱ ⟵ unsupported argument type"}
select cast (interval '5 days 5 hours' as int)
{"msg": "int(❰interval❱ ⟵ unsupported argument type"}
# test: cast (interval as double)
select cast (interval '5 days 5 hours' as double)::type
{"msg": "double(❰interval❱ ⟵ unsupported argument type"}
select cast (interval '5 days 5 hours' as double)
{"msg": "double(❰interval❱ ⟵ unsupported argument type"}
# test: cast (interval as string)
select cast (interval '5 days 5 hours' as string)::type
["string"]
select cast (interval '5 days 5 hours' as string)
["5 days 5 hours"]
# test: cast (interval as json)
select cast (interval '5 days 5 hours' as json)::type
["json"]
select cast (interval '5 days 5 hours' as json)
["5 days 5 hours"]
# test: cast (interval as date)
select cast (interval '5 days 5 hours' as date)
{"msg": "date(❰interval❱ ⟵ unsupported argument type"}
# test: cast (interval as timestamp)
select cast (interval '5 days 5 hours' as timestamp)
{"msg": "timestamp(❰interval❱ ⟵ unsupported argument type"}
# test: cast (interval as interval)
select cast (interval '5 days 5 hours' as interval)
["5 days 5 hours"]
# test: cast (interval as vector)
select cast (interval '5 days 5 hours' as vector)
{"msg": "vector(❰interval❱ ⟵ unsupported argument type"}
# test: cast (interval as uuid)
select cast (interval '5 days 5 hours' as uuid)
{"msg": "uuid(❰interval❱ ⟵ unsupported argument type"}
# test: cast (vector as bool)
select cast (vector [1,2,3] as bool)::type
{"msg": "bool(❰vector❱ ⟵ unsupported argument type"}
select cast (vector [1,2,3] as bool)
{"msg": "bool(❰vector❱ ⟵ unsupported argument type"}
# test: cast (vector as int)
select cast (vector [1,2,3] as int)::type
{"msg": "int(❰vector❱ ⟵ unsupported argument type"}
select cast (vector [1,2,3] as int)
{"msg": "int(❰vector❱ ⟵ unsupported argument type"}
# test: cast (vector as double)
select cast (vector [1,2,3] as double)::type
{"msg": "double(❰vector❱ ⟵ unsupported argument type"}
select cast (vector [1,2,3] as double)
{"msg": "double(❰vector❱ ⟵ unsupported argument type"}
# test: cast (vector as string)
select cast (vector [1,2,3] as string)::type
["string"]
select cast (vector [1,2,3] as string)
["[1, 2, 3]"]
# test: cast (vector as json)
select cast (vector [1,2,3] as json)::type
["json"]
select cast (vector [1,2,3] as json)
[[1, 2, 3]]
# test: cast (vector as date)
select cast (vector [1,2,3] as date)
{"msg": "date(❰vector❱ ⟵ unsupported argument type"}
# test: cast (vector as timestamp)
select cast (vector [1,2,3] as timestamp)
{"msg": "timestamp(❰vector❱ ⟵ unsupported argument type"}
# test: cast (vector as interval)
select cast (vector [1,2,3] as interval)
{"msg": "interval(❰vector❱ ⟵ unsupported argument type"}
# test: cast (vector as vector)
select cast (vector [1,2,3] as vector)
[[1, 2, 3]]
# test: cast (vector as uuid)
select cast (vector [1,2,3] as uuid)
{"msg": "uuid(❰vector❱ ⟵ unsupported argument type"}
# test: cast (uuid as bool)
select cast (uuid '00000000-0000-0000-0000-000000000000' as bool)::type
{"msg": "bool(❰uuid❱ ⟵ unsupported argument type"}
select cast (uuid '00000000-0000-0000-0000-000000000000' as bool)
{"msg": "bool(❰uuid❱ ⟵ unsupported argument type"}
# test: cast (uuid as int)
select cast (uuid '00000000-0000-0000-0000-000000000000' as int)::type
{"msg": "int(❰uuid❱ ⟵ unsupported argument type"}
select cast (uuid '00000000-0000-0000-0000-000000000000' as int)
{"msg": "int(❰uuid❱ ⟵ unsupported argument type"}
# test: cast (uuid as double)
select cast (uuid '00000000-0000-0000-0000-000000000000' as double)::type
{"msg": "double(❰uuid❱ ⟵ unsupported argument type"}
select cast (uuid '00000000-0000-0000-0000-000000000000' as double)
{"msg": "double(❰uuid❱ ⟵ unsupported argument type"}
# test: cast (uuid as string)
select cast (uuid '00000000-0000-0000-0000-000000000000' as string)::type
["string"]
select cast (uuid '00000000-0000-0000-0000-000000000000' as string)
["00000000-0000-0000-0000-000000000000"]
# test: cast (uuid as json)
select cast (uuid '00000000-0000-0000-0000-000000000000' as json)::type
["json"]
select cast (uuid '00000000-0000-0000-0000-000000000000' as json)
["00000000-0000-0000-0000-000000000000"]
# test: cast (uuid as date)
select cast (uuid '00000000-0000-0000-0000-000000000000' as date)
{"msg": "date(❰uuid❱ ⟵ unsupported argument type"}
# test: cast (uuid as timestamp)
select cast (uuid '00000000-0000-0000-0000-000000000000' as timestamp)
{"msg": "timestamp(❰uuid❱ ⟵ unsupported argument type"}
# test: cast (uuid as interval)
select cast (uuid '00000000-0000-0000-0000-000000000000' as interval)
{"msg": "interval(❰uuid❱ ⟵ unsupported argument type"}
# test: cast (uuid as vector)
select cast (uuid '00000000-0000-0000-0000-000000000000' as vector)
{"msg": "vector(❰uuid❱ ⟵ unsupported argument type"}
# test: cast (uuid as uuid)
select cast (uuid '00000000-0000-0000-0000-000000000000' as uuid)
["00000000-0000-0000-0000-000000000000"]
# test: cast (null as bool)
select cast (null as bool)::type
["null"]
select cast (null as bool)
[null]
# test: cast (null as int)
select cast (null as int)::type
["null"]
select cast (null as int)
[null]
# test: cast (null as double)
select cast (null as double)::type
["null"]
select cast (null as double)
[null]
# test: cast (null as string)
select cast (null as string)::type
["null"]
select cast (null as string)
[null]
# test: cast (null as json)
select cast (null as json)::type
["json"]
select cast (null as json)
[null]
# test: cast (null as date)
select cast (null as date)
[null]
# test: cast (null as timestamp)
select cast (null as timestamp)
[null]
# test: cast (null as interval)
select cast (null as interval)
[null]
# test: cast (null as vector)
select cast (null as vector)
[null]
# test: cast (null as uuid)
select cast (null as uuid)
[null]
disconnect S0
close E0
