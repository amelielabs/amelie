open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: select (select const)
select (select 0)
[0]
select (select 1234)
[1234]
select (select null)
[null]
select (select "hello")
["hello"]
# test: select (select expr)
select (select 1 + 1)
[2]
select (select 2 * 2)
[4]
select (select 8 * 8)
[64]
select (select 64 / ( 4 + 4 ))
[8]
select (select 64 / 0)
{"msg": "zero division"}
select (select 64 % 0)
{"msg": "zero division"}
# test: select (select [])
select (select [])
[[]]
select (select [1])
[[1]]
select (select [1,2,3])
[[1, 2, 3]]
# test: select (select function())
select system.schemas()
[[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]]
select (select system.schemas())
[[{
  "name": "system",
  "system": true,
  "create": false
}, {
  "name": "public",
  "system": true,
  "create": true
}]]
# test: select (select {})
select (select {})
[{}]
select (select {"a": 1})
[{
  "a": 1
}]
select (select {"a": 1, "b": null})
[{
  "a": 1,
  "b": null
}]
# test: select (select *) from table
create table test (id int primary key)
insert into test values (1)
insert into test values (2)
insert into test values (3)
select (select *) from test
[1, 2, 3]
# test: select (select target.*) from table
explain select (select test.*) from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      10    # public.test (primary)",
      "02": "set                 1      1      0     ",
      "03": "table_readi32       2      0      0     ",
      "04": "push                2      0      0     ",
      "05": "set_add             1      0      0     ",
      "06": "set_result          2      1      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             0      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "result              0      0      0     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select (select test.*) from test
[1, 2, 3]
# test: select (select alias.*) from table
select (select t.*) from test t
[1, 2, 3]
select (select t.*) from test
{"msg": "select (select ❰t.*❱ ⟵ target not found"}
select (select t) from test t
{"msg": "select (select ❰t❱ ⟵ column t.t not found"}
# test: select (select target.column) from table
explain select (select test.id) from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      10    # public.test (primary)",
      "02": "set                 1      1      0     ",
      "03": "table_readi32       2      0      0     ",
      "04": "push                2      0      0     ",
      "05": "set_add             1      0      0     ",
      "06": "set_result          2      1      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             0      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "result              0      0      0     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select (select test.id) from test
[1, 2, 3]
select (select id) from test
[1, 2, 3]
# test: select (select alias.column) from table
explain select (select t.id) from test t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      10    # public.test (primary)",
      "02": "set                 1      1      0     ",
      "03": "table_readi32       2      0      0     ",
      "04": "push                2      0      0     ",
      "05": "set_add             1      0      0     ",
      "06": "set_result          2      1      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             0      0      0     ",
      "09": "table_next          0      2      0     ",
      "10": "table_close         0      0      0     ",
      "11": "result              0      0      0     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
select (select t.id) from test
{"msg": "select (select ❰t.id❱ ⟵ target not found"}
select (select t.id) from test t
[1, 2, 3]
drop table test
# test: select (select target.path) from table
create table test (id serial primary key, data json)
insert into test (data) values({"data": {"id": 1}})
insert into test (data) values({"data": {"id": 2}})
insert into test (data) values({"data": {"id": 3}})
select (select *) from test
{"msg": "select (❰select❱ ⟵ subquery must return only one column"}
select (select test) from test
{"msg": "select (select ❰test❱ ⟵ column test.test not found"}
select (select test.data) from test
[{
  "data": {
    "id": 1
  }
}, {
  "data": {
    "id": 2
  }
}, {
  "data": {
    "id": 3
  }
}]
select (select test.data.data) from test
[{
  "id": 1
}, {
  "id": 2
}, {
  "id": 3
}]
select (select test.data.data.id) from test
[1, 2, 3]
# test: select (select alias.path) from table
select (select t) from test t
{"msg": "select (select ❰t❱ ⟵ column t.t not found"}
select (select t.data) from test t
[{
  "data": {
    "id": 1
  }
}, {
  "data": {
    "id": 2
  }
}, {
  "data": {
    "id": 3
  }
}]
select (select t.data.data) from test t
[{
  "id": 1
}, {
  "id": 2
}, {
  "id": 3
}]
select (select t.data.data.id) from test t
[1, 2, 3]
drop table test
# test: select from (select expr)
select * from (select 0) t
[0]
select * from (select null) t
[null]
select * from (select 1, 2) t
[[1, 2]]
# test: select * from (select from table)
create table test (id int primary key)
insert into test values (1)
insert into test values (2)
insert into test values (3)
select * from (select * from test)
{"msg": "select * from (select * from test) ⟵ subquery must have an alias"}
select * from (select * from test) t
[1, 2, 3]
explain select * from (select * from test) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "set                 1      1      0     ",
      "06": "ref                 2      0      0     ",
      "07": "store_open          0      2      12    ",
      "08": "store_read          3      0      0     ",
      "09": "push                3      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "store_next          0      8      0     ",
      "12": "store_close         0      1      0     ",
      "13": "content             1      -      -     ",
      "14": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_add             0      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "result              0      0      0     ",
      "08": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
# test: select target.* from (select from table)
select test.* from (select * from test)
{"msg": "select test.* from (select * from test) ⟵ subquery must have an alias"}
select test.* from (select * from test) test
[1, 2, 3]
select test from (select * from test)
{"msg": "select test from (select * from test) ⟵ subquery must have an alias"}
# test: select alias.* from (select from table)
select alias from (select * from test) alias
{"msg": "select ❰alias❱ ⟵ column alias.alias not found"}
select alias.* from (select * from test) alias
[1, 2, 3]
select alias.* from (select test.* from test) alias
[1, 2, 3]
select alias.* from (select x.* from test x) alias
[1, 2, 3]
select alias.* from (select alias.* from test alias) alias
[1, 2, 3]
select alias.* from (select * from test) alias
[1, 2, 3]
drop table test
create table test (id serial primary key, obj json)
insert into test (obj) values({"data": {"id": 1}})
insert into test (obj) values({"data": {"id": 2}})
insert into test (obj) values({"data": {"id": 3}})
# test: select target.path from (select from table)
select obj from (select * from test)
{"msg": "select obj from (select * from test) ⟵ subquery must have an alias"}
select * from (select * from test) alias
[[0, {
  "data": {
    "id": 1
  }
}], [1, {
  "data": {
    "id": 2
  }
}], [2, {
  "data": {
    "id": 3
  }
}]]
select * from (select * from test) alias
[[0, {
  "data": {
    "id": 1
  }
}], [1, {
  "data": {
    "id": 2
  }
}], [2, {
  "data": {
    "id": 3
  }
}]]
select obj from (select * from test) alias
[{
  "data": {
    "id": 1
  }
}, {
  "data": {
    "id": 2
  }
}, {
  "data": {
    "id": 3
  }
}]
select alias.* from (select * from test) alias
[[0, {
  "data": {
    "id": 1
  }
}], [1, {
  "data": {
    "id": 2
  }
}], [2, {
  "data": {
    "id": 3
  }
}]]
select alias.obj.data from (select * from test) alias
[{
  "id": 1
}, {
  "id": 2
}, {
  "id": 3
}]
select alias.obj.data.id from (select * from test) alias
[1, 2, 3]
drop table test
# test: select (select from table)
create table test (id int primary key)
insert into test values (1)
insert into test values (2)
insert into test values (3)
explain select (select * from test)
[{
  "bytecode": {
    "frontend": {
      "00": "set                 0      1      0     ",
      "01": "set                 1      1      0     ",
      "02": "table_open          0      0      7     # public.test (primary)",
      "03": "table_readi32       2      0      0     ",
      "04": "push                2      0      0     ",
      "05": "set_add             1      0      0     ",
      "06": "table_next          0      3      0     ",
      "07": "table_close         0      0      0     ",
      "08": "set_result          2      1      0     ",
      "09": "push                2      0      0     ",
      "10": "set_add             0      0      0     ",
      "11": "content             0      -      -     ",
      "12": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro_exclusive"]]
}]
select (select * from test)
[1]
# test: select (select from table) no result
select (select * from test where false)
[null]
# test: select (select from table) from table (more then one result)
explain select (select * from test) from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     1      0      13    # public.test (primary)",
      "02": "set                 1      1      0     ",
      "03": "table_open          0      20     8     # public.test (primary)",
      "04": "table_readi32       2      0      0     ",
      "05": "push                2      0      0     ",
      "06": "set_add             1      0      0     ",
      "07": "table_next          0      4      0     ",
      "08": "table_close         0      0      0     ",
      "09": "set_result          2      1      0     ",
      "10": "push                2      0      0     ",
      "11": "set_add             0      0      0     ",
      "12": "table_next          1      2      0     ",
      "13": "table_close         1      0      0     ",
      "14": "result              0      0      0     ",
      "15": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro_exclusive"]]
}]
select (select * from test) from test
[1, 1, 1]
select (select * from test t) from test
[1, 1, 1]
# test: select (select from table) from table (one result)
select (select * from test t limit 1) from test
[1, 1, 1]
explain select (select i.* from test i limit 1) from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     1      0      17    # public.test (primary)",
      "02": "set                 1      1      0     ",
      "03": "int                 2      -      0     # 1",
      "04": "table_open          0      20     12    # public.test (primary)",
      "05": "jmp                 7      0      0     ",
      "06": "jmp                 12     0      0     ",
      "07": "cjltd               2      6      0     ",
      "08": "table_readi32       3      0      0     ",
      "09": "push                3      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "table_next          0      7      0     ",
      "12": "table_close         0      0      0     ",
      "13": "set_result          2      1      0     ",
      "14": "push                2      0      0     ",
      "15": "set_add             0      0      0     ",
      "16": "table_next          1      2      0     ",
      "17": "table_close         1      0      0     ",
      "18": "result              0      0      0     ",
      "19": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro_exclusive"]]
}]
# test: select (select from table) from table #2
explain select (select i.* from test i where test.id = i.id) from test
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     1      0      18    # public.test (primary)",
      "02": "set                 1      1      0     ",
      "03": "table_readi32       2      1      0     ",
      "04": "push                2      0      0     ",
      "05": "table_openl         0      20     13    # public.test (primary)",
      "06": "table_readi32       2      1      0     ",
      "07": "table_readi32       3      0      0     ",
      "08": "equii               4      2      3     ",
      "09": "jntr                13     4      0     ",
      "10": "table_readi32       2      0      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "table_close         0      0      0     ",
      "14": "set_result          2      1      0     ",
      "15": "push                2      0      0     ",
      "16": "set_add             0      0      0     ",
      "17": "table_next          1      2      0     ",
      "18": "table_close         1      0      0     ",
      "19": "result              0      0      0     ",
      "20": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro_exclusive"]]
}]
select (select i.* from test i where test.id = i.id) from test
[1, 2, 3]
# test: select (select from table) from table #3
create table a (id serial primary key, data int default 0)
create table b (id serial primary key, data int default 1)
insert into a () values (), (), ()
insert into b () values (), (), ()
select (select * from b where a.id = b.id) from a
{"msg": "select (❰select❱ ⟵ subquery must return only one column"}
select (select a.* from b where a.id = b.id) from a
{"msg": "select (❰select❱ ⟵ subquery must return only one column"}
select (select b.* from b where a.id = b.id)::type from a
{"msg": "select (❰select❱ ⟵ subquery must return only one column"}
select (select a.id from b where a.id = b.id) from a
[0, 1, 2]
select (select b.id from b where a.id = b.id)::type from a
["int", "int", "int"]
# test: select from table where (select from table)
explain select * from a where (select true from b where a.id = b.id)
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.a",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_open_part     0      0      22    # public.a (primary)",
      "02": "set                 1      1      0     ",
      "03": "table_readi64       2      0      0     ",
      "04": "push                2      0      0     ",
      "05": "table_openl         1      17     13    # public.b (primary)",
      "06": "table_readi64       2      0      0     ",
      "07": "table_readi64       3      1      0     ",
      "08": "equii               4      2      3     ",
      "09": "jntr                13     4      0     ",
      "10": "bool                2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_add             1      0      0     ",
      "13": "table_close         1      0      0     ",
      "14": "set_result          2      1      0     ",
      "15": "jntr                21     2      0     ",
      "16": "table_readi64       1      0      0     ",
      "17": "push                1      0      0     ",
      "18": "table_readi32       1      0      1     ",
      "19": "push                1      0      0     ",
      "20": "set_add             0      0      0     ",
      "21": "table_next          0      2      0     ",
      "22": "table_close         0      0      0     ",
      "23": "result              0      0      0     ",
      "24": "ret                 0      0      0     "
    }
  },
  "access": [["public.a", "ro"], ["public.b", "ro_exclusive"]]
}]
select * from a where (select true from b where a.id = b.id)
[[0, 0], [1, 0], [2, 0]]
# test: select from (select from (select from table))
select t.x from (select z.id as x from (select id from test) z) t
[1, 2, 3]
explain select t.x from (select z.id as x from (select id from test) z) t
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "set                 1      1      0     ",
      "06": "ref                 2      0      0     ",
      "07": "store_open          0      2      12    ",
      "08": "store_read          3      0      0     ",
      "09": "push                3      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "store_next          0      8      0     ",
      "12": "store_close         0      1      0     ",
      "13": "set                 3      1      0     ",
      "14": "ref                 4      1      0     ",
      "15": "store_open          0      4      20    ",
      "16": "store_read          5      0      0     ",
      "17": "push                5      0      0     ",
      "18": "set_add             3      0      0     ",
      "19": "store_next          0      16     0     ",
      "20": "store_close         0      1      0     ",
      "21": "content             3      -      -     ",
      "22": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      1      0     ",
      "01": "table_open_part     0      0      6     # public.test (primary)",
      "02": "table_readi32       1      0      0     ",
      "03": "push                1      0      0     ",
      "04": "set_add             0      0      0     ",
      "05": "table_next          0      2      0     ",
      "06": "table_close         0      0      0     ",
      "07": "result              0      0      0     ",
      "08": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "ro"]]
}]
# test: select from (select from), (select from)
select * from (select * from a) a, (select * from a) b
[[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 2, 0], [1, 0, 0, 0], [1, 0, 1, 0], [1, 0, 2, 0], [2, 0, 0, 0], [2, 0, 1, 0], [2, 0, 2, 0]]
drop table a
drop table b
drop table test
disconnect S0
close E0
