open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: alter table statement parsing
alter
{"code": 1, "msg": "ALTER <USER|SCHEMA|TABLE|INDEX|VIEW> expected"}
alter table
{"code": 1, "msg": "ALTER TABLE <name> expected"}
alter table 123
{"code": 1, "msg": "ALTER TABLE <name> expected"}
alter table if
{"code": 1, "msg": "IF <EXISTS> expected"}
alter table if ex
{"code": 1, "msg": "IF <EXISTS> expected"}
alter table if exists
{"code": 1, "msg": "ALTER TABLE <name> expected"}
alter table if exists 123
{"code": 1, "msg": "ALTER TABLE <name> expected"}
# test: alter table if exists
alter table test rename test2
{"code": 1, "msg": "table 'test': not exists"}
alter table if exists test rename test2
# test: alter table no command
create table test (id int primary key)
alter table test
{"code": 1, "msg": "ALTER TABLE <RENAME> expected"}
# test: rename
alter table test rename
{"code": 1, "msg": "ALTER TABLE RENAME <name> expected"}
alter table test rename to
{"code": 1, "msg": "ALTER TABLE RENAME <name> expected"}
alter table test rename asf junk
{"code": 1, "msg": "unknown command: <junk>"}
alter table test rename to abc
select *.schema, *.name from system.tables()
[["public", "abc"]]
# test: rename table exists
create table test (id int primary key)
alter table abc rename to test
{"code": 1, "msg": "table 'test': already exists"}
drop table test
# test: rename conflicting view exists
create view test as select 1
alter table abc rename to test
{"code": 1, "msg": "view <test> with the same name exists"}
drop view test
# test: rename schema not exists
alter table abc rename to test.test
{"code": 1, "msg": "schema 'test': not exists"}
# test: rename schema system
alter table abc rename to system.test
{"code": 1, "msg": "system schema <system> cannot be used to create objects"}
# test: rename schema
alter table abc rename to public.test
select *.schema, *.name from system.tables()
[["public", "test"]]
create schema test
alter table public.test rename to test.test
select *.schema, *.name from system.tables()
[["test", "test"]]
drop table test.test
# test: set serial
create table test (id int primary key serial, data int default 0)
insert into test () values ()
insert into test () values ()
insert into test () values ()
select * from test
[[0, 0], [1, 0], [2, 0]]
alter table test set
{"code": 1, "msg": "ALTER TABLE SET <SERIAL> expected"}
alter table test set serial
{"code": 1, "msg": "ALTER TABLE SET SERIAL <TO> expected"}
alter table test set serial 123
{"code": 1, "msg": "ALTER TABLE SET SERIAL <TO> expected"}
alter table test set serial =
{"code": 1, "msg": "ALTER TABLE SET SERIAL <TO> expected"}
alter table test set serial to
{"code": 1, "msg": "ALTER TABLE SET SERIAL TO <integer> expected"}
alter table test set serial to "123"
{"code": 1, "msg": "ALTER TABLE SET SERIAL TO <integer> expected"}
alter table test set serial to 0
insert  into test () values ()
{"code": 1, "msg": "index 'primary': unique key constraint violation"}
insert  into test () values ()
{"code": 1, "msg": "index 'primary': unique key constraint violation"}
insert  into test () values ()
{"code": 1, "msg": "index 'primary': unique key constraint violation"}
insert  into test () values ()
select * from test
[[0, 0], [1, 0], [2, 0], [3, 0]]
alter table test set serial to 0
insert into test () values ()
{"code": 1, "msg": "index 'primary': unique key constraint violation"}
select * from test
[[0, 0], [1, 0], [2, 0], [3, 0]]
drop table test
# test: set serial if exists
alter table if exists test set serial to 0
alter table test set serial to 0
{"code": 1, "msg": "table 'test': not exists"}
disconnect S0
close E0
