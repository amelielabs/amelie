env_open E0
connect E0 S0
connect: on_connect
# test: insert statement parsing
insert
query: on_error
{"code": 1, "msg": "INSERT <INTO> expected"}
insert junk
query: on_error
{"code": 1, "msg": "INSERT <INTO> expected"}
insert into
query: on_error
{"code": 1, "msg": "INSERT INTO <name> expected"}
insert into "name"
query: on_error
{"code": 1, "msg": "INSERT INTO <name> expected"}
insert into 1
query: on_error
{"code": 1, "msg": "INSERT INTO <name> expected"}
insert into name
query: on_error
{"code": 1, "msg": "table 'name': not exists"}
create table test (id int primary key)
insert into test
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values(
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values(,
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values(123
query: on_error
{"code": 1, "msg": "expected ')'"}
insert into test values(123,
query: on_error
{"code": 1, "msg": "bad row value"}
insert into test values(123,)
query: on_error
{"code": 1, "msg": "bad row value"}
# test: insert type validate
insert into test values ("123")
query: on_error
{"code": 1, "msg": "column <id>: does not match data type"}
insert into test values (123, 123)
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
select * from test
# test: insert
insert into test values (123)
# test: primary unique key constraint violation
insert into test values (123)
query: on_error
{"code": 1, "msg": "unique key constraint violation"}
# test: replace
replace into test values (123)
# test: insert schema
drop table test
create schema test
create table test.test (id int primary key)
insert into test values (123)
query: on_error
{"code": 1, "msg": "table 'test': not exists"}
insert into test.test values (123)
select * from test
query: on_error
{"code": 1, "msg": "FROM <test> table or view is not found"}
select * from test.test
[123]
drop table test.test
# test: insert compound key
create table test (id int, id2 int, primary key (id, id2))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "", "asc": true}, {"column": 1, "type": 2, "path": "", "asc": true}]
insert into test values (123)
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
insert into test values (1, 2, 3)
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
insert into test values (1, 2)
select * from test
[1, 2]
drop table test
# test: insert nested key
create table test (obj object, primary key (obj.id int))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "id", "asc": true}]
insert into test values (123)
query: on_error
{"code": 1, "msg": "column <obj>: does not match data type"}
insert into test values ( {"id": 48} )
select * from test
[{"id": 48}]
select obj.id from test
48
drop table test
# test: insert nested key #2
create table test (obj object, primary key (obj.data.id int))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "data.id", "asc": true}]
insert into test values (123)
query: on_error
{"code": 1, "msg": "column <obj>: does not match data type"}
insert into test values ( {"id": 48} )
query: on_error
{"code": 1, "msg": "column obj: key path <data.id> is not found"}
insert into test values ( {"data": []} )
query: on_error
{"code": 1, "msg": "expected data type 'map', but got 'array'"}
insert into test values ( {"data": {}} )
query: on_error
{"code": 1, "msg": "column obj: key path <data.id> is not found"}
insert into test values ( {"data": {"id": "48"} } )
query: on_error
{"code": 1, "msg": "column obj: key path <data.id> does not match data type"}
insert into test values ( {"data": {"id": 48} } )
select * from test
[{"data": {"id": 48}}]
drop table test
# test: insert nested key compound
create table test (obj object, primary key (obj.data.id int, obj.id int))
select def.key from system.tables() where name = "test"
[{"column": 0, "type": 2, "path": "data.id", "asc": true}, {"column": 0, "type": 2, "path": "id", "asc": true}]
insert into test values ( {"data": {"id": 48} } )
query: on_error
{"code": 1, "msg": "column obj: key path <id> is not found"}
insert into test values ( {"data": {"id": 48}, "id": 1 } )
select * from test
[{"data": {"id": 48}, "id": 1}]
drop table test
# test: insert values clause can be omitted
create table test (id int primary key, data string)
insert into test values (1, "hello")
insert into test (2, "hello")
select * from test
[1, "hello"]
[2, "hello"]
drop table test
# test: insert one column expr
create table test (id string primary key)
insert into test values ("hello")
insert into test ("world")
insert into test "again"
select * from test
["again"]
["hello"]
["world"]
drop table test
# test: insert one column expr #2
create table test (id string primary key, data int)
insert into test "again"
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
insert into test "again", 2
query: on_error
{"code": 1, "msg": "row has incorrect number of columns"}
insert into test ("again", 2)
select * from test
["again", 2]
drop table test
# test: insert one column expr #3
create table test (id int primary key)
insert into test 1,2,3
select * from test
[1]
[2]
[3]
drop table test
# test: insert map
create table test (obj object, primary key(obj.id int))
insert into test values ({"id": 48})
insert into test ({"id": 49})
insert into test {"id": 1}
insert into test {"id": 2}
insert into test {"id": 3}
select * from test
[{"id": 1}]
[{"id": 2}]
[{"id": 3}]
[{"id": 48}]
[{"id": 49}]
select obj.id from test where obj.id >= 3
3
48
49
drop table test
disconnect S0
env_close E0
