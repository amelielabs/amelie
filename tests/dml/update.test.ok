open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: update statement parsing
create table test(id int primary key)
update
{"msg": "update ⟵ target name expected"}
update;
{"msg": "update❰;❱ ⟵ target name expected"}
update 1;
{"msg": "update ❰1❱ ⟵ target name expected"}
update "name"
{"msg": "update ❰\"name\"❱ ⟵ target name expected"}
update test
{"msg": "update test ⟵ SET expected"}
update test "path"
{"msg": "update test ❰\"path\"❱ ⟵ SET expected"}
update test 1
{"msg": "update test ❰1❱ ⟵ SET expected"}
update test path
{"msg": "update test path ⟵ SET expected"}
update test set path
{"msg": "update test set path ⟵ = expected"}
update test set path /
{"msg": "update test set path ❰/❱ ⟵ = expected"}
update test set path =
{"msg": "update test set path = ⟵ bad expression"}
update test set path = expr
{"msg": "update test set ❰path❱ ⟵ column test.path not found"}
update test set id = id expr
{"msg": "update test set id = id ❰expr❱ ⟵ ; expected"}
drop table test
# test: update
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
explain update test set data = data + 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "ret                 0      0      0     "
    },
    "backend": {
      "00": "table_open_part     0      0      9     # public.test (primary)",
      "01": "int                 0      -      0     # 1",
      "02": "push                0      0      0     ",
      "03": "table_readi32       0      0      1     ",
      "04": "int                 1      -      0     # 1",
      "05": "addii               2      0      1     ",
      "06": "push                2      0      0     ",
      "07": "update              0      1      0     ",
      "08": "table_next          0      1      0     ",
      "09": "table_close         0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
update test set data = data + 1
select * from test
[[0, 4], [1, 3], [2, 2]]
drop table test
# test: update default (null)
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
update test set data = default
select * from test
[[0, null], [1, null], [2, null]]
drop table test
# test: update default
create table test(id int primary key, data int default 123)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
update test set data = default
select * from test
[[0, 123], [1, 123], [2, 123]]
drop table test
# test: update schema
create schema test
create table test.test(id int primary key, data int)
insert into test.test values (0, 3)
insert into test.test values (1, 2)
insert into test.test values (2, 1)
explain update test.test set data = data + 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # test.test",
      "01": "recv                0      0      0     ",
      "02": "ret                 0      0      0     "
    },
    "backend": {
      "00": "table_open_part     0      0      9     # test.test (primary)",
      "01": "int                 0      -      0     # 1",
      "02": "push                0      0      0     ",
      "03": "table_readi32       0      0      1     ",
      "04": "int                 1      -      0     # 1",
      "05": "addii               2      0      1     ",
      "06": "push                2      0      0     ",
      "07": "update              0      1      0     ",
      "08": "table_next          0      1      0     ",
      "09": "table_close         0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  },
  "access": [["test.test", "rw"]]
}]
update test.test set data = data + 1
select * from test.test
[[0, 4], [1, 3], [2, 2]]
drop table test.test
drop schema test
# test: update multiple ops
create table test(id int primary key, a int, b int)
insert into test values (0, 3, 3)
insert into test values (1, 2, 2)
insert into test values (2, 1, 1)
explain update test set a = a + 1, b = b - 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "ret                 0      0      0     "
    },
    "backend": {
      "00": "table_open_part     0      0      15    # public.test (primary)",
      "01": "int                 0      -      0     # 1",
      "02": "push                0      0      0     ",
      "03": "table_readi32       0      0      1     ",
      "04": "int                 1      -      0     # 1",
      "05": "addii               2      0      1     ",
      "06": "push                2      0      0     ",
      "07": "int                 0      -      0     # 2",
      "08": "push                0      0      0     ",
      "09": "table_readi32       0      0      2     ",
      "10": "int                 1      -      0     # 1",
      "11": "subii               2      0      1     ",
      "12": "push                2      0      0     ",
      "13": "update              0      2      0     ",
      "14": "table_next          0      1      0     ",
      "15": "table_close         0      0      0     ",
      "16": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
update test set a = a + 1, b = b - 1
select * from test
[[0, 4, 2], [1, 3, 1], [2, 2, 0]]
drop table test
# test: update same column twice
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
update test set data = data + 1, data = data + 1
{"msg": "update test set ❰data❱ ⟵ column test.data is redefined in UPDATE"}
select * from test
[[0, 3], [1, 2], [2, 1]]
drop table test
# test: update json
create table test(id int primary key, data json)
insert into test values (0, {"id": 48})
insert into test values (1, {"id": 49})
insert into test values (2, {"id": 50})
update test set data = {"id": data.id::int + 1}
explain update test set data = {"id": data.id::int + 1}
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "ret                 0      0      0     "
    },
    "backend": {
      "00": "table_open_part     0      0      17    # public.test (primary)",
      "01": "int                 0      -      0     # 1",
      "02": "push                0      0      0     ",
      "03": "string              0      20     0     # id",
      "04": "push                0      0      0     ",
      "05": "table_readj         0      0      1     ",
      "06": "string              1      23     0     # id",
      "07": "dotjs               2      0      1     ",
      "08": "push                2      0      0     ",
      "09": "call                0      -      1     # public.int()",
      "10": "int                 1      -      0     # 1",
      "11": "addii               2      0      1     ",
      "12": "push                2      0      0     ",
      "13": "json_obj            0      2      0     ",
      "14": "push                0      0      0     ",
      "15": "update              0      1      0     ",
      "16": "table_next          0      1      0     ",
      "17": "table_close         0      0      0     ",
      "18": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
select * from test
[[0, {
  "id": 49
}], [1, {
  "id": 50
}], [2, {
  "id": 51
}]]
drop table test
# test: update json rewrite
create table test(id serial primary key, data json)
insert into test (data) values ({"id": 48})
insert into test (data) values ({"id": 49})
insert into test (data) values ({"id": 50})
update test set data = {"id": id}
select * from test
[[0, {
  "id": 0
}], [1, {
  "id": 1
}], [2, {
  "id": 2
}]]
drop table test
# test: update json rewrite #2
create table test(id serial primary key, data json)
insert into test (data) values ({"id": 48})
insert into test (data) values ({"id": 49})
insert into test (data) values ({"id": 50})
update test set data = [id, data.id]
select * from test
[[0, [0, 48]], [1, [1, 49]], [2, [2, 50]]]
drop table test
# test: update json path
create table test(id int primary key, data json)
insert into test values (0, {"id": 48})
insert into test values (1, {"id": 49})
insert into test values (2, {"id": 50})
update test set id.path = 0
{"msg": "update test set ❰id.path❱ ⟵ column test.id used as a part of a key"}
explain update test set data.id = data.id::int + 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "ret                 0      0      0     "
    },
    "backend": {
      "00": "table_open_part     0      0      19    # public.test (primary)",
      "01": "int                 0      -      0     # 1",
      "02": "push                0      0      0     ",
      "03": "table_readj         0      0      1     ",
      "04": "push                0      0      0     ",
      "05": "string              0      20     0     # id",
      "06": "push                0      0      0     ",
      "07": "table_readj         0      0      1     ",
      "08": "string              1      23     0     # id",
      "09": "dotjs               2      0      1     ",
      "10": "push                2      0      0     ",
      "11": "call                0      -      1     # public.int()",
      "12": "int                 1      -      0     # 1",
      "13": "addii               2      0      1     ",
      "14": "push                2      0      0     ",
      "15": "call                0      -      3     # public.set()",
      "16": "push                0      0      0     ",
      "17": "update              0      1      0     ",
      "18": "table_next          0      1      0     ",
      "19": "table_close         0      0      0     ",
      "20": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
update test set data.id = data.id::int + 1
select * from test
[[0, {
  "id": 49
}], [1, {
  "id": 50
}], [2, {
  "id": 51
}]]
update test set data.data = []
select * from test
[[0, {
  "id": 49,
  "data": []
}], [1, {
  "id": 50,
  "data": []
}], [2, {
  "id": 51,
  "data": []
}]]
update test set data.data = data.data::append(1,2,3)
select * from test
[[0, {
  "id": 49,
  "data": [1, 2, 3]
}], [1, {
  "id": 50,
  "data": [1, 2, 3]
}], [2, {
  "id": 51,
  "data": [1, 2, 3]
}]]
update test set data.nested = {}
update test set data.nested.list = data.data::append(1,2,3)
select data from test
[{
  "id": 49,
  "data": [1, 2, 3],
  "nested": {
    "list": [1, 2, 3, 1, 2, 3]
  },
  "nested": [1, 2, 3, 1, 2, 3]
}, {
  "id": 50,
  "data": [1, 2, 3],
  "nested": {
    "list": [1, 2, 3, 1, 2, 3]
  },
  "nested": [1, 2, 3, 1, 2, 3]
}, {
  "id": 51,
  "data": [1, 2, 3],
  "nested": {
    "list": [1, 2, 3, 1, 2, 3]
  },
  "nested": [1, 2, 3, 1, 2, 3]
}]
# test: update json path default (unsupported)
update test set data.nested.list = default
{"msg": "update test set data.nested.list = ❰default❱ ⟵ DEFAULT cannot be used this way"}
drop table test
# test: update key
create table test(id int primary key)
insert into test values (0)
insert into test values (1)
insert into test values (2)
update test set id = id + 1
{"msg": "update test set ❰id❱ ⟵ column test.id used as a part of a key"}
select * from test
[0, 1, 2]
drop table test
# test: update point-lookup
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
explain update test set data = data + 1 where id = 0
[{
  "bytecode": {
    "frontend": {
      "00": "send_lookup         0      -      -     # public.test",
      "01": "recv                0      0      0     ",
      "02": "ret                 0      0      0     "
    },
    "backend": {
      "00": "int                 0      -      0     # 0",
      "01": "push                0      0      0     ",
      "02": "table_open_partl    0      0      14    # public.test (primary)",
      "03": "table_readi32       0      0      0     ",
      "04": "int                 1      -      0     # 0",
      "05": "equii               2      0      1     ",
      "06": "jntr                14     2      0     ",
      "07": "int                 0      -      0     # 1",
      "08": "push                0      0      0     ",
      "09": "table_readi32       0      0      1     ",
      "10": "int                 1      -      0     # 1",
      "11": "addii               2      0      1     ",
      "12": "push                2      0      0     ",
      "13": "update              0      1      0     ",
      "14": "table_close         0      0      0     ",
      "15": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
update test set data = data + 1 where id = 0
update test set data = data + 1 where id = 1
update test set data = data + 1 where id = 2
select * from test
[[0, 4], [1, 3], [2, 2]]
drop table test
# test: update range scan
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, 1)
explain update test set data = data + 1 where id >= 1
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "ret                 0      0      0     "
    },
    "backend": {
      "00": "int                 0      -      0     # 1",
      "01": "push                0      0      0     ",
      "02": "table_open_part     0      0      15    # public.test (primary)",
      "03": "table_readi32       0      0      0     ",
      "04": "int                 1      -      0     # 1",
      "05": "gteii               2      0      1     ",
      "06": "jntr                14     2      0     ",
      "07": "int                 0      -      0     # 1",
      "08": "push                0      0      0     ",
      "09": "table_readi32       0      0      1     ",
      "10": "int                 1      -      0     # 1",
      "11": "addii               2      0      1     ",
      "12": "push                2      0      0     ",
      "13": "update              0      1      0     ",
      "14": "table_next          0      3      0     ",
      "15": "table_close         0      0      0     ",
      "16": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
update test set data = data + 1 where id > 2
select * from test
[[0, 3], [1, 2], [2, 1]]
update test set data = data + 1 where id >= 2
select * from test
[[0, 3], [1, 2], [2, 2]]
update test set data = data + 1 where id >= 1
select * from test
[[0, 3], [1, 3], [2, 3]]
drop table test
# test: update null
create table test(id int primary key, data int)
insert into test values (0, 3)
insert into test values (1, 2)
insert into test values (2, null)
update test set data = data + 1
select * from test
[[0, 4], [1, 3], [2, null]]
update test set data = id where data is null
select * from test
[[0, 4], [1, 3], [2, 2]]
drop table test
# test: update set null
create table test(id int primary key, data int)
insert into test values (0, 1)
update test set data = data + 1
select * from test
[[0, 2]]
update test set data = null
select * from test
[[0, null]]
drop table test
# test: update set null (not null)
create table test(id int primary key, data int not null)
insert into test values (0, 1)
update test set data = data + 1
select * from test
[[0, 2]]
update test set data = null
{"msg": "column <data> cannot be NULL"}
select * from test
[[0, 2]]
drop table test
# test: update returning
create table test(id int primary key, data int)
insert into test values (0, 0)
insert into test values (1, 0)
insert into test values (2, 0)
explain update test set data = data + 1 returning *
[{
  "bytecode": {
    "frontend": {
      "00": "send_all            0      -      0     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "union_recv          0      -1     -1    ",
      "05": "content             0      -      -     ",
      "06": "ret                 0      0      0     "
    },
    "backend": {
      "00": "set                 0      2      0     ",
      "01": "table_open_part     0      0      15    # public.test (primary)",
      "02": "int                 1      -      0     # 1",
      "03": "push                1      0      0     ",
      "04": "table_readi32       1      0      1     ",
      "05": "int                 2      -      0     # 1",
      "06": "addii               3      1      2     ",
      "07": "push                3      0      0     ",
      "08": "update              0      1      0     ",
      "09": "table_readi32       1      0      0     ",
      "10": "push                1      0      0     ",
      "11": "table_readi32       1      0      1     ",
      "12": "push                1      0      0     ",
      "13": "set_add             0      0      0     ",
      "14": "table_next          0      2      0     ",
      "15": "table_close         0      0      0     ",
      "16": "result              0      0      0     ",
      "17": "ret                 0      0      0     "
    }
  },
  "access": [["public.test", "rw"]]
}]
update test set data = data + 1 returning *
[[0, 1], [1, 1], [2, 1]]
update test set data = data + 1 returning *
[[0, 2], [1, 2], [2, 2]]
update test set data = data + 1 returning *
[[0, 3], [1, 3], [2, 3]]
select * from test
[[0, 3], [1, 3], [2, 3]]
drop table test
# test: update column (int8)
create table test (id int primary key, data i8)
insert into test values (1, 123), (2, 255), (3, 256)
update test set data = data + 1
select * from test
[[1, 124], [2, 0], [3, 1]]
drop table test
# test: update column (int16)
create table test (id int primary key, data i16)
insert into test values (1, 123), (2, 256), (3, -32768)
update test set data = data + 1
select * from test
[[1, 124], [2, 257], [3, -32767]]
drop table test
# test: update column (int32)
create table test (id int primary key, data i32)
insert into test values (1, 123), (2, 256), (3, -32768)
update test set data = data + 1
select * from test
[[1, 124], [2, 257], [3, -32767]]
drop table test
# test: update column (int64)
create table test (id int primary key, data i64)
insert into test values (1, 123), (2, 256), (3, -32768)
update test set data = data + 1
select * from test
[[1, 124], [2, 257], [3, -32767]]
drop table test
# test: update column (float)
create table test (id int primary key, data float)
insert into test values (1, 123.32), (2, 3.14)
update test set data = data + 0.01
select * from test
[[1, 123.33], [2, 3.15]]
drop table test
# test: update column (double)
create table test (id int primary key, data double)
insert into test values (1, 123.32), (2, 3.14)
update test set data = data + 0.01
select * from test
[[1, 123.33], [2, 3.15]]
drop table test
# test: update column (text)
create table test (id int primary key, data text)
insert into test values (1, 'hello')
update test set data = data || " world"
update test set data = data || " world"
update test set data = data || " world"
select data from test
["hello world world world"]
drop table test
# test: update column (json)
create table test (id int primary key, data json)
insert into test values (1, null)
update test set data = data::append(1,2,3)
select * from test
[[1, null]]
drop table test
# test: update column (timestamp)
create table test (id int primary key, ts timestamp)
insert into test values (0, "1970-01-01 01:12:59.909090")
update test set ts = ts + interval '5 days'
select * from test
[[0, "1970-01-06 01:12:59.909090+00"]]
drop table test
# test: update column (interval)
create table test (id int primary key, i interval)
insert into test values (0, "1 year 1 day 10 hour")
update test set i = i + interval '5 days'
select * from test
[[0, "1 year 6 days 10 hours"]]
drop table test
# test: update column (date)
create table test (id int primary key, d date)
insert into test values (0, "1970-01-01")
update test set d = d + 5
select * from test
[[0, "1970-01-06"]]
drop table test
# test: update column (vector)
create table test (id int primary key, vec vector)
insert into test values (3, [1.0, 1.1])
update test set vec = vec + [1.0, 1.1]::vector
select * from test
[[3, [2, 2.2]]]
drop table test
# test: update secondary index
create table test (id int primary key, data int, value int)
create index i on test (data)
insert into test values (0, 2, 0)
insert into test values (1, 1, 0)
insert into test values (2, 0, 0)
select * from test
[[0, 2, 0], [1, 1, 0], [2, 0, 0]]
select * from test use index (i)
[[2, 0, 0], [1, 1, 0], [0, 2, 0]]
update test set value = data
select * from test
[[0, 2, 2], [1, 1, 1], [2, 0, 0]]
select * from test use index (i)
[[2, 0, 0], [1, 1, 1], [0, 2, 2]]
# test: update secondary index (key)
update test set data = id
{"msg": "update test set ❰data❱ ⟵ column test.data used as a part of a key"}
drop table test
disconnect S0
close E0
