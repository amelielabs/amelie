open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: create view statement parsing
create view
{"msg": "CREATE VIEW <name> expected"}
create view 123
{"msg": "CREATE VIEW <name> expected"}
create view if
{"msg": "IF <NOT> EXISTS expected"}
create view if not
{"msg": "IF NOT <EXISTS> expected"}
create view if not 123
{"msg": "IF NOT <EXISTS> expected"}
create view if not exists
{"msg": "CREATE VIEW <name> expected"}
create view test abc
{"msg": "CREATE VIEW <AS> expected"}
create view test.test
{"msg": "CREATE VIEW <AS> expected"}
create view test.test.test
{"msg": "CREATE VIEW <name> expected"}
create view test as
{"msg": "CREATE VIEW AS <SELECT> expected"}
create view test as abc
{"msg": "CREATE VIEW AS <SELECT> expected"}
create view test as select
{"msg": "bad expression"}
# test: create view
create view test as select 1
show views
[{
  "public.test": {
    "schema": "public",
    "name": "test",
    "query": "select 1",
    "columns": []
  }
}]
select * from system.views()
[{
  "schema": "public",
  "name": "test",
  "query": "select 1",
  "columns": []
}]
# test: create view if not exists
create view test as select 1
{"msg": "view 'test': already exists"}
create view if not exists public.test as select 1
drop view test
# test: create view schema not exists
create view test.test as select 1
{"msg": "schema 'test': not exists"}
# test: create view schema system
create view system.test as select 1
{"msg": "system schema <system> cannot be used to create objects"}
# test: create view schema
create schema test
create view test.test as select 1
select * from system.views()
[{
  "schema": "test",
  "name": "test",
  "query": "select 1",
  "columns": []
}]
drop view test
{"msg": "view 'test': not exists"}
drop view test.test
drop schema test
# test: create view with no arguments
create view test (
{"msg": "CREATE VIEW (<name> expected"}
create view test ()
{"msg": "CREATE VIEW <AS> expected"}
create view test () as select 1
drop view test
# test: create view with arguments
create view test (a
{"msg": "CREATE VIEW (<)> expected"}
create view test (a,
{"msg": "CREATE VIEW (<name> expected"}
create view test (a,)
{"msg": "CREATE VIEW (<name> expected"}
create view test (a, b) as select 1, 2
drop view test
# test: create view match select columns
create view test (a) as select 1, 2
{"msg": "number of view columns does not match select"}
# test: create view with conflicting table
create table test (id int primary key)
create view test as select 1
{"msg": "table <test> with the same name exists"}
drop table test
# test: create view table
create table test (id int primary key)
insert into test values (1)
insert into test values (2)
insert into test values (3)
create view test_view (id) as select * from test
select * from system.views()
[{
  "schema": "public",
  "name": "test_view",
  "query": "select * from test",
  "columns": [{
    "name": "id",
    "type": "",
    "constraint": {
      "not_null": false,
      "not_aggregated": true,
      "serial": false,
      "random": false,
      "random_modulo": 9223372036854775807,
      "aggregate": 0,
      "as_stored": "",
      "as_aggregated": "",
      "default": null
    }
  }]
}]
select id from test_view
[1, 2, 3]
select * from test_view
[[1], [2], [3]]
explain select id from test_view
[{
  "bytecode": {
    "coordinator": {
      "00": "send_all            0      0      -     # public.test",
      "01": "recv                0      0      0     ",
      "02": "bool                0      0      0     ",
      "03": "push                0      0      0     ",
      "04": "merge_recv          0      -1     -1    ",
      "05": "set                 1      0      0     ",
      "06": "cursor_open_expr    1      0      8     ",
      "07": "jmp                 11     0      0     ",
      "08": "cursor_idx          2      1      0     ",
      "09": "set_add             1      2      0     ",
      "10": "cursor_next         1      8      0     ",
      "11": "cursor_close        1      0      0     ",
      "12": "cte_set             0      1      0     ",
      "13": "body                0      0      0     ",
      "14": "ret                 0      0      0     "
    },
    "node": {
      "00": "set                 0      0      0     ",
      "01": "int_min             1      0      0     ",
      "02": "push                1      0      0     ",
      "03": "cursor_open         0      0      5     # public.test (primary)",
      "04": "jmp                 8      0      0     ",
      "05": "cursor_read         1      0      0     ",
      "06": "set_add             0      1      0     ",
      "07": "cursor_next         0      5      0     ",
      "08": "cursor_close        0      0      0     ",
      "09": "result              0      0      0     ",
      "10": "ret                 0      0      0     "
    }
  }
}]
drop view test_view
drop table test
# test: drop view statement parsing
drop view
{"msg": "DROP VIEW <name> expected"}
drop view 123
{"msg": "DROP VIEW <name> expected"}
drop view if
{"msg": "IF <EXISTS> expected"}
drop view if exists
{"msg": "DROP VIEW <name> expected"}
drop view test abc
{"msg": "unexpected token at the end of statement"}
# test: drop view
create view test () as select 1
drop view test
select * from system.views()
[]
# test: drop view if exists
drop view if exists test
# test: alter view statement parsing
alter
{"msg": "ALTER <USER|SCHEMA|TABLE|INDEX|VIEW> expected"}
alter view
{"msg": "ALTER VIEW <name> expected"}
alter view 123
{"msg": "ALTER VIEW <name> expected"}
alter view if
{"msg": "IF <EXISTS> expected"}
alter view if ex
{"msg": "IF <EXISTS> expected"}
alter view if exists
{"msg": "ALTER VIEW <name> expected"}
alter view if exists 123
{"msg": "ALTER VIEW <name> expected"}
# test: alter view if exists
alter view test rename test2
{"msg": "view 'test': not exists"}
alter view if exists test rename test2
# test: alter rename
create view test as select 1
alter view test rename
{"msg": "ALTER VIEW RENAME <name> expected"}
alter view test rename to
{"msg": "ALTER VIEW RENAME <name> expected"}
alter view test rename asf junk
{"msg": "unexpected token at the end of statement"}
alter view test rename to abc
select * from system.views()
[{
  "schema": "public",
  "name": "abc",
  "query": "select 1",
  "columns": []
}]
# test: alter rename view exists
create view test as select 1
alter view abc rename to test
{"msg": "view 'test': already exists"}
drop view test
# test: alter rename conflicting table exists
create table test (id int primary key)
alter view abc rename to test
{"msg": "table <test> with the same name exists"}
drop table test
# test: alter rename schema not exists
alter view abc rename to test.test
{"msg": "schema 'test': not exists"}
# test: alter rename schema system
alter view abc rename to system.test
{"msg": "system schema <system> cannot be used to create objects"}
# test: alter rename schema
alter view abc rename to public.test
select * from system.views()
[{
  "schema": "public",
  "name": "test",
  "query": "select 1",
  "columns": []
}]
create schema test
alter view public.test rename to test.test
select * from system.views()
[{
  "schema": "test",
  "name": "test",
  "query": "select 1",
  "columns": []
}]
disconnect S0
close E0
