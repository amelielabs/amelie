open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "backends": 3, "repl_reconnect_ms": 10
connect E0 S0 localhost:3480
# test: primary by default
show repl
[{
  "active": false,
  "role": "primary",
  "primary": null
}]
# test: backup replica
backup E1 "uri": "127.0.0.1:3480"
close E1
open E1 "uuid": "00000000-0000-0000-0000-000000000001", "listen": [{ "host": "127.0.0.1", "port": 3481 }]
connect E1 S1 localhost:3481
switch S1
show uuid
["00000000-0000-0000-0000-000000000001"]
show repl
[{
  "active": false,
  "role": "primary",
  "primary": null
}]
# test: start replica
start repl
[]
# test: subscribe (using self id)
subscribe "00000000-0000-0000-0000-000000000001"
{"code": 1, "msg": "repl: primary id cannot match this server id"}
# test: subscribe
subscribe "00000000-0000-0000-0000-000000000000"
[]
show repl
[{
  "active": true,
  "role": "replica",
  "primary": "00000000-0000-0000-0000-000000000000"
}]
show read_only
[true]
# test: create replica
switch S0
show replicas
[]
create replica "00000000-0000-0000-0000-000000000001" uri "127.0.0.1:3481"
[]
show replicas
[{
  "id": "00000000-0000-0000-0000-000000000001",
  "uri": "127.0.0.1:3481",
  "connected": false,
  "lsn": 0,
  "lag": 1
}]
# test: start primary
start repl
[]
# test: wait for primary connect
watch system.replicas()[0].connected = true
[]
# test: write
create table test (id int primary key)
[]
insert into test 1,2,3
[]
show lsn
[3]
# test: wait replica sync
watch system.replicas()[0].lsn = system.config().lsn
[]
# test: stop replica
disconnect S1
close E1
# test: write (replica off)
insert into test 4
[]
insert into test 5
[]
insert into test 6
[]
show lsn
[6]
# test: replica lag
show replicas
[{
  "id": "00000000-0000-0000-0000-000000000001",
  "uri": "127.0.0.1:3481",
  "connected": false,
  "lsn": 3,
  "lag": 3
}]
# test: replica disconnected
switch S0
watch system.replicas()[0].connected = false
[]
# test: restart replica
open E1 "uuid": "00000000-0000-0000-0000-000000000001", "listen": [{ "host": "127.0.0.1", "port": 3481 }]
connect E1 S1 localhost:3481
# test: wait for primary reconnect
switch S0
watch system.replicas()[0].connected = true
[]
# test: wait replica sync
watch system.replicas()[0].lsn = system.config().lsn
[]
show replicas
[{
  "id": "00000000-0000-0000-0000-000000000001",
  "uri": "127.0.0.1:3481",
  "connected": true,
  "lsn": 6,
  "lag": 0
}]
# test: restart primary
disconnect S0
close E0
open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3480 }], "backends": 3, "repl_reconnect_ms": 10
connect E0 S0 localhost:3480
# test: wait for primary reconnect
switch S0
watch system.replicas()[0].connected = true
[]
# test: write
insert into test 7
[]
insert into test 8
[]
insert into test 9
[]
# test: wait replica sync
watch system.replicas()[0].lsn = system.config().lsn
[]
show replicas
[{
  "id": "00000000-0000-0000-0000-000000000001",
  "uri": "127.0.0.1:3481",
  "connected": true,
  "lsn": 9,
  "lag": 0
}]
# test: ensure replica is read-only
switch S1
show read_only
[true]
show lsn
[9]
insert into test 10
{"code": 1, "msg": "system is in read-only mode"}
show lsn
[9]
show psn
[3]
create table test2 (id int primary key)
{"code": 1, "msg": "system is in read-only mode"}
show lsn
[9]
show psn
[3]
# test: replica read
select * from test
[[1], [6], [7], [8], [2], [9], [3], [4], [5]]
show repl
[{
  "active": true,
  "role": "replica",
  "primary": "00000000-0000-0000-0000-000000000000"
}]
show lsn
[9]
# test: failover (unsubscribe, switch to primary)
show repl
[{
  "active": true,
  "role": "replica",
  "primary": "00000000-0000-0000-0000-000000000000"
}]
unsubscribe
[]
show repl
[{
  "active": true,
  "role": "primary",
  "primary": null
}]
# test: drop replica
switch S0
drop replica "00000000-0000-0000-0000-000000000001"
[]
show replicas
[]
# test: subscribe to new primary
switch S0
subscribe "00000000-0000-0000-0000-000000000001"
[]
show repl
[{
  "active": true,
  "role": "replica",
  "primary": "00000000-0000-0000-0000-000000000001"
}]
# test: create replica
switch S1
create replica "00000000-0000-0000-0000-000000000000" uri "127.0.0.1:3480"
[]
# test: wait for primary connect
watch system.replicas()[0].connected = true
[]
watch system.replicas()[0].lsn = system.config().lsn
[]
# test: write
insert into test 10
[]
insert into test 11
[]
insert into test 12
[]
# test: wait replica sync
watch system.replicas()[0].lsn = system.config().lsn
[]
show replicas
[{
  "id": "00000000-0000-0000-0000-000000000000",
  "uri": "127.0.0.1:3480",
  "connected": true,
  "lsn": 12,
  "lag": 0
}]
select * from test
[[1], [6], [7], [8], [2], [9], [10], [12], [3], [4], [5], [11]]
disconnect S1
close E1
disconnect S0
close E0
