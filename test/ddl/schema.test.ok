env_open E0 "uuid": "00000000-0000-0000-0000-000000000000"
connect E0 S0
connect: on_connect
# test: ensure public schema exists
show schemas
[{"name": "public", "system": true}, {"name": "system", "system": true}]
select * from system.schemas() where name = "public"
{"name": "public", "system": true}
select system from system.schemas() where name = "public"
true
# test: ensure system schema exists
show schemas
[{"name": "public", "system": true}, {"name": "system", "system": true}]
select * from system.schemas() where name = "system"
{"name": "system", "system": true}
select system from system.schemas() where name = "system"
true
# test: create schema statement parsing
create
query: on_error
{"code": 1, "msg": "CREATE <USER|SCHEMA|TABLE|VIEW> expected"}
create schema
query: on_error
{"code": 1, "msg": "CREATE SCHEMA <name> expected"}
create schema 123
query: on_error
{"code": 1, "msg": "CREATE SCHEMA <name> expected"}
create schema if
query: on_error
{"code": 1, "msg": "IF <NOT> EXISTS expected"}
create schema if not
query: on_error
{"code": 1, "msg": "IF NOT <EXISTS> expected"}
create schema if not 123
query: on_error
{"code": 1, "msg": "IF NOT <EXISTS> expected"}
create schema if not exists
query: on_error
{"code": 1, "msg": "CREATE SCHEMA <name> expected"}
create schema test abc
query: on_error
{"code": 1, "msg": "unexpected clause at the end of command"}
# test: create schema
create schema test
show schemas
[{"name": "public", "system": true}, {"name": "system", "system": true}, {"name": "test", "system": false}]
select system.schemas()
[{"name": "public", "system": true}, {"name": "system", "system": true}, {"name": "test", "system": false}]
# test: create schema if not exists
create schema test
query: on_error
{"code": 1, "msg": "schema 'test': already exists"}
create schema if not exists test
show schemas
[{"name": "public", "system": true}, {"name": "system", "system": true}, {"name": "test", "system": false}]
# test: drop schema statement parsing
drop schema
query: on_error
{"code": 1, "msg": "DROP SCHEMA <name> expected"}
drop schema 123
query: on_error
{"code": 1, "msg": "DROP SCHEMA <name> expected"}
drop schema if
query: on_error
{"code": 1, "msg": "IF <EXISTS> expected"}
drop schema if exists
query: on_error
{"code": 1, "msg": "DROP SCHEMA <name> expected"}
drop schema test abc
query: on_error
{"code": 1, "msg": "unexpected clause at the end of command"}
# test: drop schema
drop schema test
show schemas
[{"name": "public", "system": true}, {"name": "system", "system": true}]
# test: drop schema if exists
drop schema test
query: on_error
{"code": 1, "msg": "schema 'test': not exists"}
drop schema if exists test
show schemas
[{"name": "public", "system": true}, {"name": "system", "system": true}]
# test: drop system schema
drop schema public
query: on_error
{"code": 1, "msg": "schema 'public': system schema cannot be dropped"}
show schemas
[{"name": "public", "system": true}, {"name": "system", "system": true}]
# test: drop schema with dependency
create schema test
create table test.test(id int primary key)
drop schema test
query: on_error
{"code": 1, "msg": "table 'test' depends on schema 'test"}
drop table test.test
drop schema test
# test: alter schema statment parsing
alter schema
query: on_error
{"code": 1, "msg": "ALTER SCHEMA <name> expected"}
alter schema 123
query: on_error
{"code": 1, "msg": "ALTER SCHEMA <name> expected"}
alter schema test
query: on_error
{"code": 1, "msg": "ALTER SCHEMA <RENAME> expected"}
alter schema test rename
query: on_error
{"code": 1, "msg": "ALTER SCHEMA RENAME <name> expected"}
alter schema test rename to
query: on_error
{"code": 1, "msg": "ALTER SCHEMA RENAME <name> expected"}
alter schema test rename "hello"
query: on_error
{"code": 1, "msg": "ALTER SCHEMA RENAME <name> expected"}
# test: alter schema rename
create schema test
select system.schemas()
[{"name": "public", "system": true}, {"name": "system", "system": true}, {"name": "test", "system": false}]
alter schema test rename test2
select system.schemas()
[{"name": "public", "system": true}, {"name": "system", "system": true}, {"name": "test2", "system": false}]
select system.schemas()
[{"name": "public", "system": true}, {"name": "system", "system": true}, {"name": "test2", "system": false}]
# test: alter schema system
alter schema public rename _public
query: on_error
{"code": 1, "msg": "schema 'public': system schema cannot be altered"}
disconnect S0
env_close E0
