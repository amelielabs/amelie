open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 localhost:3485
# test: on conflict parsing
create table test (id int primary key, data int)
insert into test values(1, 0) 123
{"msg": "unexpected token at the end of statement"}
insert into test values(1, 0) ON
{"msg": "INSERT VALUES ON <CONFLICT> expected"}
insert into test values(1, 0) ON 123
{"msg": "INSERT VALUES ON <CONFLICT> expected"}
insert into test values(1, 0) on conflict
{"msg": "INSERT VALUES ON CONFLICT <DO> expected"}
insert into test values(1, 0) on conflict 123
{"msg": "INSERT VALUES ON CONFLICT <DO> expected"}
insert into test values(1, 0) on conflict do
{"msg": "INSERT VALUES ON CONFLICT DO <NOTHING | UPDATE | AGGREGATE> expected"}
insert into test values(1, 0) on conflict do 123
{"msg": "INSERT VALUES ON CONFLICT DO <NOTHING | UPDATE | AGGREGATE> expected"}
insert into test values(1, 0) on conflict do update
{"msg": "UPDATE <SET> expected"}
insert into test values(1, 0) on conflict do update set
{"msg": "UPDATE name SET <name> expected"}
insert into test values(1, 0) on conflict do update set 123
{"msg": "UPDATE name SET <name> expected"}
insert into test values(1, 0) on conflict do update set path
{"msg": "UPDATE name SET column <=> expected"}
insert into test values(1, 0) on conflict do update set path =
{"msg": "bad expression"}
drop table test
# test: on conflict do nothing
create table test (id int primary key, data int)
insert into test values(1, 0) on conflict do nothing
insert into test values(1, 0) on conflict do nothing
drop table test
disconnect S0
close E0
