open E0 "uuid": "00000000-0000-0000-0000-000000000000", "listen": [{ "host": "127.0.0.1", "port": 3485 }]
connect E0 S0 127.0.0.1:3485
# test: if parsing
if
{"msg": "if ⟵ bad expression"}
if 1
{"msg": "if 1 ⟵ THEN expected"}
if 1 do
{"msg": "if 1 ❰do❱ ⟵ THEN expected"}
if 1 then
{"msg": "if 1 then ⟵ END expected"}
if 1 then 1
{"msg": "if 1 then 1 ⟵ unexpected statement"}
if 1 then select 1
{"msg": "if 1 then select 1 ⟵ END expected"}
if 1 then select 1;
{"msg": "if 1 then select 1; ⟵ END expected"}
# test: if
explain if 1 then select 123; end
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 6      0      0     ",
      "02": "int                 0      -      0     # 1",
      "03": "jntr                6      0      0     ",
      "04": "int                 0      -      0     # 123",
      "05": "jmp                 1      0      0     ",
      "06": "ret                 -1     -      -     "
    }
  },
  "access": []
}]
if 1 then select 123; end
# test: if empty
explain if 1 then end
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 5      0      0     ",
      "02": "int                 0      -      0     # 1",
      "03": "jntr                5      0      0     ",
      "04": "jmp                 1      0      0     ",
      "05": "ret                 -1     -      -     "
    }
  },
  "access": []
}]
if 1 then end
# test: if else parsing
if 1 then select 123; else
{"msg": "if 1 then select 123; else ⟵ END expected"}
if 1 then select 123; else 1
{"msg": "if 1 then select 123; else 1 ⟵ unexpected statement"}
if 1 then select 123; else else
{"msg": "if 1 then select 123; else ❰else❱ ⟵ END expected"}
if 1 then select 123; else select 321;
{"msg": "if 1 then select 123; else select 321; ⟵ END expected"}
# test: if else
explain if 1 then select 123; else select 321; end
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 7      0      0     ",
      "02": "int                 0      -      0     # 1",
      "03": "jntr                6      0      0     ",
      "04": "int                 0      -      0     # 123",
      "05": "jmp                 1      0      0     ",
      "06": "int                 1      -      0     # 321",
      "07": "ret                 -1     -      -     "
    }
  },
  "access": []
}]
if 1 then select 123; else select 321; end
# test: if else else
if 1 then select 123; else select 321; else select 432; end
{"msg": "if 1 then select 123; else select 321; ❰else❱ ⟵ END expected"}
# test: if elsif parsing
if 1 then select 123; elsif
{"msg": "if 1 then select 123; elsif ⟵ bad expression"}
if 1 then select 123; elsif 2
{"msg": "if 1 then select 123; elsif 2 ⟵ THEN expected"}
if 1 then select 123; elsif 2 then
{"msg": "if 1 then select 123; elsif 2 then ⟵ END expected"}
if 1 then select 123; elsif 2 then 1
{"msg": "if 1 then select 123; elsif 2 then 1 ⟵ unexpected statement"}
if 1 then select 123; elsif 2 then select 321
{"msg": "if 1 then select 123; elsif 2 then select 321 ⟵ END expected"}
if 1 then select 123; elsif 2 then select 321;
{"msg": "if 1 then select 123; elsif 2 then select 321; ⟵ END expected"}
# test: if elsif
explain if 1 then select 123; elsif 2 then select 321; end
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 10     0      0     ",
      "02": "int                 0      -      0     # 1",
      "03": "jntr                6      0      0     ",
      "04": "int                 0      -      0     # 123",
      "05": "jmp                 1      0      0     ",
      "06": "int                 1      -      0     # 2",
      "07": "jntr                10     1      0     ",
      "08": "int                 1      -      0     # 321",
      "09": "jmp                 1      0      0     ",
      "10": "ret                 -1     -      -     "
    }
  },
  "access": []
}]
if 1 then select 123; elsif 2 then select 321; end
# test: if elsif elsif
explain if 1 then select 123; elsif 2 then select 321; elsif 3 then select 821; end
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 14     0      0     ",
      "02": "int                 0      -      0     # 1",
      "03": "jntr                6      0      0     ",
      "04": "int                 0      -      0     # 123",
      "05": "jmp                 1      0      0     ",
      "06": "int                 1      -      0     # 2",
      "07": "jntr                10     1      0     ",
      "08": "int                 1      -      0     # 321",
      "09": "jmp                 1      0      0     ",
      "10": "int                 2      -      0     # 3",
      "11": "jntr                14     2      0     ",
      "12": "int                 2      -      0     # 821",
      "13": "jmp                 1      0      0     ",
      "14": "ret                 -1     -      -     "
    }
  },
  "access": []
}]
if 1 then select 123; elsif 2 then select 321; elsif 3 then select 821; end
# test: if elsif else
if 1 then select 123; elsif 2 then select 321; else
{"msg": "if 1 then select 123; elsif 2 then select 321; else ⟵ END expected"}
if 1 then select 123; elsif 2 then select 321; else 1
{"msg": "if 1 then select 123; elsif 2 then select 321; else 1 ⟵ unexpected statement"}
explain if 1 then select 123; elsif 2 then select 321; else select 821; end
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 11     0      0     ",
      "02": "int                 0      -      0     # 1",
      "03": "jntr                6      0      0     ",
      "04": "int                 0      -      0     # 123",
      "05": "jmp                 1      0      0     ",
      "06": "int                 1      -      0     # 2",
      "07": "jntr                10     1      0     ",
      "08": "int                 1      -      0     # 321",
      "09": "jmp                 1      0      0     ",
      "10": "int                 2      -      0     # 821",
      "11": "ret                 -1     -      -     "
    }
  },
  "access": []
}]
if 1 then select 123; elsif 2 then select 321; else select 821; end
# test: if elsif elsif else
explain if 1 then select 123; elsif 2 then select 321; elsif 3 then select 821; else select 0; end
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 15     0      0     ",
      "02": "int                 0      -      0     # 1",
      "03": "jntr                6      0      0     ",
      "04": "int                 0      -      0     # 123",
      "05": "jmp                 1      0      0     ",
      "06": "int                 1      -      0     # 2",
      "07": "jntr                10     1      0     ",
      "08": "int                 1      -      0     # 321",
      "09": "jmp                 1      0      0     ",
      "10": "int                 2      -      0     # 3",
      "11": "jntr                14     2      0     ",
      "12": "int                 2      -      0     # 821",
      "13": "jmp                 1      0      0     ",
      "14": "int                 3      -      0     # 0",
      "15": "ret                 -1     -      -     "
    }
  },
  "access": []
}]
if 1 then select 123; elsif 2 then select 321; elsif 3 then select 821; else select 0; end
# test: if if
explain declare x int := 0; if 1 then if 2 then x:= 2; end; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 16     0      0     ",
      "05": "int                 1      -      0     # 1",
      "06": "jntr                16     1      0     ",
      "07": "jmp                 9      0      0     ",
      "08": "jmp                 15     0      0     ",
      "09": "int                 1      -      0     # 2",
      "10": "jntr                15     1      0     ",
      "11": "int                 1      -      0     # 2",
      "12": "assign              0      1      0     ",
      "13": "free                1      0      0     ",
      "14": "jmp                 8      0      0     ",
      "15": "jmp                 4      0      0     ",
      "16": "dup                 1      0      0     ",
      "17": "ret                 1      -      -     "
    }
  },
  "access": []
}]
declare x int := 0; if 1 then if 2 then x:= 2; end; end; select x
[2]
# test: if if else
explain declare x int := 0; if 1 then if 0 then x:= 2; else x := 3; end; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 19     0      0     ",
      "05": "int                 1      -      0     # 1",
      "06": "jntr                19     1      0     ",
      "07": "jmp                 9      0      0     ",
      "08": "jmp                 18     0      0     ",
      "09": "int                 1      -      0     # 0",
      "10": "jntr                15     1      0     ",
      "11": "int                 1      -      0     # 2",
      "12": "assign              0      1      0     ",
      "13": "free                1      0      0     ",
      "14": "jmp                 8      0      0     ",
      "15": "int                 1      -      0     # 3",
      "16": "assign              0      1      0     ",
      "17": "free                1      0      0     ",
      "18": "jmp                 4      0      0     ",
      "19": "dup                 1      0      0     ",
      "20": "ret                 1      -      -     "
    }
  },
  "access": []
}]
declare x int := 0; if 1 then if 0 then x:= 2; else x := 3; end; end; select x
[3]
# test: if if else else
explain declare x int := 0; if 1 then if 0 then x:= 2; else x := 3; end; else x:= 4; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 22     0      0     ",
      "05": "int                 1      -      0     # 1",
      "06": "jntr                19     1      0     ",
      "07": "jmp                 9      0      0     ",
      "08": "jmp                 18     0      0     ",
      "09": "int                 1      -      0     # 0",
      "10": "jntr                15     1      0     ",
      "11": "int                 1      -      0     # 2",
      "12": "assign              0      1      0     ",
      "13": "free                1      0      0     ",
      "14": "jmp                 8      0      0     ",
      "15": "int                 1      -      0     # 3",
      "16": "assign              0      1      0     ",
      "17": "free                1      0      0     ",
      "18": "jmp                 4      0      0     ",
      "19": "int                 1      -      0     # 4",
      "20": "assign              0      1      0     ",
      "21": "free                1      0      0     ",
      "22": "dup                 1      0      0     ",
      "23": "ret                 1      -      -     "
    }
  },
  "access": []
}]
declare x int := 0; if 1 then if 0 then x:= 2; else x := 3; end; else x:= 4; end; select x
[3]
declare x int := 0; if 0 then if 0 then x:= 2; else x := 3; end; else x:= 4; end; select x
[4]
declare x int := 0; if 0 then if 0 then x:= 2; end; else x:= 4; end; select x
[4]
# test: if insert
create table test (id int primary key)
explain if true then; insert into test values (1); insert into test values (2); end;
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 9      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "jntr                9      0      0     ",
      "04": "set_ptr             0      -      0     ",
      "05": "send_shard          0      -      0     # public.test",
      "06": "set_ptr             0      -      0     ",
      "07": "send_shard          2      -      0     # public.test",
      "08": "jmp                 1      0      0     ",
      "09": "close               0      0      0     ",
      "10": "ret                 -1     -      -     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.test",
      "01": "ret                 -1     -      -     ",
      "02": "insert              -      0      0     # public.test",
      "03": "ret                 -1     -      -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
if true then; insert into test values (1); insert into test values (2); end;
drop table test
# test: if insert if insert select
create table test (id int primary key)
explain if true then; insert into test values (1); end; if false then insert into test values (2); end; select * from test
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 7      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "jntr                7      0      0     ",
      "04": "set_ptr             0      -      0     ",
      "05": "send_shard          0      -      0     # public.test",
      "06": "jmp                 1      0      0     ",
      "07": "jmp                 9      0      0     ",
      "08": "jmp                 14     0      0     ",
      "09": "bool                0      0      0     ",
      "10": "jntr                14     0      0     ",
      "11": "set_ptr             0      -      0     ",
      "12": "send_shard          2      -      0     # public.test",
      "13": "jmp                 8      0      0     ",
      "14": "union               0      0      0     ",
      "15": "send_all            4      -      0     # public.test (last)",
      "16": "union_recv          0      0      0     ",
      "17": "union_set           0      0      -1    ",
      "18": "ret                 0      -      -     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.test",
      "01": "ret                 -1     -      -     ",
      "02": "insert              -      0      0     # public.test",
      "03": "ret                 -1     -      -     ",
      "04": "set                 0      1      0     ",
      "05": "table_open_part     1      0      10    # public.test (primary)",
      "06": "table_readi32       2      1      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             0      0      0     ",
      "09": "table_next          1      6      0     ",
      "10": "free                1      0      0     ",
      "11": "ret                 0      -      -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
if true then; insert into test values (1); end; if false then insert into test values (2); end; select * from test
[1]
delete from test
if false then; insert into test values (1); end; if true then insert into test values (2); end; select * from test
[2]
drop table test
# test: if insert else insert
create table test (id int primary key)
explain if true then; insert into test values (1); else insert into test values (2); end; select * from test
[{
  "bytecode": {
    "frontend": {
      "00": "jmp                 2      0      0     ",
      "01": "jmp                 9      0      0     ",
      "02": "bool                0      1      0     ",
      "03": "jntr                7      0      0     ",
      "04": "set_ptr             0      -      0     ",
      "05": "send_shard          0      -      0     # public.test",
      "06": "jmp                 1      0      0     ",
      "07": "set_ptr             0      -      0     ",
      "08": "send_shard          2      -      0     # public.test",
      "09": "union               0      0      0     ",
      "10": "send_all            4      -      0     # public.test (last)",
      "11": "union_recv          0      0      0     ",
      "12": "union_set           0      0      -1    ",
      "13": "ret                 0      -      -     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.test",
      "01": "ret                 -1     -      -     ",
      "02": "insert              -      0      0     # public.test",
      "03": "ret                 -1     -      -     ",
      "04": "set                 0      1      0     ",
      "05": "table_open_part     1      0      10    # public.test (primary)",
      "06": "table_readi32       2      1      0     ",
      "07": "push                2      0      0     ",
      "08": "set_add             0      0      0     ",
      "09": "table_next          1      6      0     ",
      "10": "free                1      0      0     ",
      "11": "ret                 0      -      -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
if true then; insert into test values (1); else insert into test values (2); end; select * from test
[1]
if false then; insert into test values (1); else insert into test values (2); end; select * from test
[1, 2]
drop table test
# test: if insert elsif insert else insert
create table test (id int primary key)
explain declare x int := 0; if x = 0 then; insert into test values (0); elsif x = 1 then insert into test values (1); else insert into test values (2); end; select * from test
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 21     0      0     ",
      "05": "dup                 1      0      0     ",
      "06": "int                 2      -      0     # 0",
      "07": "equii               3      1      2     ",
      "08": "jntr                12     3      0     ",
      "09": "set_ptr             1      -      0     ",
      "10": "send_shard          0      -      1     # public.test",
      "11": "jmp                 4      0      0     ",
      "12": "dup                 1      0      0     ",
      "13": "int                 2      -      0     # 1",
      "14": "equii               3      1      2     ",
      "15": "jntr                19     3      0     ",
      "16": "set_ptr             1      -      0     ",
      "17": "send_shard          2      -      1     # public.test",
      "18": "jmp                 4      0      0     ",
      "19": "set_ptr             1      -      0     ",
      "20": "send_shard          4      -      1     # public.test",
      "21": "union               1      0      0     ",
      "22": "send_all            6      -      1     # public.test (last)",
      "23": "union_recv          1      0      0     ",
      "24": "union_set           1      0      -1    ",
      "25": "ret                 1      -      -     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.test",
      "01": "ret                 -1     -      -     ",
      "02": "insert              -      0      0     # public.test",
      "03": "ret                 -1     -      -     ",
      "04": "insert              -      0      0     # public.test",
      "05": "ret                 -1     -      -     ",
      "06": "set                 1      1      0     ",
      "07": "table_open_part     2      0      12    # public.test (primary)",
      "08": "table_readi32       3      2      0     ",
      "09": "push                3      0      0     ",
      "10": "set_add             1      0      0     ",
      "11": "table_next          2      8      0     ",
      "12": "free                2      0      0     ",
      "13": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
declare x int := 0; if x = 0 then; insert into test values (0); elsif x = 1 then insert into test values (1); else insert into test values (2); end; select * from test
[0]
declare x int := 1; if x = 0 then; insert into test values (0); elsif x = 1 then insert into test values (1); else insert into test values (2); end; select * from test
[0, 1]
declare x int := 2; if x = 0 then; insert into test values (0); elsif x = 1 then insert into test values (1); else insert into test values (2); end; select * from test
[0, 1, 2]
drop table test
# test: if insert returning
create table test (id int primary key)
explain declare x int := 0; if true then; insert into test values (123) returning * into x; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 14     0      0     ",
      "05": "bool                1      1      0     ",
      "06": "jntr                14     1      0     ",
      "07": "union               1      0      0     ",
      "08": "set_ptr             2      -      0     ",
      "09": "send_shard          0      -      2     # public.test",
      "10": "union_recv          1      0      0     ",
      "11": "assign              0      1      0     ",
      "12": "free                1      0      0     ",
      "13": "jmp                 4      0      0     ",
      "14": "close               0      0      0     ",
      "15": "dup                 1      0      0     ",
      "16": "ret                 1      -      -     "
    },
    "backend": {
      "00": "set                 1      1      0     ",
      "01": "table_prepare       2      -      0     # public.test",
      "02": "jmp                 9      0      0     ",
      "03": "string              3      0      0     # unique key constraint violation",
      "04": "push                3      0      0     ",
      "05": "call                3      -      1     # public.error()",
      "06": "table_readi32       3      2      0     ",
      "07": "push                3      0      0     ",
      "08": "set_add             1      0      0     ",
      "09": "upsert              2      3      6     ",
      "10": "free                2      0      0     ",
      "11": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
declare x int := 0; if true then; insert into test values (123) returning * into x; end; select x
[123]
drop table test
# test: if insert var
create table test (id int primary key)
explain declare x int := 0; if true then; insert into test values (x); end; select * from test
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 12     0      0     ",
      "05": "bool                1      1      0     ",
      "06": "jntr                12     1      0     ",
      "07": "dup                 1      0      0     ",
      "08": "push_ref            1      0      1     ",
      "09": "set_ptr             1      -      0     ",
      "10": "send_shard          0      -      1     # public.test",
      "11": "jmp                 4      0      0     ",
      "12": "union               1      0      0     ",
      "13": "send_all            2      -      1     # public.test (last)",
      "14": "union_recv          1      0      0     ",
      "15": "union_set           1      0      -1    ",
      "16": "ret                 1      -      -     "
    },
    "backend": {
      "00": "insert              -      0      0     # public.test",
      "01": "ret                 -1     -      -     ",
      "02": "set                 1      1      0     ",
      "03": "table_open_part     2      0      8     # public.test (primary)",
      "04": "table_readi32       3      2      0     ",
      "05": "push                3      0      0     ",
      "06": "set_add             1      0      0     ",
      "07": "table_next          2      4      0     ",
      "08": "free                2      0      0     ",
      "09": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "rw"]]
}]
declare x int := 0; if true then; insert into test values (x); end; select * from test
[0]
drop table test
# test: if select
create table test (id int primary key)
insert into test values (123)
explain declare x int := 0; if true then select * into x from test; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 14     0      0     ",
      "05": "bool                1      1      0     ",
      "06": "jntr                14     1      0     ",
      "07": "union               1      0      0     ",
      "08": "send_all            0      -      1     # public.test",
      "09": "union_recv          1      0      0     ",
      "10": "union_set           1      0      -1    ",
      "11": "assign              0      1      0     ",
      "12": "free                1      0      0     ",
      "13": "jmp                 4      0      0     ",
      "14": "close               0      0      0     ",
      "15": "dup                 1      0      0     ",
      "16": "ret                 1      -      -     "
    },
    "backend": {
      "00": "set                 1      1      0     ",
      "01": "table_open_part     2      0      6     # public.test (primary)",
      "02": "table_readi32       3      2      0     ",
      "03": "push                3      0      0     ",
      "04": "set_add             1      0      0     ",
      "05": "table_next          2      2      0     ",
      "06": "free                2      0      0     ",
      "07": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare x int := 0; if true then select * into x from test; end; select x
[123]
explain declare x int := 0; if true then select count(*) into x from test; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 23     0      0     ",
      "05": "bool                1      1      0     ",
      "06": "jntr                23     1      0     ",
      "07": "union               1      0      0     ",
      "08": "send_all            0      -      1     # public.test",
      "09": "union_recv          1      0      0     ",
      "10": "union_set           1      1      -1    ",
      "11": "union_set_aggs      1      21     0     ",
      "12": "set                 2      1      0     ",
      "13": "store_open          3      1      18    ",
      "14": "count               4      3      0     ",
      "15": "push                4      0      0     ",
      "16": "set_add             2      0      0     ",
      "17": "store_next          3      14     0     ",
      "18": "free                3      0      0     ",
      "19": "free                1      0      0     ",
      "20": "assign              0      2      0     ",
      "21": "free                2      0      0     ",
      "22": "jmp                 4      0      0     ",
      "23": "close               0      0      0     ",
      "24": "dup                 1      0      0     ",
      "25": "ret                 1      -      -     "
    },
    "backend": {
      "00": "set_ordered         1      1      1     ",
      "01": "table_open_part     2      1      9     # public.test (primary)",
      "02": "bool                3      1      0     ",
      "03": "push                3      0      0     ",
      "04": "set_get             3      1      0     ",
      "05": "int                 4      -      0     # 1",
      "06": "push                4      0      0     ",
      "07": "set_agg             1      3      21    ",
      "08": "table_next          2      2      0     ",
      "09": "free                2      0      0     ",
      "10": "bool                2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_get             2      1      0     ",
      "13": "null                3      0      0     ",
      "14": "push                3      0      0     ",
      "15": "set_agg             1      2      21    ",
      "16": "set_sort            1      0      0     ",
      "17": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare x int := 0; if true then select count(*) into x from test; end; select x
[1]
explain declare x int := 0; if false then else select count(*) into x from test; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 23     0      0     ",
      "05": "bool                1      0      0     ",
      "06": "jntr                8      1      0     ",
      "07": "jmp                 4      0      0     ",
      "08": "union               1      0      0     ",
      "09": "send_all            0      -      1     # public.test",
      "10": "union_recv          1      0      0     ",
      "11": "union_set           1      1      -1    ",
      "12": "union_set_aggs      1      21     0     ",
      "13": "set                 2      1      0     ",
      "14": "store_open          3      1      19    ",
      "15": "count               4      3      0     ",
      "16": "push                4      0      0     ",
      "17": "set_add             2      0      0     ",
      "18": "store_next          3      15     0     ",
      "19": "free                3      0      0     ",
      "20": "free                1      0      0     ",
      "21": "assign              0      2      0     ",
      "22": "free                2      0      0     ",
      "23": "close               0      0      0     ",
      "24": "dup                 1      0      0     ",
      "25": "ret                 1      -      -     "
    },
    "backend": {
      "00": "set_ordered         1      1      1     ",
      "01": "table_open_part     2      1      9     # public.test (primary)",
      "02": "bool                3      1      0     ",
      "03": "push                3      0      0     ",
      "04": "set_get             3      1      0     ",
      "05": "int                 4      -      0     # 1",
      "06": "push                4      0      0     ",
      "07": "set_agg             1      3      21    ",
      "08": "table_next          2      2      0     ",
      "09": "free                2      0      0     ",
      "10": "bool                2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_get             2      1      0     ",
      "13": "null                3      0      0     ",
      "14": "push                3      0      0     ",
      "15": "set_agg             1      2      21    ",
      "16": "set_sort            1      0      0     ",
      "17": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare x int := 0; if false then else select count(*) into x from test; end; select x
[1]
explain declare x int := 0; if false then else select count(*) into x from test; end; select 1; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 23     0      0     ",
      "05": "bool                1      0      0     ",
      "06": "jntr                8      1      0     ",
      "07": "jmp                 4      0      0     ",
      "08": "union               1      0      0     ",
      "09": "send_all            0      -      1     # public.test",
      "10": "union_recv          1      0      0     ",
      "11": "union_set           1      1      -1    ",
      "12": "union_set_aggs      1      21     0     ",
      "13": "set                 2      1      0     ",
      "14": "store_open          3      1      19    ",
      "15": "count               4      3      0     ",
      "16": "push                4      0      0     ",
      "17": "set_add             2      0      0     ",
      "18": "store_next          3      15     0     ",
      "19": "free                3      0      0     ",
      "20": "free                1      0      0     ",
      "21": "assign              0      2      0     ",
      "22": "free                2      0      0     ",
      "23": "close               0      0      0     ",
      "24": "int                 1      -      0     # 1",
      "25": "dup                 2      0      0     ",
      "26": "ret                 2      -      -     "
    },
    "backend": {
      "00": "set_ordered         1      1      1     ",
      "01": "table_open_part     2      1      9     # public.test (primary)",
      "02": "bool                3      1      0     ",
      "03": "push                3      0      0     ",
      "04": "set_get             3      1      0     ",
      "05": "int                 4      -      0     # 1",
      "06": "push                4      0      0     ",
      "07": "set_agg             1      3      21    ",
      "08": "table_next          2      2      0     ",
      "09": "free                2      0      0     ",
      "10": "bool                2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_get             2      1      0     ",
      "13": "null                3      0      0     ",
      "14": "push                3      0      0     ",
      "15": "set_agg             1      2      21    ",
      "16": "set_sort            1      0      0     ",
      "17": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare x int := 0; if false then else select count(*) into x from test; end; select 1; select x
[1]
explain declare x int := 0; if false then else select count(*) into x from test; end; select * from test; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 23     0      0     ",
      "05": "bool                1      0      0     ",
      "06": "jntr                8      1      0     ",
      "07": "jmp                 4      0      0     ",
      "08": "union               1      0      0     ",
      "09": "send_all            0      -      1     # public.test",
      "10": "union_recv          1      0      0     ",
      "11": "union_set           1      1      -1    ",
      "12": "union_set_aggs      1      21     0     ",
      "13": "set                 2      1      0     ",
      "14": "store_open          3      1      19    ",
      "15": "count               4      3      0     ",
      "16": "push                4      0      0     ",
      "17": "set_add             2      0      0     ",
      "18": "store_next          3      15     0     ",
      "19": "free                3      0      0     ",
      "20": "free                1      0      0     ",
      "21": "assign              0      2      0     ",
      "22": "free                2      0      0     ",
      "23": "union               1      0      0     ",
      "24": "send_all            18     -      1     # public.test (last)",
      "25": "dup                 2      0      0     ",
      "26": "ret                 2      -      -     "
    },
    "backend": {
      "00": "set_ordered         1      1      1     ",
      "01": "table_open_part     2      1      9     # public.test (primary)",
      "02": "bool                3      1      0     ",
      "03": "push                3      0      0     ",
      "04": "set_get             3      1      0     ",
      "05": "int                 4      -      0     # 1",
      "06": "push                4      0      0     ",
      "07": "set_agg             1      3      21    ",
      "08": "table_next          2      2      0     ",
      "09": "free                2      0      0     ",
      "10": "bool                2      1      0     ",
      "11": "push                2      0      0     ",
      "12": "set_get             2      1      0     ",
      "13": "null                3      0      0     ",
      "14": "push                3      0      0     ",
      "15": "set_agg             1      2      21    ",
      "16": "set_sort            1      0      0     ",
      "17": "ret                 1      -      -     ",
      "18": "set                 1      1      0     ",
      "19": "table_open_part     2      25     24    # public.test (primary)",
      "20": "table_readi32       3      2      0     ",
      "21": "push                3      0      0     ",
      "22": "set_add             1      0      0     ",
      "23": "table_next          2      20     0     ",
      "24": "free                2      0      0     ",
      "25": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare x int := 0; if false then else select count(*) into x from test; end; select * from test; select x
[1]
explain declare x int := 0; if true then if false then select * into x from test; end; end; select x
[{
  "bytecode": {
    "frontend": {
      "00": "int                 1      -      0     # 0",
      "01": "assign              0      1      0     ",
      "02": "free                1      0      0     ",
      "03": "jmp                 5      0      0     ",
      "04": "jmp                 19     0      0     ",
      "05": "bool                1      1      0     ",
      "06": "jntr                19     1      0     ",
      "07": "jmp                 9      0      0     ",
      "08": "jmp                 18     0      0     ",
      "09": "bool                1      0      0     ",
      "10": "jntr                18     1      0     ",
      "11": "union               1      0      0     ",
      "12": "send_all            0      -      1     # public.test",
      "13": "union_recv          1      0      0     ",
      "14": "union_set           1      0      -1    ",
      "15": "assign              0      1      0     ",
      "16": "free                1      0      0     ",
      "17": "jmp                 8      0      0     ",
      "18": "jmp                 4      0      0     ",
      "19": "close               0      0      0     ",
      "20": "dup                 1      0      0     ",
      "21": "ret                 1      -      -     "
    },
    "backend": {
      "00": "set                 1      1      0     ",
      "01": "table_open_part     2      0      6     # public.test (primary)",
      "02": "table_readi32       3      2      0     ",
      "03": "push                3      0      0     ",
      "04": "set_add             1      0      0     ",
      "05": "table_next          2      2      0     ",
      "06": "free                2      0      0     ",
      "07": "ret                 1      -      -     "
    }
  },
  "access": [["public.test", "ro"]]
}]
declare x int := 0; if true then if false then select * into x from test; end; end; select x
[0]
drop table test
# test: if declare
if true then declare x int := 10; select x; end
if true then else declare x int := 10; select x; end
# test: if declare (shadow)
explain declare x int := 0; declare r int := 0; if true then declare x int := 10; select x into r; end; select r;
[{
  "bytecode": {
    "frontend": {
      "00": "int                 2      -      0     # 0",
      "01": "assign              0      2      0     ",
      "02": "free                2      0      0     ",
      "03": "int                 2      -      0     # 0",
      "04": "assign              1      2      0     ",
      "05": "free                2      0      0     ",
      "06": "jmp                 8      0      0     ",
      "07": "jmp                 18     0      0     ",
      "08": "bool                2      1      0     ",
      "09": "jntr                18     2      0     ",
      "10": "int                 3      -      0     # 10",
      "11": "assign              2      3      0     ",
      "12": "free                3      0      0     ",
      "13": "dup                 3      2      0     ",
      "14": "assign              1      3      0     ",
      "15": "free                3      0      0     ",
      "16": "free                2      0      0     ",
      "17": "jmp                 7      0      0     ",
      "18": "dup                 2      1      0     ",
      "19": "ret                 2      -      -     "
    }
  },
  "access": []
}]
declare x int := 0; declare r int := 0; if true then declare x int := 10; select x into r; end; select r;
[10]
declare x int := 0; declare r int := 0; declare y int := 77; if true then declare x int := 10 + y; select x into r; end; select r;
[87]
# test: if utility
if true then show all; end
{"msg": "if true then ❰show❱ ⟵ utility statement cannot be used here"}
# test: cte if
with a as (if true then end) select 1
{"msg": "with a as (❰if❱ ⟵ statement cannot be used inside CTE"}
with a as (select 1) if true then end
{"msg": "with a as (select 1) ❰if❱ ⟵ statement cannot be used inside CTE"}
disconnect S0
close E0
